"""
–¢–µ—Å—Ç –∑–∞ —Ñ–∏–ª—Ç—ä—Ä–∞ –Ω–∞ –±—É—Å–æ–≤–µ—Ç–µ –≤ output_handler
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from output_handler import InteractiveMapGenerator
from config import get_config
import logging

# –ù–∞—Å—Ç—Ä–æ–π–≤–∞–º–µ logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def test_bus_filter():
    """–¢–µ—Å—Ç–≤–∞ —Ñ–∏–ª—Ç—ä—Ä–∞ –Ω–∞ –±—É—Å–æ–≤–µ—Ç–µ"""
    print("üß™ –¢–µ—Å—Ç–≤–∞–º —Ñ–∏–ª—Ç—ä—Ä–∞ –Ω–∞ –±—É—Å–æ–≤–µ—Ç–µ...")
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ map generator
    config = get_config().output
    map_generator = InteractiveMapGenerator(config)
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏
    from cvrp_solver import Route, Customer, VehicleType
    from typing import List
    
    # –¢–µ—Å—Ç–æ–≤–∏ –∫–ª–∏–µ–Ω—Ç–∏
    customers = [
        Customer(id="1", name="–ö–ª–∏–µ–Ω—Ç 1", volume=10.0, coordinates=(42.697735, 23.321589), original_gps_data="42.697735,23.321589"),
        Customer(id="2", name="–ö–ª–∏–µ–Ω—Ç 2", volume=15.0, coordinates=(42.695785, 23.231659), original_gps_data="42.695785,23.231659"),
        Customer(id="3", name="–ö–ª–∏–µ–Ω—Ç 3", volume=8.0, coordinates=(42.699735, 23.331589), original_gps_data="42.699735,23.331589"),
        Customer(id="4", name="–ö–ª–∏–µ–Ω—Ç 4", volume=12.0, coordinates=(42.693785, 23.221659), original_gps_data="42.693785,23.221659"),
        Customer(id="5", name="–ö–ª–∏–µ–Ω—Ç 5", volume=20.0, coordinates=(42.691785, 23.211659), original_gps_data="42.691785,23.211659"),
        Customer(id="6", name="–ö–ª–∏–µ–Ω—Ç 6", volume=18.0, coordinates=(42.689785, 23.201659), original_gps_data="42.689785,23.201659"),
    ]
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ —Ç–µ—Å—Ç–æ–≤–∏ –º–∞—Ä—à—Ä—É—Ç–∏
    routes = [
        Route(
            vehicle_type=VehicleType.CENTER_BUS,
            customers=customers[:2],
            total_distance_km=25.5,
            total_time_minutes=45,
            total_volume=25.0,
            vehicle_id="center_bus_1",
            depot_location=(42.697735, 23.321589)
        ),
        Route(
            vehicle_type=VehicleType.INTERNAL_BUS,
            customers=customers[2:4],
            total_distance_km=18.2,
            total_time_minutes=32,
            total_volume=20.0,
            vehicle_id="internal_bus_1",
            depot_location=(42.697735, 23.321589)
        ),
        Route(
            vehicle_type=VehicleType.EXTERNAL_BUS,
            customers=customers[4:],
            total_distance_km=30.1,
            total_time_minutes=55,
            total_volume=38.0,
            vehicle_id="external_bus_1",
            depot_location=(42.697735, 23.321589)
        )
    ]
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ —Ç–µ—Å—Ç–æ–≤–æ —Ä–µ—à–µ–Ω–∏–µ
    from cvrp_solver import CVRPSolution, WarehouseAllocation
    solution = CVRPSolution(
        routes=routes,
        total_distance_km=73.8,
        total_time_minutes=132,
        total_vehicles_used=3,
        fitness_score=73.8,
        is_feasible=True
    )
    warehouse_allocation = WarehouseAllocation(
        warehouse_customers=[],
        vehicle_customers=customers,
        total_vehicle_capacity=100.0,
        total_vehicle_volume=73.0,
        warehouse_volume=0.0,
        capacity_utilization=0.73
    )
    
    print(f"üìä –°—ä–∑–¥–∞–¥–æ—Ö {len(routes)} —Ç–µ—Å—Ç–æ–≤–∏ –º–∞—Ä—à—Ä—É—Ç–∞:")
    for i, route in enumerate(routes):
        print(f"   üöå –ê–≤—Ç–æ–±—É—Å {i+1}: {len(route.customers)} –∫–ª–∏–µ–Ω—Ç–∞, {route.total_distance_km:.1f} –∫–º")
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ –∫–∞—Ä—Ç–∞—Ç–∞
    print("\nüó∫Ô∏è –°—ä–∑–¥–∞–≤–∞–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞ —Å —Ñ–∏–ª—Ç—ä—Ä...")
    route_map = map_generator.create_map(solution, warehouse_allocation, (42.697735, 23.321589))
    
    # –ó–∞–ø–∏—Å–≤–∞–º–µ –∫–∞—Ä—Ç–∞—Ç–∞
    map_file = map_generator.save_map(route_map, "test_bus_filter_map.html")
    print(f"‚úÖ –ö–∞—Ä—Ç–∞—Ç–∞ –µ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤: {map_file}")
    
    print("\nüéØ –§—É–Ω–∫—Ü–∏–∏ –Ω–∞ —Ñ–∏–ª—Ç—ä—Ä–∞:")
    print("   ‚Ä¢ –í –≥–æ—Ä–Ω–∏—è –¥–µ—Å–µ–Ω —ä–≥—ä–ª –∏–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª –∑–∞ —Å–ª–æ–µ–≤–µ")
    print("   ‚Ä¢ –ú–æ–∂–µ—à –¥–∞ –≤–∫–ª—é—á–∏—à/–∏–∑–∫–ª—é—á–∏—à –≤—Å–µ–∫–∏ –∞–≤—Ç–æ–±—É—Å –ø–æ–æ—Ç–¥–µ–ª–Ω–æ")
    print("   ‚Ä¢ –í—Å–∏—á–∫–∏ –º–∞—Ä–∫–µ—Ä–∏ –∏ –ª–∏–Ω–∏–∏ –Ω–∞ –∞–≤—Ç–æ–±—É—Å–∞ —Å–µ –ø–æ–∫–∞–∑–≤–∞—Ç/—Å–∫—Ä–∏–≤–∞—Ç –∑–∞–µ–¥–Ω–æ")
    print("   ‚Ä¢ –õ–µ–≥–µ–Ω–¥–∞—Ç–∞ –≤ –ª–µ–≤–∏—è —ä–≥—ä–ª –ø–æ–∫–∞–∑–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    return map_file

if __name__ == "__main__":
    test_bus_filter() 