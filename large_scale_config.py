"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ –≥–æ–ª–µ–º–∏ CVRP –ø—Ä–æ–±–ª–µ–º–∏ (150-250 –∫–ª–∏–µ–Ω—Ç–∞)
"""

from config import get_config, CVRPConfig
from main import CVRPApplication

def large_scale_optimization_config():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ 150-250 –∫–ª–∏–µ–Ω—Ç–∞"""
    return {
        "cvrp": {
            "time_limit_seconds": 300,  # 20 –º–∏–Ω—É—Ç–∏
            "first_solution_strategy": "PATH_CHEAPEST_ARC",  # –ø–æ-–±—ä—Ä–∑–∞ –∑–∞ –≥–æ–ª–µ–º–∏ –ø—Ä–æ–±–ª–µ–º–∏
            "local_search_metaheuristic": "LOCAL_SEARCH",  # –Ω–∞–π-–¥–æ–±—Ä–∞ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ
            "log_search": True  # –∑–∞ –¥–∞ —Å–ª–µ–¥–∏—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å–∞
        },
        "osrm": {
            "chunk_size": 90,  # –º–∞–∫—Å–∏–º–∞–ª–Ω–∏ chunks –∑–∞ –±—ä—Ä–∑–∏–Ω–∞
            "use_cache": True,  # –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ –∫–µ—à–∏—Ä–∞–Ω–µ
            "timeout_seconds": 45  # –ø–æ-–¥—ä–ª—ä–≥ timeout –∑–∞ OSRM –∑–∞—è–≤–∫–∏
        },
        "performance": {
            "enable_multiprocessing": True,
            "max_workers": 4,
            "chunk_processing_delay": 0.05  # –ø–æ-–º–∞–ª–∫–∞ –ø–∞—É–∑–∞ –º–µ–∂–¥—É chunks
        },
        "debug_mode": False  # –∏–∑–∫–ª—é—á–≤–∞–º–µ debug –∑–∞ –ø–æ-–±—ä—Ä–∑–∞ —Ä–∞–±–æ—Ç–∞
    }

def ultra_optimization_config():
    """–ú–∞–∫—Å–∏–º–∞–ª–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏ —Å–ª—É—á–∞–∏ - 30 –º–∏–Ω—É—Ç–∏"""
    return {
        "cvrp": {
            "time_limit_seconds": 1800,  # 30 –º–∏–Ω—É—Ç–∏
            "first_solution_strategy": "AUTOMATIC",  # OR-Tools –∏–∑–±–∏—Ä–∞ –Ω–∞–π-–¥–æ–±—Ä–∞—Ç–∞
            "local_search_metaheuristic": "SIMULATED_ANNEALING",  # –Ω–∞–π-–¥–æ–±—Ä–æ –∫–∞—á–µ—Å—Ç–≤–æ
            "log_search": True
        },
        "osrm": {
            "chunk_size": 90,
            "use_cache": True,
            "timeout_seconds": 60,
            "retry_attempts": 5  # –ø–æ–≤–µ—á–µ –æ–ø–∏—Ç–∏ –∑–∞ —Å—Ç–∞–±–∏–ª–Ω–æ—Å—Ç
        },
        "performance": {
            "enable_multiprocessing": True,
            "max_workers": 6,  # –ø–æ–≤–µ—á–µ workers
            "chunk_processing_delay": 0.02
        }
    }

def progressive_timeout_config():
    """–ü—Ä–æ–≥—Ä–µ—Å–∏–≤–µ–Ω timeout - –∑–∞–ø–æ—á–≤–∞ —Å 10 –º–∏–Ω, –∞–∫–æ –Ω–µ —Å—Ç–∏–≥–Ω–µ –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞ –¥–æ 25 –º–∏–Ω"""
    return {
        "cvrp": {
            "time_limit_seconds": 1500,  # 25 –º–∏–Ω—É—Ç–∏
            "first_solution_strategy": "PATH_CHEAPEST_ARC",
            "local_search_metaheuristic": "GUIDED_LOCAL_SEARCH",
            "log_search": True
        }
    }

# –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—á–∞–∫–≤–∞–Ω–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–∞ –∑–∞ 150-250 –∫–ª–∏–µ–Ω—Ç–∞
PERFORMANCE_EXPECTATIONS = {
    "150_clients": {
        "first_solution": "30-60 —Å–µ–∫—É–Ω–¥–∏",
        "good_solution": "5-8 –º–∏–Ω—É—Ç–∏", 
        "very_good_solution": "12-18 –º–∏–Ω—É—Ç–∏",
        "optimal_solution": "20-30 –º–∏–Ω—É—Ç–∏"
    },
    "200_clients": {
        "first_solution": "45-90 —Å–µ–∫—É–Ω–¥–∏",
        "good_solution": "8-12 –º–∏–Ω—É—Ç–∏",
        "very_good_solution": "15-25 –º–∏–Ω—É—Ç–∏", 
        "optimal_solution": "25-40 –º–∏–Ω—É—Ç–∏"
    },
    "250_clients": {
        "first_solution": "60-120 —Å–µ–∫—É–Ω–¥–∏",
        "good_solution": "10-15 –º–∏–Ω—É—Ç–∏",
        "very_good_solution": "20-30 –º–∏–Ω—É—Ç–∏",
        "optimal_solution": "30-50 –º–∏–Ω—É—Ç–∏"
    }
}

def adaptive_config_by_client_count(num_clients):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ø–æ—Ä–µ–¥ –±—Ä–æ—è –∫–ª–∏–µ–Ω—Ç–∏"""
    if num_clients <= 50:
        timeout = 300        # 5 –º–∏–Ω—É—Ç–∏
        strategy = "PATH_CHEAPEST_ARC"
        metaheuristic = "GUIDED_LOCAL_SEARCH"
    elif num_clients <= 100:
        timeout = 600        # 10 –º–∏–Ω—É—Ç–∏
        strategy = "PATH_CHEAPEST_ARC"
        metaheuristic = "GUIDED_LOCAL_SEARCH"
    elif num_clients <= 150:
        timeout = 900        # 15 –º–∏–Ω—É—Ç–∏
        strategy = "PARALLEL_CHEAPEST_INSERTION"
        metaheuristic = "GUIDED_LOCAL_SEARCH"
    elif num_clients <= 200:
        timeout = 1200       # 20 –º–∏–Ω—É—Ç–∏
        strategy = "PARALLEL_CHEAPEST_INSERTION"
        metaheuristic = "GUIDED_LOCAL_SEARCH"
    elif num_clients <= 250:
        timeout = 1500       # 25 –º–∏–Ω—É—Ç–∏
        strategy = "PARALLEL_CHEAPEST_INSERTION"
        metaheuristic = "SIMULATED_ANNEALING"
    else:
        timeout = 1800       # 30 –º–∏–Ω—É—Ç–∏
        strategy = "AUTOMATIC"
        metaheuristic = "SIMULATED_ANNEALING"
    
    return {
        "cvrp": {
            "time_limit_seconds": timeout,
            "first_solution_strategy": strategy,
            "local_search_metaheuristic": metaheuristic,
            "log_search": True
        },
        "osrm": {
            "chunk_size": 90,
            "use_cache": True,
            "timeout_seconds": min(60, timeout // 20)  # –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω OSRM timeout
        }
    }

def print_performance_analysis():
    """–ü–æ–∫–∞–∑–≤–∞ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç—Ç–∞"""
    print("üìä –ê–ù–ê–õ–ò–ó –ù–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–ù–û–°–¢–¢–ê –ó–ê –ì–û–õ–ï–ú–ò –ü–†–û–ë–õ–ï–ú–ò")
    print("=" * 60)
    
    for size, times in PERFORMANCE_EXPECTATIONS.items():
        client_count = size.replace("_", " ").title()
        print(f"\nüéØ {client_count}:")
        for phase, time_range in times.items():
            phase_name = phase.replace("_", " ").title()
            print(f"   {phase_name}: {time_range}")
    
    print(f"\nüí° –ü–†–ï–ü–û–†–™–ö–ò:")
    print("- –ó–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞ —É–ø–æ—Ç—Ä–µ–±–∞: 15-20 –º–∏–Ω—É—Ç–∏ timeout")
    print("- –ó–∞ —Å–µ–¥–º–∏—á–Ω–æ –ø–ª–∞–Ω–∏—Ä–∞–Ω–µ: 25-30 –º–∏–Ω—É—Ç–∏ timeout") 
    print("- –ó–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ –ø–ª–∞–Ω–∏—Ä–∞–Ω–µ: 45-60 –º–∏–Ω—É—Ç–∏ timeout")
    
    print(f"\n‚ö†Ô∏è –í–ê–ñ–ù–û:")
    print("- –ü—ä—Ä–≤–æ—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —Å–µ –Ω–∞–º–∏—Ä–∞ –±—ä—Ä–∑–æ (1-2 –º–∏–Ω—É—Ç–∏)")
    print("- 80% –æ—Ç –ø–æ–¥–æ–±—Ä–µ–Ω–∏–µ—Ç–æ –∏–¥–≤–∞ –≤ –ø—ä—Ä–≤–∏—Ç–µ 10-15 –º–∏–Ω—É—Ç–∏")
    print("- –°–ª–µ–¥ 25-30 –º–∏–Ω—É—Ç–∏ –ø–æ–¥–æ–±—Ä–µ–Ω–∏—è—Ç–∞ —Å–∞ –º–∏–Ω–∏–º–∞–ª–Ω–∏")

def estimate_optimization_time(num_clients):
    """–û—Ü–µ–Ω—è–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Ç–æ –≤—Ä–µ–º–µ –∑–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"""
    if num_clients <= 50:
        return "5-10 –º–∏–Ω—É—Ç–∏"
    elif num_clients <= 100:
        return "10-15 –º–∏–Ω—É—Ç–∏"
    elif num_clients <= 150:
        return "15-20 –º–∏–Ω—É—Ç–∏"
    elif num_clients <= 200:
        return "20-25 –º–∏–Ω—É—Ç–∏"
    elif num_clients <= 250:
        return "25-35 –º–∏–Ω—É—Ç–∏"
    else:
        return "35+ –º–∏–Ω—É—Ç–∏"

def run_optimized_for_large_scale(input_file=None, num_clients=200):
    """–°—Ç–∞—Ä—Ç–∏—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∑–∞ –≥–æ–ª–µ–º–∏ –ø—Ä–æ–±–ª–µ–º–∏"""
    print(f"üöÄ –°–¢–ê–†–¢–ò–†–ê–ù–ï –ù–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê {num_clients} –ö–õ–ò–ï–ù–¢–ê")
    print("=" * 60)
    
    estimated_time = estimate_optimization_time(num_clients)
    print(f"‚è±Ô∏è –û—á–∞–∫–≤–∞–Ω–æ –≤—Ä–µ–º–µ: {estimated_time}")
    
    # –ò–∑–±–∏—Ä–∞–º–µ –ø–æ–¥—Ö–æ–¥—è—â–∞—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if num_clients >= 200:
        config = ultra_optimization_config()
        print("üéØ –ò–∑–ø–æ–ª–∑–≤–∞–º ultra –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (30 –º–∏–Ω—É—Ç–∏)")
    else:
        config = large_scale_optimization_config()
        print("üéØ –ò–∑–ø–æ–ª–∑–≤–∞–º large scale –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (20 –º–∏–Ω—É—Ç–∏)")
    
    print(f"‚öôÔ∏è Timeout: {config['cvrp']['time_limit_seconds']} —Å–µ–∫—É–Ω–¥–∏")
    print(f"üîß –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {config['cvrp']['first_solution_strategy']}")
    print(f"üß† –ú–µ—Ç–∞—Ö–µ–≤—Ä–∏—Å—Ç–∏–∫–∞: {config['cvrp']['local_search_metaheuristic']}")
    
    app = CVRPApplication()
    success = app.run_with_custom_config(config, input_file)
    
    return success

if __name__ == "__main__":
    print_performance_analysis()
    
    print(f"\nüîß –ó–ê –ü–†–û–ú–Ø–ù–ê –ù–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø–¢–ê:")
    print("1. –†–µ–¥–∞–∫—Ç–∏—Ä–∞–π—Ç–µ config.py:")
    print("   cvrp.time_limit_seconds = 1200  # 20 –º–∏–Ω—É—Ç–∏")
    print("\n2. –ò–ª–∏ –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ adaptive –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print("   config = adaptive_config_by_client_count(200)")
    
    print(f"\nüöÄ –ó–ê –°–¢–ê–†–¢–ò–†–ê–ù–ï –° –û–ü–¢–ò–ú–ò–ó–ò–†–ê–ù–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print("   from large_scale_config import run_optimized_for_large_scale")
    print("   run_optimized_for_large_scale('data/input.xlsx', 200)") 