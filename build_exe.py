"""
–°–∫—Ä–∏–ø—Ç –∑–∞ –∫–æ–º–ø–∏–ª–∏—Ä–∞–Ω–µ –Ω–∞ CVRP –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–∞ –≤ EXE —Ñ–∞–π–ª
–ò–∑–ø–æ–ª–∑–≤–∞ PyInstaller –∑–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ standalone EXE

–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω –∑–∞ –ø–æ–¥–¥—Ä—ä–∂–∫–∞ –Ω–∞:
- –í—Å–∏—á–∫–∏ —Ç–∏–ø–æ–≤–µ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ (INTERNAL_BUS, CENTER_BUS, EXTERNAL_BUS, SPECIAL_BUS)
- –õ–æ–≥–∏–∫–∞ –∑–∞ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞ –∏ –≥–ª–æ–±–∏
- –ü–æ–≤—Ç–æ—Ä–Ω–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–∞ —Å–ª–µ–¥ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ —Å–∞ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏—Ç–µ –ø–∞–∫–µ—Ç–∏"""
    required_packages = ['pyinstaller', 'pandas', 'openpyxl', 'requests', 'numpy']
    optional_packages = ['ortools', 'tqdm', 'colorama']
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    missing_packages = []
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package} - OK")
        except ImportError:
            print(f"‚ùå {package} - –ù–ï –ï –ò–ù–°–¢–ê–õ–ò–†–ê–ù")
            missing_packages.append(package)
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º –æ–ø—Ü–∏–æ–Ω–∞–ª–Ω–∏ –ø–∞–∫–µ—Ç–∏...")
    for package in optional_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package} - OK")
        except ImportError:
            print(f"‚ö†Ô∏è {package} - –ù–ï –ï –ò–ù–°–¢–ê–õ–ò–†–ê–ù (–æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω)")
    
    if missing_packages:
        print(f"\n‚ùå –õ–∏–ø—Å–≤–∞—Ç –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ –ø–∞–∫–µ—Ç–∏: {', '.join(missing_packages)}")
        return False
    
    return True

def install_dependencies():
    """–ò–Ω—Å—Ç–∞–ª–∏—Ä–∞ –ª–∏–ø—Å–≤–∞—â–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–º –ª–∏–ø—Å–≤–∞—â–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    required_packages = ['pyinstaller', 'pandas', 'openpyxl', 'requests', 'numpy']
    optional_packages = ['ortools', 'tqdm', 'colorama']
    
    print("üì¶ –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–º –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ –ø–∞–∫–µ—Ç–∏...")
    for package in required_packages:
        try:
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
            print(f"‚úÖ {package} - –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω")
        except subprocess.CalledProcessError:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ {package}")
            return False
    
    print("\nüì¶ –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–º –æ–ø—Ü–∏–æ–Ω–∞–ª–Ω–∏ –ø–∞–∫–µ—Ç–∏...")
    for package in optional_packages:
        try:
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
            print(f"‚úÖ {package} - –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω")
        except subprocess.CalledProcessError:
            print(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ {package} (–æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω)")
    
    return True

def create_spec_file():
    """–°—ä–∑–¥–∞–≤–∞ .spec —Ñ–∞–π–ª –∑–∞ PyInstaller"""
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['main_exe.py'],
    pathex=[],
    binaries=[
        # OR-Tools DLL —Ñ–∞–π–ª–æ–≤–µ - –≤—Å–∏—á–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏
        ('.venv/Lib/site-packages/ortools/.libs/ortools.dll', '.'),
        ('.venv/Lib/site-packages/ortools/.libs/abseil_dll.dll', '.'),
        ('.venv/Lib/site-packages/ortools/.libs/libprotobuf.dll', '.'),
        ('.venv/Lib/site-packages/ortools/.libs/re2.dll', '.'),
        ('.venv/Lib/site-packages/ortools/.libs/zlib1.dll', '.'),
        ('.venv/Lib/site-packages/ortools/.libs/libscip.dll', '.'),
        ('.venv/Lib/site-packages/ortools/.libs/libutf8_validity.dll', '.'),
        ('.venv/Lib/site-packages/ortools/.libs/highs.dll', '.'),
        ('.venv/Lib/site-packages/ortools/.libs/bz2.dll', '.'),
        # OR-Tools PYD —Ñ–∞–π–ª–æ–≤–µ
        ('.venv/Lib/site-packages/ortools/constraint_solver/_pywrapcp.pyd', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/linear_solver/_pywraplp.pyd', 'ortools/linear_solver'),
    ],
    datas=[
        ('input_handler.py', '.'),
        ('warehouse_manager.py', '.'),
        ('cvrp_solver.py', '.'),
        ('output_handler.py', '.'),
        ('osrm_client.py', '.'),
        ('config.py', '.'),  # –î–æ–±–∞–≤–µ–Ω–æ –∑–∞ –¥–∞ –µ —Å–∏–≥—É—Ä–Ω–æ, —á–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ —Å SPECIAL_BUS —â–µ –±—ä–¥–µ –≤–∫–ª—é—á–µ–Ω–∞
        ('main.py', '.'),    # –î–æ–±–∞–≤–µ–Ω–æ –∑–∞ —Ü—è–ª–æ—Å—Ç
        ('main_exe.py', '.'), # –î–æ–±–∞–≤–µ–Ω–æ –∑–∞ —Ü—è–ª–æ—Å—Ç
        ('data', 'data'),
        ('logs', 'logs'),    # –î–æ–±–∞–≤–µ–Ω–æ –∑–∞ –ª–æ–≥–æ–≤–µ
        ('output', 'output'), # –î–æ–±–∞–≤–µ–Ω–æ –∑–∞ –∏–∑—Ö–æ–¥–Ω–∏ –¥–∞–Ω–Ω–∏
        # OR-Tools protobuf —Ñ–∞–π–ª–æ–≤–µ - –≤—Å–∏—á–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏
        ('.venv/Lib/site-packages/ortools/constraint_solver/routing_parameters_pb2.py', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/constraint_solver/routing_enums_pb2.py', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/constraint_solver/assignment_pb2.py', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/constraint_solver/search_stats_pb2.py', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/constraint_solver/search_limit_pb2.py', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/constraint_solver/solver_parameters_pb2.py', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/constraint_solver/routing_ils_pb2.py', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/linear_solver/linear_solver_pb2.py', 'ortools/linear_solver'),
        # OR-Tools __init__.py —Ñ–∞–π–ª–æ–≤–µ
        ('.venv/Lib/site-packages/ortools/__init__.py', 'ortools'),
        ('.venv/Lib/site-packages/ortools/constraint_solver/__init__.py', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/linear_solver/__init__.py', 'ortools/linear_solver'),
        # OR-Tools –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ
        ('.venv/Lib/site-packages/ortools/constraint_solver/routing_parameters_pb2.pyi', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/constraint_solver/routing_enums_pb2.pyi', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/constraint_solver/assignment_pb2.pyi', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/constraint_solver/search_stats_pb2.pyi', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/constraint_solver/search_limit_pb2.pyi', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/constraint_solver/solver_parameters_pb2.pyi', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/constraint_solver/routing_ils_pb2.pyi', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/linear_solver/linear_solver_pb2.pyi', 'ortools/linear_solver'),
    ],
    hiddenimports=[
        'ortools',
        'ortools.constraint_solver',
        'ortools.constraint_solver.pywrapcp',
        'ortools.linear_solver',
        'ortools.linear_solver.pywraplp',
        'ortools.constraint_solver.routing_parameters_pb2',
        'ortools.constraint_solver.routing_enums_pb2',
        'ortools.constraint_solver.assignment_pb2',
        'ortools.constraint_solver.search_stats_pb2',
        'ortools.constraint_solver.search_limit_pb2',
        'ortools.constraint_solver.solver_parameters_pb2',
        'ortools.constraint_solver.routing_ils_pb2',
        'ortools.linear_solver.linear_solver_pb2',
        'pandas',
        'pandas._libs',
        'pandas.core',
        'pandas.core.frame',
        'pandas.core.series',
        'pandas.io',
        'pandas.io.excel',
        'pandas.io.excel._openpyxl',
        'openpyxl',
        'openpyxl.cell',
        'openpyxl.workbook',
        'openpyxl.worksheet',
        'requests',
        'numpy',
        'multiprocessing',
        'logging',
        'pathlib',
        'typing',
        'dataclasses',
        'copy',
        'time',
        'os',
        'sys',
        'tqdm',
        'colorama',
        'enum'  # –î–æ–±–∞–≤–µ–Ω–æ –∑–∞ –ø–æ–¥–¥—Ä—ä–∂–∫–∞ –Ω–∞ VehicleType.SPECIAL_BUS
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[
        'matplotlib',
        'scipy',
        'PIL',
        'tkinter',
        'PyQt5',
        'PyQt6',
        'PySide2',
        'PySide6'
    ],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='CVRP_Optimizer',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=False,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='data/icon.ico' if os.path.exists('data/icon.ico') else None,
    version='file_version_info.txt' if os.path.exists('file_version_info.txt') else None
)
'''
    
    with open('CVRP_Optimizer.spec', 'w', encoding='utf-8') as f:
        f.write(spec_content)
    
    print("‚úÖ –°—ä–∑–¥–∞–¥–µ–Ω CVRP_Optimizer.spec —Ñ–∞–π–ª")

def create_version_info():
    """–°—ä–∑–¥–∞–≤–∞ —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≤–µ—Ä—Å–∏—è—Ç–∞"""
    version_info = '''# UTF-8
#
# For more details about fixed file info 'ffi' see:
# http://msdn.microsoft.com/en-us/library/ms646997.aspx
VSVersionInfo(
  ffi=FixedFileInfo(
    # filevers and prodvers should be always a tuple with four items: (1, 2, 3, 4)
    # Set not needed items to zero 0.
    filevers=(1, 2, 0, 0),
    prodvers=(1, 2, 0, 0),
    # Contains a bitmask that specifies the valid bits 'flags'r
    mask=0x3f,
    # Contains a bitmask that specifies the Boolean attributes of the file.
    flags=0x0,
    # The operating system for which this file was designed.
    # 0x4 - NT and there is no need to change it.
    OS=0x40004,
    # The general type of file.
    # 0x1 - the file is an application.
    fileType=0x1,
    # The function of the file.
    # 0x0 - the function is not defined for this fileType
    subtype=0x0,
    # Creation date and time stamp.
    date=(0, 0)
    ),
  kids=[
    StringFileInfo(
      [
      StringTable(
        u'040904B0',
        [StringStruct(u'CompanyName', u'OptioRoute'),
        StringStruct(u'FileDescription', u'CVRP Optimizer - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏'),
        StringStruct(u'FileVersion', u'1.2.0'),
        StringStruct(u'InternalName', u'CVRP_Optimizer'),
        StringStruct(u'LegalCopyright', u'¬© 2023 OptioRoute. –í—Å–∏—á–∫–∏ –ø—Ä–∞–≤–∞ –∑–∞–ø–∞–∑–µ–Ω–∏.'),
        StringStruct(u'OriginalFilename', u'CVRP_Optimizer.exe'),
        StringStruct(u'ProductName', u'CVRP Optimizer'),
        StringStruct(u'ProductVersion', u'1.2.0')])
      ]), 
    VarFileInfo([VarStruct(u'Translation', [0x0409, 1200])])
  ]
)
'''
    
    with open('file_version_info.txt', 'w', encoding='utf-8') as f:
        f.write(version_info)
    
    print("‚úÖ –°—ä–∑–¥–∞–¥–µ–Ω file_version_info.txt —Ñ–∞–π–ª")

def build_exe():
    """–ö–æ–º–ø–∏–ª–∏—Ä–∞ EXE —Ñ–∞–π–ª–∞"""
    print("\nüî® –°—Ç–∞—Ä—Ç–∏—Ä–∞–º –∫–æ–º–ø–∏–ª–∏—Ä–∞–Ω–µ –Ω–∞ EXE...")
    
    try:
        # –ü—ä—Ä–≤–æ –æ–ø–∏—Ç–≤–∞–º–µ —Å .spec —Ñ–∞–π–ª–∞
        print("üìã –û–ø–∏—Ç–≤–∞–º —Å .spec —Ñ–∞–π–ª–∞...")
        subprocess.check_call([
            sys.executable, '-m', 'PyInstaller',
            '--clean',
            'CVRP_Optimizer.spec'
        ])
        
        print("‚úÖ EXE —Ñ–∞–π–ª—ä—Ç –µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Ñ–∞–π–ª—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
        exe_path = Path('dist/CVRP_Optimizer.exe')
        if exe_path.exists():
            print(f"üìÅ EXE —Ñ–∞–π–ª: {exe_path.absolute()}")
            return True
        else:
            print("‚ùå EXE —Ñ–∞–π–ª—ä—Ç –Ω–µ –µ —Å—ä–∑–¥–∞–¥–µ–Ω!")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–∏–ª–∏—Ä–∞–Ω–µ —Å .spec —Ñ–∞–π–ª–∞: {e}")
        print("üîÑ –û–ø–∏—Ç–≤–∞–º —Å –¥–∏—Ä–µ–∫—Ç–Ω–∏ –æ–ø—Ü–∏–∏...")
        
        try:
            # –ê–∫–æ .spec —Ñ–∞–π–ª—ä—Ç –Ω–µ —Ä–∞–±–æ—Ç–∏, –æ–ø–∏—Ç–≤–∞–º–µ —Å –¥–∏—Ä–µ–∫—Ç–Ω–∏ –æ–ø—Ü–∏–∏
            subprocess.check_call([
                sys.executable, '-m', 'PyInstaller',
                '--onefile',
                '--console',
                '--name', 'CVRP_Optimizer',
                'main_exe.py'
            ])
            
            print("‚úÖ EXE —Ñ–∞–π–ª—ä—Ç –µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Ñ–∞–π–ª—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
            exe_path = Path('dist/CVRP_Optimizer.exe')
            if exe_path.exists():
                print(f"üìÅ EXE —Ñ–∞–π–ª: {exe_path.absolute()}")
                return True
            else:
                print("‚ùå EXE —Ñ–∞–π–ª—ä—Ç –Ω–µ –µ —Å—ä–∑–¥–∞–¥–µ–Ω!")
                return False
                
        except subprocess.CalledProcessError as e2:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–∏–ª–∏—Ä–∞–Ω–µ —Å –¥–∏—Ä–µ–∫—Ç–Ω–∏ –æ–ø—Ü–∏–∏: {e2}")
            return False

def create_batch_file():
    """–°—ä–∑–¥–∞–≤–∞ .bat —Ñ–∞–π–ª –∑–∞ –ª–µ—Å–Ω–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ"""
    batch_content = '''@echo off
echo CVRP Optimizer - –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ...
echo.

REM –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ –≤—Ö–æ–¥–µ–Ω —Ñ–∞–π–ª
if exist "data\\input.xlsx" (
    echo –ù–∞–º–µ—Ä–µ–Ω –≤—Ö–æ–¥–µ–Ω —Ñ–∞–π–ª: data\\input.xlsx
    CVRP_Optimizer.exe data\\input.xlsx
) else (
    echo –í–ê–ñ–ù–û: –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –≤—Ö–æ–¥–µ–Ω —Ñ–∞–π–ª –≤ data\\input.xlsx
    echo –ú–æ–ª—è, –ø–æ—Å—Ç–∞–≤–µ—Ç–µ –≤—Ö–æ–¥–Ω–∏—è —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ data\\input.xlsx
    echo –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–Ω–æ –≤ —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–∞—Ç–æ input.xlsx
    echo.
    echo –ü—Ä–æ–≥—Ä–∞–º–∞—Ç–∞ —â–µ —Å–µ –æ–ø–∏—Ç–∞ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞ —Å –Ω–∞–ª–∏—á–Ω–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–µ...
    CVRP_Optimizer.exe
)

REM –ü—Ä–æ–≥—Ä–∞–º–∞—Ç–∞ —Å–∞–º–∞ —â–µ –ø–∏—Ç–∞ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ
'''
    
    with open('start_cvrp.bat', 'w', encoding='utf-8') as f:
        f.write(batch_content)
    
    print("‚úÖ –°—ä–∑–¥–∞–¥–µ–Ω start_cvrp.bat —Ñ–∞–π–ª")

def main():
    """–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ CVRP Optimizer - EXE Builder")
    print("=" * 40)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏—Ç–µ
    if not check_dependencies():
        print("\n‚ùå –õ–∏–ø—Å–≤–∞—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!")
        if input("–ò—Å–∫–∞—Ç–µ –ª–∏ –¥–∞ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–º –ª–∏–ø—Å–≤–∞—â–∏—Ç–µ –ø–∞–∫–µ—Ç–∏? (y/n): ").lower() == 'y':
            if not install_dependencies():
                print("‚ùå –ù–µ —É—Å–ø—è—Ö –¥–∞ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏—Ç–µ!")
                return
        else:
            print("‚ùå –ù–µ –º–æ–∂–µ—Ç–µ –¥–∞ –ø—Ä–æ–¥—ä–ª–∂–∏—Ç–µ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏—Ç–µ –ø–∞–∫–µ—Ç–∏!")
            return
    
    # 2. –°—ä–∑–¥–∞–≤–∞–º–µ .spec —Ñ–∞–π–ª–∞
    create_spec_file()
    
    # 2.1 –°—ä–∑–¥–∞–≤–∞–º–µ —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≤–µ—Ä—Å–∏—è—Ç–∞
    create_version_info()
    
    # 3. –ö–æ–º–ø–∏–ª–∏—Ä–∞–º–µ EXE
    if build_exe():
        # 4. –°—ä–∑–¥–∞–≤–∞–º–µ .bat —Ñ–∞–π–ª
        create_batch_file()
        
        print("\nüéâ –°—ä–∑–¥–∞–≤–∞–Ω–µ—Ç–æ –Ω–∞ EXE —Ñ–∞–π–ª–∞ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥–≤–∞—â–∏ —Å—Ç—ä–ø–∫–∏:")
        print("1. –ö–æ–ø–∏—Ä–∞–π—Ç–µ dist/CVRP_Optimizer.exe –≤ –∂–µ–ª–∞–Ω–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")
        print("2. –°—ä–∑–¥–∞–π—Ç–µ data/input.xlsx —Ñ–∞–π–ª —Å –≤–∞—à–∏—Ç–µ –¥–∞–Ω–Ω–∏ –≤ –°–™–©–ê–¢–ê –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∫—ä–¥–µ—Ç–æ –µ EXE —Ñ–∞–π–ª—ä—Ç")
        print("3. –ó–∞ –¥–∞ –∞–∫—Ç–∏–≤–∏—Ä–∞—Ç–µ SPECIAL_BUS, –ø—Ä–æ–º–µ–Ω–µ—Ç–µ enabled=True –≤ config.py")
        print("4. –°—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ CVRP_Optimizer.exe –∏–ª–∏ start_cvrp.bat")
        print("\n‚ö†Ô∏è –í–ê–ñ–ù–û: –í—Ö–æ–¥–Ω–∏—è—Ç —Ñ–∞–π–ª —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ 'data' –≤ –°–™–©–ê–¢–ê –ø–∞–ø–∫–∞, –∫—ä–¥–µ—Ç–æ –µ EXE —Ñ–∞–π–ª—ä—Ç")
        
    else:
        print("\n‚ùå –°—ä–∑–¥–∞–≤–∞–Ω–µ—Ç–æ –Ω–∞ EXE —Ñ–∞–π–ª–∞ —Å–µ –ø—Ä–æ–≤–∞–ª–∏!")

if __name__ == "__main__":
    main() 