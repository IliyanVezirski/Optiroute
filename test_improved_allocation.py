"""
–¢–µ—Å—Ç –Ω–∞ –ø–æ–¥–æ–±—Ä–µ–Ω–∞—Ç–∞ allocation –ª–æ–≥–∏–∫–∞
"""

def test_allocation_improvement():
    """–¢–µ—Å—Ç–≤–∞ –ø–æ–¥–æ–±—Ä–µ–Ω–∞—Ç–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"""
    print("üß™ –¢–ï–°–¢ –ù–ê –ü–û–î–û–ë–†–ï–ù–ê–¢–ê ALLOCATION –õ–û–ì–ò–ö–ê")
    print("=" * 60)
    
    try:
        from input_handler import InputHandler
        from warehouse_manager import WarehouseManager
        from config import get_config
        
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
        input_handler = InputHandler()
        input_data = input_handler.load_data("data/input.xlsx")
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞
        config = get_config()
        total_capacity = 0
        if config.vehicles:
            for vehicle in config.vehicles:
                if vehicle.enabled:
                    total_capacity += vehicle.capacity * vehicle.count
        
        print(f"üìä –ü–†–ï–ì–õ–ï–î –ù–ê –î–ê–ù–ù–ò–¢–ï:")
        print(f"   –û–±—â–æ –∫–ª–∏–µ–Ω—Ç–∏: {len(input_data.customers)}")
        print(f"   –û–±—â –æ–±–µ–º: {input_data.total_volume:.2f} —Å—Ç.")
        print(f"   –ö–∞–ø–∞—Ü–∏—Ç–µ—Ç –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞: {total_capacity} —Å—Ç.")
        print(f"   –°—ä–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {input_data.total_volume/total_capacity:.1%}")
        
        # –¢–µ—Å—Ç–≤–∞–º–µ –Ω–æ–≤–∞—Ç–∞ –ª–æ–≥–∏–∫–∞
        warehouse_manager = WarehouseManager()
        allocation = warehouse_manager.allocate_customers(input_data)
        
        print(f"\nüîÑ –†–ï–ó–£–õ–¢–ê–¢ –û–¢ –ü–û–î–û–ë–†–ï–ù–ê–¢–ê –õ–û–ì–ò–ö–ê:")
        print(f"   üöõ –ó–∞ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞: {len(allocation.vehicle_customers)} –∫–ª–∏–µ–Ω—Ç–∞")
        print(f"       –û–±–µ–º: {allocation.total_vehicle_volume:.2f} —Å—Ç.")
        print(f"       –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ: {allocation.capacity_utilization:.1%}")
        
        print(f"   üè≠ –ó–∞ —Å–∫–ª–∞–¥: {len(allocation.warehouse_customers)} –∫–ª–∏–µ–Ω—Ç–∞") 
        print(f"       –û–±–µ–º: {allocation.warehouse_volume:.2f} —Å—Ç.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –µ –ø–æ-–¥–æ–±—Ä–µ –æ—Ç –ø—Ä–æ—Å—Ç–∞—Ç–∞ –ª–æ–≥–∏–∫–∞
        simple_allocation = test_simple_logic(input_data.customers, total_capacity)
        
        print(f"\nüìà –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–û–°–¢–ê–¢–ê –õ–û–ì–ò–ö–ê:")
        improvement = len(allocation.vehicle_customers) - simple_allocation[0]
        if improvement > 0:
            print(f"   ‚úÖ –ü–æ–¥–æ–±—Ä–µ–Ω–∏–µ: +{improvement} –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ OR-Tools")
            print(f"   üéØ –ü–æ–≤–µ—á–µ –∫–ª–∏–µ–Ω—Ç–∏ —â–µ –±—ä–¥–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–∏!")
        elif improvement < 0:
            print(f"   ‚ö†Ô∏è –í–ª–æ—à–µ–Ω–∏–µ: {improvement} –∫–ª–∏–µ–Ω—Ç–∞")
        else:
            print(f"   ‚û°Ô∏è –°—ä—â–∏—è —Ä–µ–∑—É–ª—Ç–∞—Ç")
        
        capacity_improvement = allocation.capacity_utilization - simple_allocation[1]
        print(f"   üìä –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞: {capacity_improvement:+.1%}")
        
        return allocation
        
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

def test_simple_logic(customers, total_capacity):
    """–¢–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å—Ç–∞—Ç–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"""
    sorted_customers = sorted(customers, key=lambda c: c.volume)
    
    vehicle_count = 0
    current_volume = 0.0
    
    for customer in sorted_customers:
        if current_volume + customer.volume <= total_capacity:
            vehicle_count += 1
            current_volume += customer.volume
        else:
            break
    
    utilization = current_volume / total_capacity if total_capacity > 0 else 0
    return vehicle_count, utilization

def show_top_customers_for_ortools(allocation):
    """–ü–æ–∫–∞–∑–≤–∞ –∫–æ–∏ –∫–ª–∏–µ–Ω—Ç–∏ –æ—Ç–∏–≤–∞—Ç –≤ OR-Tools"""
    if not allocation:
        return
        
    print(f"\nüë• –ö–õ–ò–ï–ù–¢–ò –ó–ê OR-TOOLS –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:")
    print("=" * 50)
    
    # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ –æ–±–µ–º
    sorted_vehicle_customers = sorted(allocation.vehicle_customers, key=lambda c: c.volume, reverse=True)
    
    print(f"üìä –û–±—â–æ –∫–ª–∏–µ–Ω—Ç–∏ –∑–∞ OR-Tools: {len(sorted_vehicle_customers)}")
    print(f"üìã –¢–æ–ø 15 –Ω–∞–π-–≥–æ–ª–µ–º–∏:")
    
    for i, customer in enumerate(sorted_vehicle_customers[:15]):
        print(f"   {i+1:2}. {customer.id}: {customer.volume:6.1f} —Å—Ç. - {customer.name}")
    
    if len(sorted_vehicle_customers) > 15:
        print(f"   ... –∏ –æ—â–µ {len(sorted_vehicle_customers)-15} –∫–ª–∏–µ–Ω—Ç–∞")
    
    # –ü–æ–∫–∞–∑–≤–∞–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    volumes = [c.volume for c in sorted_vehicle_customers]
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ò:")
    print(f"   –ù–∞–π-–≥–æ–ª—è–º –∫–ª–∏–µ–Ω—Ç: {max(volumes):.1f} —Å—Ç.")
    print(f"   –ù–∞–π-–º–∞–ª—ä–∫ –∫–ª–∏–µ–Ω—Ç: {min(volumes):.1f} —Å—Ç.")
    print(f"   –°—Ä–µ–¥–µ–Ω –æ–±–µ–º: {sum(volumes)/len(volumes):.1f} —Å—Ç.")

if __name__ == "__main__":
    allocation = test_allocation_improvement()
    if allocation:
        show_top_customers_for_ortools(allocation) 