"""
CVRP Solver - –æ—Å–Ω–æ–≤–µ–Ω –º–æ–¥—É–ª –∑–∞ —Ä–µ—à–∞–≤–∞–Ω–µ –Ω–∞ Vehicle Routing Problem
–ò–∑–ø–æ–ª–∑–≤–∞ OR-Tools –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
"""

import random
import math
import time
import threading
from typing import List, Dict, Tuple, Optional, Set
from dataclasses import dataclass
import logging
from tqdm import tqdm

# OR-Tools –∏–º–ø–æ—Ä—Ç–∏
try:
    from ortools.constraint_solver import routing_enums_pb2
    from ortools.constraint_solver import pywrapcp
    ORTOOLS_AVAILABLE = True
except ImportError:
    ORTOOLS_AVAILABLE = False
    logging.warning("OR-Tools –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω. –©–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ –æ–ø—Ä–æ—Å—Ç–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç—ä–º.")

from config import get_config, CVRPConfig, VehicleConfig, VehicleType
from input_handler import Customer
from osrm_client import DistanceMatrix, OSRMClient, get_distance_matrix_from_central_cache
from warehouse_manager import WarehouseAllocation

logger = logging.getLogger(__name__)


class ORToolsProgressTracker:
    """–ö–ª–∞—Å –∑–∞ —Å–ª–µ–¥–µ–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞ –Ω–∞ OR-Tools –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"""
    
    def __init__(self, time_limit_seconds: int, num_customers: int):
        self.time_limit_seconds = time_limit_seconds
        self.num_customers = num_customers
        self.start_time = None
        self.best_solution_value = float('inf')
        self.solution_count = 0
        self.progress_bar = None
        self.running = False
        self.progress_thread = None
        
    def start_tracking(self):
        """–°—Ç–∞—Ä—Ç–∏—Ä–∞ —Å–ª–µ–¥–µ–Ω–µ—Ç–æ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞"""
        self.start_time = time.time()
        self.running = True
        self.solution_count = 0
        
        # –°—ä–∑–¥–∞–≤–∞–º–µ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
        self.progress_bar = tqdm(
            total=self.time_limit_seconds,
            desc=f"üîÑ OR-Tools –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è ({self.num_customers} –∫–ª–∏–µ–Ω—Ç–∞)",
            unit="s",
            bar_format="{l_bar}{bar}| {n:.0f}/{total:.0f}s [{elapsed}<{remaining}, {postfix}]",
            dynamic_ncols=True
        )
        
        # –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ thread –∑–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞
        self.progress_thread = threading.Thread(target=self._update_progress)
        self.progress_thread.daemon = True
        self.progress_thread.start()
        
    def update_solution(self, solution_value: float):
        """–û–±–Ω–æ–≤—è–≤–∞ –Ω–∞–π-–¥–æ–±—Ä–æ—Ç–æ —Ä–µ—à–µ–Ω–∏–µ"""
        if solution_value < self.best_solution_value:
            self.best_solution_value = solution_value
            self.solution_count += 1
            
            # –û–±–Ω–æ–≤—è–≤–∞–º–µ postfix –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞
            if self.progress_bar:
                improvement_percent = ((self.best_solution_value / self.best_solution_value * 100) 
                                     if self.best_solution_value > 0 else 0)
                self.progress_bar.set_postfix({
                    '—Ä–µ—à–µ–Ω–∏—è': self.solution_count,
                    '–Ω–∞–π-–¥–æ–±—Ä–æ': f'{self.best_solution_value/1000:.1f}–∫–º'
                })
    
    def _update_progress(self):
        """–û–±–Ω–æ–≤—è–≤–∞ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä–∞ –≤ –æ—Ç–¥–µ–ª–µ–Ω thread"""
        while self.running and self.progress_bar:
            if self.start_time:
                elapsed = time.time() - self.start_time
                if elapsed <= self.time_limit_seconds:
                    self.progress_bar.n = min(elapsed, self.time_limit_seconds)
                    self.progress_bar.refresh()
                else:
                    self.progress_bar.n = self.time_limit_seconds
                    self.progress_bar.refresh()
                    break
            time.sleep(0.5)  # –û–±–Ω–æ–≤—è–≤–∞–º–µ –Ω–∞ –≤—Å–µ–∫–∏ 0.5 —Å–µ–∫—É–Ω–¥–∏
    
    def stop_tracking(self):
        """–°–ø–∏—Ä–∞ —Å–ª–µ–¥–µ–Ω–µ—Ç–æ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞"""
        self.running = False
        if self.progress_bar:
            # –î–æ–≤—ä—Ä—à–≤–∞–º–µ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä–∞
            elapsed = time.time() - self.start_time if self.start_time else 0
            self.progress_bar.n = min(elapsed, self.time_limit_seconds)
            
            # –§–∏–Ω–∞–ª–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ
            final_msg = f"‚úÖ –ó–∞–≤—ä—Ä—à–µ–Ω–æ - {self.solution_count} —Ä–µ—à–µ–Ω–∏—è –∑–∞ {elapsed:.1f}s"
            if self.best_solution_value != float('inf'):
                final_msg += f" | –ù–∞–π-–¥–æ–±—Ä–æ: {self.best_solution_value/1000:.1f}–∫–º"
            
            self.progress_bar.set_description(final_msg)
            self.progress_bar.refresh()
            self.progress_bar.close()
            
        if self.progress_thread and self.progress_thread.is_alive():
            self.progress_thread.join(timeout=1.0)


@dataclass
class Route:
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–≤–∞ –º–∞—Ä—à—Ä—É—Ç –∑–∞ –µ–¥–Ω–æ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ"""
    vehicle_type: VehicleType
    vehicle_id: int
    customers: List[Customer]
    depot_location: Tuple[float, float]
    total_distance_km: float = 0.0
    total_time_minutes: float = 0.0
    total_volume: float = 0.0
    is_feasible: bool = True


@dataclass
class CVRPSolution:
    """–¶—è–ª–æ—Å—Ç–Ω–æ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ CVRP –ø—Ä–æ–±–ª–µ–º–∞"""
    routes: List[Route]
    total_distance_km: float
    total_time_minutes: float
    total_vehicles_used: int
    fitness_score: float
    is_feasible: bool


class RouteBuilder:
    """–ö–ª–∞—Å –∑–∞ –ø–æ—Å—Ç—Ä–æ—è–≤–∞–Ω–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏"""
    
    def __init__(self, vehicle_configs: List[VehicleConfig], distance_matrix: DistanceMatrix):
        self.vehicle_configs = vehicle_configs
        self.distance_matrix = distance_matrix
        self.locations = distance_matrix.locations  # [depot, customer1, customer2, ...]
    
    def build_route(self, vehicle_type: VehicleType, vehicle_id: int, 
                   customer_indices: List[int], depot_location: Tuple[float, float]) -> Route:
        """–ü–æ—Å—Ç—Ä–æ—è–≤–∞ –º–∞—Ä—à—Ä—É—Ç –∑–∞ –¥–∞–¥–µ–Ω–æ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ"""
        vehicle_config = self._get_vehicle_config(vehicle_type)
        customers = [self._get_customer_by_index(idx) for idx in customer_indices]
        
        route = Route(
            vehicle_type=vehicle_type,
            vehicle_id=vehicle_id,
            customers=customers,
            depot_location=depot_location
        )
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –æ–±–µ–º
        route.total_volume = sum(c.volume for c in customers)
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ
        if customer_indices:
            route.total_distance_km, route.total_time_minutes = self._calculate_route_metrics(customer_indices)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        route.is_feasible = self._validate_route(route, vehicle_config)
        
        return route
    
    def _get_vehicle_config(self, vehicle_type: VehicleType) -> VehicleConfig:
        """–ù–∞–º–∏—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –∑–∞ –¥–∞–¥–µ–Ω–∏—è —Ç–∏–ø –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ"""
        for config in self.vehicle_configs:
            if config.vehicle_type == vehicle_type:
                return config
        raise ValueError(f"–ù—è–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ –æ—Ç —Ç–∏–ø {vehicle_type}")
    
    def _get_customer_by_index(self, index: int) -> Customer:
        """–í—Ä—ä—â–∞ –∫–ª–∏–µ–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞ (–∏–Ω–¥–µ–∫—Å 0 –µ –¥–µ–ø–æ—Ç–æ)"""
        # –¢–æ–≤–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞ —á–µ –∏–º–∞–º–µ –¥–æ—Å—Ç—ä–ø –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∏
        # –í —Ä–µ–∞–ª–Ω–∞—Ç–∞ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è —Ç—Ä—è–±–≤–∞ –¥–∞ –ø—Ä–µ–¥–∞–≤–∞–º–µ —Å–ø–∏—Å—ä–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–∏
        return Customer(
            id=f"customer_{index}",
            name=f"Customer {index}",
            coordinates=self.locations[index],
            volume=0.0,  # —â–µ —Å–µ –ø–æ–ø—ä–ª–Ω–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
            original_gps_data=""
        )
    
    def _calculate_route_metrics(self, customer_indices: List[int]) -> Tuple[float, float]:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ –æ–±—â–æ—Ç–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ –∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞"""
        if not customer_indices:
            return 0.0, 0.0
        
        total_distance = 0.0
        total_time = 0.0
        
        # –û—Ç –¥–µ–ø–æ –¥–æ –ø—ä—Ä–≤–∏—è –∫–ª–∏–µ–Ω—Ç
        current_index = 0  # –¥–µ–ø–æ
        for next_index in customer_indices:
            distance = self.distance_matrix.distances[current_index][next_index]
            duration = self.distance_matrix.durations[current_index][next_index]
            
            total_distance += distance
            total_time += duration
            current_index = next_index
        
        # –û—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—è –∫–ª–∏–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –¥–µ–ø–æ—Ç–æ
        distance = self.distance_matrix.distances[current_index][0]
        duration = self.distance_matrix.durations[current_index][0]
        total_distance += distance
        total_time += duration
        
        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –æ–±—Å–ª—É–∂–≤–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ
        service_time = len(customer_indices) * 15 * 60  # 15 –º–∏–Ω—É—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∏ –∑–∞ –≤—Å–µ–∫–∏ –∫–ª–∏–µ–Ω—Ç
        total_time += service_time
        
        return total_distance / 1000, total_time / 60  # –≤ –∫–º –∏ –º–∏–Ω—É—Ç–∏
    
    def _validate_route(self, route: Route, vehicle_config: VehicleConfig) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä–∞ –¥–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç—ä—Ç –µ –¥–æ–ø—É—Å—Ç–∏–º"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞
        if route.total_volume > vehicle_config.capacity:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ
        if route.total_time_minutes > vehicle_config.max_time_hours * 60:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ (–∞–∫–æ –∏–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
        if vehicle_config.max_distance_km and route.total_distance_km > vehicle_config.max_distance_km:
            return False
        
        return True


class ORToolsSolver:
    """OR-Tools CVRP —Ä–µ—à–∞—Ç–µ–ª"""
    
    def __init__(self, config: CVRPConfig, vehicle_configs: List[VehicleConfig], 
                 customers: List[Customer], distance_matrix: DistanceMatrix, unique_depots: List[Tuple[float, float]]):
        self.config = config
        self.vehicle_configs = vehicle_configs
        self.customers = customers
        self.distance_matrix = distance_matrix
        self.depot = 0  # –¥–µ–ø–æ—Ç–æ –µ –≤–∏–Ω–∞–≥–∏ –∏–Ω–¥–µ–∫—Å 0
        self.progress_tracker = ORToolsProgressTracker(
            time_limit_seconds=config.time_limit_seconds,
            num_customers=len(customers)
        )
        self.unique_depots = unique_depots
    
    def _get_angle_to_depot(self, lat, lon):
        """–ò–∑—á–∏—Å–ª—è–≤–∞ —ä–≥—ä–ª–∞ –º–µ–∂–¥—É —Ç–æ—á–∫–∞ –∏ –¥–µ–ø–æ—Ç–æ —Å–ø—Ä—è–º–æ —Å–µ–≤–µ—Ä"""
        depot_lat, depot_lon = self.distance_matrix.locations[0]
        dx = lon - depot_lon
        dy = lat - depot_lat
        angle = math.degrees(math.atan2(dx, dy))
        # –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–º–µ –¥–æ 0-360
        return (angle + 360) % 360
    
    def _are_points_in_same_sector(self, from_node, to_node):
        """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –¥–≤–µ —Ç–æ—á–∫–∏ —Å–∞ –≤ –µ–¥–∏–Ω –∏ —Å—ä—â —Å–µ–∫—Ç–æ—Ä —Å–ø—Ä—è–º–æ –¥–µ–ø–æ—Ç–æ"""
        if from_node == 0 or to_node == 0:  # –∞–∫–æ –µ–¥–Ω–∞ –æ—Ç —Ç–æ—á–∫–∏—Ç–µ –µ –¥–µ–ø–æ
            return True
            
        from_lat, from_lon = self.distance_matrix.locations[from_node]
        to_lat, to_lon = self.distance_matrix.locations[to_node]
        
        from_angle = self._get_angle_to_depot(from_lat, from_lon)
        to_angle = self._get_angle_to_depot(to_lat, to_lon)
        
        # –î–µ—Ñ–∏–Ω–∏—Ä–∞–º–µ —Å–µ–∫—Ç–æ—Ä–∏ –æ—Ç –ø–æ 45 –≥—Ä–∞–¥—É—Å–∞
        SECTOR_SIZE = 45
        from_sector = int(from_angle / SECTOR_SIZE)
        to_sector = int(to_angle / SECTOR_SIZE)
        
        # –¢–æ—á–∫–∏—Ç–µ —Å–∞ –≤ –µ–¥–∏–Ω —Å–µ–∫—Ç–æ—Ä –∏–ª–∏ —Å—ä—Å–µ–¥–Ω–∏ —Å–µ–∫—Ç–æ—Ä–∏
        return abs(from_sector - to_sector) <= 1 or abs(from_sector - to_sector) == 7
    
    def _distance_callback_wrapper(self, manager):
        """Wrapper –∑–∞ distance callback —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞"""
        def distance_callback(from_index, to_index):
            from_node = manager.IndexToNode(from_index)
            to_node = manager.IndexToNode(to_index)
            
            base_distance = self.distance_matrix.distances[from_node][to_node]
            
            # –ê–∫–æ —Ç–æ—á–∫–∏—Ç–µ –Ω–µ —Å–∞ –≤ –µ–¥–∏–Ω –∏ —Å—ä—â –∏–ª–∏ —Å—ä—Å–µ–¥–µ–Ω —Å–µ–∫—Ç–æ—Ä,
            # –¥–æ–±–∞–≤—è–º–µ –≥–æ–ª—è–º–∞ penalty
            if not self._are_points_in_same_sector(from_node, to_node):
                # –£–≤–µ–ª–∏—á–∞–≤–∞–º–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª–Ω–æ
                return int(base_distance * 3)
            
            # –ó–∞ —Ç–æ—á–∫–∏ –≤ –µ–¥–∏–Ω –∏ —Å—ä—â —Å–µ–∫—Ç–æ—Ä, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Ä–µ–∞–ª–Ω–æ—Ç–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ
            return int(base_distance)
        
    def solve(self) -> CVRPSolution:
        """–†–µ—à–∞–≤–∞ CVRP —Å OR-Tools –∏ multiple depots –ø–æ–¥–¥—Ä—ä–∂–∫–∞"""
        if not ORTOOLS_AVAILABLE:
            logger.error("‚ùå OR-Tools –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω")
            return CVRPSolution([], 0, 0, 0, 0, False)
        
        try:
            # 1. –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ data model
            data = self._create_data_model()
            
            logger.info("üìä –í–•–û–î–ù–ò –î–ê–ù–ù–ò:")
            logger.info(f"   Customers: {len(self.customers)}")
            logger.info(f"   Total locations: {len(data['distance_matrix'])}")
            logger.info(f"   Vehicles: {data['num_vehicles']}")
            logger.info(f"   –î–µ–ø–∞: {len(self.unique_depots)}")
            
            # 2. –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ Index Manager —Å multiple starts/ends
            manager = pywrapcp.RoutingIndexManager(
                len(data['distance_matrix']),
                data['num_vehicles'],
                data['vehicle_starts'],  # –†–∞–∑–ª–∏—á–Ω–∏ start –¥–µ–ø–∞
                data['vehicle_ends']     # –†–∞–∑–ª–∏—á–Ω–∏ end –¥–µ–ø–∞
            )
            
            # 3. –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ Routing Model
            routing = pywrapcp.RoutingModel(manager)
            
            # 4. Distance callback
            def distance_callback(from_index, to_index):
                from_node = manager.IndexToNode(from_index)
                to_node = manager.IndexToNode(to_index)
                return data['distance_matrix'][from_node][to_node]
            
            transit_callback_index = routing.RegisterTransitCallback(distance_callback)
            routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)
            
            # 5. –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–Ø –Ω–∞ —Ü–µ–Ω—Ç—ä—Ä–∞ —á—Ä–µ–∑ fixed costs
            vehicle_types = data['vehicle_types']
            for vehicle_id, vehicle_type in enumerate(vehicle_types):
                if vehicle_type == VehicleType.CENTER_BUS:
                    routing.SetFixedCostOfVehicle(0, vehicle_id)  # –Ω–∞–π-–µ–≤—Ç–∏–Ω
                elif vehicle_type == VehicleType.INTERNAL_BUS:
                    routing.SetFixedCostOfVehicle(1000, vehicle_id)  # —Å—Ä–µ–¥–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                else:  # EXTERNAL_BUS
                    routing.SetFixedCostOfVehicle(2000, vehicle_id)  # –Ω–∞–π-—Å–∫—ä–ø
            
            logger.info("‚úÖ –ó–∞–¥–µ–Ω–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∏ costs: Center=0, Internal=1000, External=2000")
            
            # 6. CAPACITY CONSTRAINT
            def demand_callback(from_index):
                from_node = manager.IndexToNode(from_index)
                return data['demands'][from_node]
            
            demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)
            routing.AddDimensionWithVehicleCapacity(
                demand_callback_index,
                0,  # null capacity slack
                data['vehicle_capacities'],  # vehicle maximum capacities
                True,  # start cumul to zero
                "Capacity",
            )
            
            # 7. DISTANCE CONSTRAINTS
            if any(d < 999999999 for d in data['vehicle_max_distances']):
                logger.info("‚úÖ Distance constraints –í–ö–õ–Æ–ß–ï–ù–ò —Å 20% tolerance –∑–∞ OR-Tools")
                tolerant_limits = [int(d * 1.2) for d in data['vehicle_max_distances']]
                logger.info(f"   Original limits: {[d//1000 for d in data['vehicle_max_distances']]} –∫–º")
                logger.info(f"   Tolerant limits: {[d//1000 for d in tolerant_limits]} –∫–º")
                
                distance_dimension = routing.GetDimensionOrDie("Capacity")  # –ò–∑–ø–æ–ª–∑–≤–∞–º–µ capacity dimension
                
                for vehicle_id in range(data['num_vehicles']):
                    if tolerant_limits[vehicle_id] < 999999999:
                        routing.AddVariableMaximizedByFinalizer(
                            distance_dimension.CumulVar(routing.Start(vehicle_id))
                        )
                        routing.AddVariableMaximizedByFinalizer(
                            distance_dimension.CumulVar(routing.End(vehicle_id))
                        )
            
            # 8. VEHICLE TYPE CONSTRAINTS
            self._add_vehicle_type_constraints(routing, manager, data)
            
            # 9. SEARCH PARAMETERS
            search_parameters = pywrapcp.DefaultRoutingSearchParameters()
            search_parameters.first_solution_strategy = routing_enums_pb2.FirstSolutionStrategy.SAVINGS
            search_parameters.local_search_metaheuristic = routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH
            search_parameters.time_limit.seconds = self.config.time_limit_seconds
            search_parameters.log_search = False  # OR-Tools logging
            
            logger.info("üöÄ –†–µ—à–∞–≤–∞–º CVRP –º–æ–¥–µ–ª–∞ —Å –≤—Å–∏—á–∫–∏ constraints...")
            
            # 10. SOLVE
            solution = routing.SolveWithParameters(search_parameters)
            
            if solution:
                logger.info("‚úÖ OR-Tools –Ω–∞–º–µ—Ä–∏ —Ä–µ—à–µ–Ω–∏–µ!")
                return self._extract_solution(manager, routing, solution)
            else:
                status = routing.status()
                logger.error(f"‚ùå OR-Tools –Ω–µ –Ω–∞–º–µ—Ä–∏ —Ä–µ—à–µ–Ω–∏–µ! –°—Ç–∞—Ç—É—Å: {status}")
                return self._create_backup_solution()
                
        except Exception as e:
            logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ OR-Tools solver: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return self._create_backup_solution()
    
    def _create_data_model(self):
        """–°—ä–∑–¥–∞–≤–∞ data model –∑–∞ OR-Tools —Å –ø–æ–¥–¥—Ä—ä–∂–∫–∞ –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–µ–ø–∞"""
        data = {}
        
        # Distance matrix –æ—Å—Ç–∞–≤–∞ —Å—ä—â–∞—Ç–∞ - [–¥–µ–ø–∞] + [–∫–ª–∏–µ–Ω—Ç–∏]
        data['distance_matrix'] = []
        for i in range(len(self.distance_matrix.distances)):
            row = []
            for j in range(len(self.distance_matrix.distances[i])):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–º–µ –≤ –º–µ—Ç—Ä–∏ –∏ integer (OR-Tools –∏–∑–∏—Å–∫–≤–∞ integer)
                distance_meters = int(self.distance_matrix.distances[i][j])
                row.append(distance_meters)
            data['distance_matrix'].append(row)
        
        # Demands - –¥–µ–ø–∞—Ç–∞ –∏–º–∞—Ç demand 0, –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ –∏–º–∞—Ç —Ç–µ—Ö–Ω–∏—Ç–µ volumes
        num_depots = len(self.unique_depots)
        data['demands'] = [0] * num_depots  # –î–µ–ø–∞—Ç–∞ –∏–º–∞—Ç 0 demand
        for customer in self.customers:
            data['demands'].append(int(customer.volume * 100))  # –≤ —Å—Ç–æ—Ç–∏–Ω–∫–∏
        
        # Vehicle –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        data['vehicle_capacities'] = []
        data['vehicle_max_distances'] = []
        data['vehicle_types'] = []
        data['vehicle_starts'] = []  # –°—Ç–∞—Ä—Ç–æ–≤–∏ –¥–µ–ø–∞ –∑–∞ –≤—Å–µ–∫–∏ –∞–≤—Ç–æ–±—É—Å
        data['vehicle_ends'] = []    # –ö—Ä–∞–π–Ω–∏ –¥–µ–ø–∞ –∑–∞ –≤—Å–µ–∫–∏ –∞–≤—Ç–æ–±—É—Å
        
        vehicle_idx = 0
        for vehicle_config in self.vehicle_configs:
            if vehicle_config.enabled:
                # –ù–∞–º–∏—Ä–∞–º–µ –∫–æ–π depot index –æ—Ç–≥–æ–≤–∞—Ä—è –Ω–∞ start_location –Ω–∞ —Ç–æ–∑–∏ vehicle
                if vehicle_config.start_location:
                    depot_index = self.unique_depots.index(vehicle_config.start_location)
                else:
                    # –ù–∞–º–∏—Ä–∞–º–µ –æ—Å–Ω–æ–≤–Ω–æ—Ç–æ –¥–µ–ø–æ (–Ω–µ center_location)
                    center_location = get_config().locations.center_location
                    main_depot = None
                    for depot in self.unique_depots:
                        if depot != center_location:
                            main_depot = depot
                            break
                    depot_index = self.unique_depots.index(main_depot) if main_depot else 0
                
                for _ in range(vehicle_config.count):
                    # Capacity –≤ —Å—Ç–æ—Ç–∏–Ω–∫–∏
                    capacity = int(vehicle_config.capacity * 100)
                    data['vehicle_capacities'].append(capacity)
                    
                    # Max distance –≤ –º–µ—Ç—Ä–∏
                    max_dist = int(vehicle_config.max_distance_km * 1000) if vehicle_config.max_distance_km else 999999999
                    data['vehicle_max_distances'].append(max_dist)
                    
                    # Vehicle type –∑–∞ constraints
                    data['vehicle_types'].append(vehicle_config.vehicle_type)
                    
                    # Start/end –¥–µ–ø–∞ –∑–∞ —Ç–æ–∑–∏ –∞–≤—Ç–æ–±—É—Å
                    data['vehicle_starts'].append(depot_index)
                    data['vehicle_ends'].append(depot_index)  # –í—Ä—ä—â–∞ —Å–µ –≤ —Å—ä—â–æ—Ç–æ –¥–µ–ø–æ
                    
                    logger.debug(f"   üöõ Vehicle {vehicle_idx} ({vehicle_config.vehicle_type.value}): "
                               f"depot_index={depot_index}, location={self.unique_depots[depot_index]}")
                    vehicle_idx += 1
        
        data['num_vehicles'] = len(data['vehicle_capacities'])
        
        logger.info(f"üìã MULTI-DEPOT DATA MODEL:")
        logger.info(f"   –ë—Ä–æ–π –¥–µ–ø–∞: {len(self.unique_depots)}")
        logger.info(f"   Matrix size: {len(data['distance_matrix'])}x{len(data['distance_matrix'][0])}")
        logger.info(f"   Demands: {data['demands'][:min(10, len(data['demands']))]}... (–ø—ä—Ä–≤–∏ 10)")
        logger.info(f"   Vehicle capacities: {data['vehicle_capacities']}")
        logger.info(f"   Vehicle starts: {data['vehicle_starts']}")
        logger.info(f"   Vehicle types: {[vt.value for vt in data['vehicle_types']]}")
        
        return data
    
    def _add_vehicle_type_constraints(self, routing, manager, data):
        """–î–æ–±–∞–≤—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞ —Ç–∏–ø–æ–≤–µ—Ç–µ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–æ—Ä–µ–¥ –∏–º–µ–Ω–∞—Ç–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ"""
        logger.info("üöõ –î–æ–±–∞–≤—è–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞ —Ç–∏–ø–æ–≤–µ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ center bus...")
        
        vehicle_types = data['vehicle_types']
        
        # –ë—Ä–æ–∏–º —Ç–∏–ø–æ–≤–µ –∫–ª–∏–µ–Ω—Ç–∏
        center_count = sum(1 for c in self.customers if "–¶–µ–Ω—Ç—ä—Ä" in c.name or "Center" in c.name.lower())
        external_count = sum(1 for c in self.customers if "–í—ä–Ω—à–µ–Ω" in c.name or "External" in c.name.lower())
        internal_count = len(self.customers) - center_count - external_count
        
        logger.info(f"üìä –¢–∏–ø–æ–≤–µ –∫–ª–∏–µ–Ω—Ç–∏: Center={center_count}, External={external_count}, Internal={internal_count}")
        
        # –í—Å–∏—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∏ –º–æ–≥–∞—Ç –¥–∞ —Å–µ –æ–±—Å–ª—É–∂–≤–∞—Ç –æ—Ç –≤—Å–∏—á–∫–∏ –∞–≤—Ç–æ–±—É—Å–∏, –Ω–æ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        # Center Bus –∏–º–∞ –Ω–∞–π-–≤–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–ø–æ—Å—Ç–∞–≤—è–º–µ –≥–æ –ø—ä—Ä–≤–æ –≤ —Å–ø–∏—Å—ä–∫–∞)
        for customer_idx, customer in enumerate(self.customers):
            node_index = customer_idx + 1  # +1 –∑–∞—â–æ—Ç–æ depot –µ 0
            allowed_vehicles = []
            
            # –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–Ø: Center Bus > Internal Bus > External Bus
            # 1. –ü—ä—Ä–≤–æ –¥–æ–±–∞–≤—è–º–µ Center Bus –∞–≤—Ç–æ–±—É—Å–∏—Ç–µ
            for vehicle_id, vehicle_type in enumerate(vehicle_types):
                if vehicle_type == VehicleType.CENTER_BUS:
                    allowed_vehicles.append(vehicle_id)
            
            # 2. –°–ª–µ–¥ —Ç–æ–≤–∞ Internal Bus –∞–≤—Ç–æ–±—É—Å–∏—Ç–µ  
            for vehicle_id, vehicle_type in enumerate(vehicle_types):
                if vehicle_type == VehicleType.INTERNAL_BUS:
                    allowed_vehicles.append(vehicle_id)
            
            # 3. –ù–∞–∫—Ä–∞—è External Bus –∞–≤—Ç–æ–±—É—Å–∏—Ç–µ
            for vehicle_id, vehicle_type in enumerate(vehicle_types):
                if vehicle_type == VehicleType.EXTERNAL_BUS:
                    allowed_vehicles.append(vehicle_id)
            
            # –ó–∞–¥–∞–≤–∞–º–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ—Ç–æ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–∞–Ω–∏—è —Å–ø–∏—Å—ä–∫
            routing.SetAllowedVehiclesForIndex(allowed_vehicles, manager.NodeToIndex(node_index))
            
            logger.debug(f"   –ö–ª–∏–µ–Ω—Ç '{customer.name}' -> –ê–≤—Ç–æ–±—É—Å–∏ {allowed_vehicles} (center –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)")
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–µ–Ω–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞ {len(self.customers)} –∫–ª–∏–µ–Ω—Ç–∞ —Å center bus –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
    
    def _extract_solution(self, manager, routing, solution) -> CVRPSolution:
        """–ò–∑–≤–ª–∏—á–∞ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ –æ—Ç OR-Tools —Å –ø–æ–¥–¥—Ä—ä–∂–∫–∞ –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–µ–ø–∞"""
        routes = []
        total_distance = 0
        total_time = 0
        
        num_vehicles = routing.vehicles()
        num_depots = len(self.unique_depots)
        
        for vehicle_id in range(routing.vehicles()):
            route_customers = []
            route_distance = 0
            route_time = 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–º–µ –∫–æ–µ –µ –¥–µ–ø–æ—Ç–æ –∑–∞ —Ç–æ–∑–∏ vehicle —Å–ø–æ—Ä–µ–¥ data model
            vehicle_config = self._get_vehicle_config_for_id(vehicle_id)
            
            # –í–ê–ñ–ù–û: –°–ø–µ—Ü–∏–∞–ª–µ–Ω —Å–ª—É—á–∞–π –∑–∞ CENTER_BUS - –≤–∏–Ω–∞–≥–∏ –∏–∑–ø–æ–ª–∑–≤–∞ center_location
            if vehicle_config.vehicle_type.value == 'center_bus':
                from config import get_config
                depot_location = get_config().locations.center_location
                logger.info(f"üéØ –ê–≤—Ç–æ–±—É—Å {vehicle_id} –µ CENTER_BUS - –∏–∑–ø–æ–ª–∑–≤–∞–º center_location: {depot_location}")
            elif vehicle_config.start_location:
                depot_index = self.unique_depots.index(vehicle_config.start_location)
                depot_location = self.unique_depots[depot_index]
            else:
                depot_index = 0  # –û—Å–Ω–æ–≤–Ω–æ—Ç–æ –¥–µ–ø–æ
                depot_location = self.unique_depots[depot_index]
            
            index = routing.Start(vehicle_id)
            while not routing.IsEnd(index):
                node_index = manager.IndexToNode(index)
                # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Ç–æ–≤–∞ –µ –∫–ª–∏–µ–Ω—Ç (–Ω–µ –¥–µ–ø–æ)
                if node_index >= num_depots:  # –ö–ª–∏–µ–Ω—Ç–∏—Ç–µ —Å–∞ —Å–ª–µ–¥ –¥–µ–ø–∞—Ç–∞ –≤ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞
                    # Customer index –µ node_index - –±—Ä–æ–π –¥–µ–ø–∞
                    customer_index = node_index - num_depots
                    if 0 <= customer_index < len(self.customers):
                        customer = self.customers[customer_index]
                        route_customers.append(customer)
                
                previous_index = index
                index = solution.Value(routing.NextVar(index))
                
                # –í–∑–µ–º–∞–º–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–Ω–∏—Ç–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –æ—Ç –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞
                from_node = manager.IndexToNode(previous_index)
                to_node = manager.IndexToNode(index)
                actual_distance = self.distance_matrix.distances[from_node][to_node]
                actual_time = self.distance_matrix.durations[from_node][to_node]
                
                route_distance += actual_distance
                route_time += actual_time
            
            if route_customers:  # —Å–∞–º–æ –∞–∫–æ –∏–º–∞ –∫–ª–∏–µ–Ω—Ç–∏ –≤ –º–∞—Ä—à—Ä—É—Ç–∞
                # –î–æ–±–∞–≤—è–º–µ service time –∑–∞ –≤—Å–µ–∫–∏ –∫–ª–∏–µ–Ω—Ç (10 –º–∏–Ω—É—Ç–∏ —Å–ø–æ—Ä–µ–¥ config)
                total_service_time = len(route_customers) * vehicle_config.service_time_minutes * 60  # –≤ —Å–µ–∫—É–Ω–¥–∏
                
                route = Route(
                    vehicle_type=vehicle_config.vehicle_type,
                    vehicle_id=vehicle_id,
                    customers=route_customers,
                    depot_location=depot_location,
                    total_distance_km=route_distance / 1000,  # –æ—Ç –º–µ—Ç—Ä–∏ –≤ –∫–º
                    total_time_minutes=(route_time + total_service_time) / 60,  # –≤ –º–∏–Ω—É—Ç–∏
                    total_volume=sum(c.volume for c in route_customers),
                    is_feasible=True
                )
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ distance constraint
                if (vehicle_config.max_distance_km and 
                    route.total_distance_km > vehicle_config.max_distance_km):
                    logger.warning(f"‚ö†Ô∏è –ê–≤—Ç–æ–±—É—Å {vehicle_id} ({vehicle_config.vehicle_type.value}) "
                                  f"–Ω–∞–¥–≤–∏—à–∞–≤–∞ distance –ª–∏–º–∏—Ç: {route.total_distance_km:.1f}–∫–º > "
                                  f"{vehicle_config.max_distance_km}–∫–º")
                    route.is_feasible = False
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ capacity constraint  
                if route.total_volume > vehicle_config.capacity:
                    logger.warning(f"‚ö†Ô∏è –ê–≤—Ç–æ–±—É—Å {vehicle_id} ({vehicle_config.vehicle_type.value}) "
                                  f"–Ω–∞–¥–≤–∏—à–∞–≤–∞ capacity –ª–∏–º–∏—Ç: {route.total_volume:.1f}—Å—Ç > "
                                  f"{vehicle_config.capacity}—Å—Ç")
                    route.is_feasible = False
                
                routes.append(route)
                total_distance += route_distance
                total_time += route_time + total_service_time
        
        cvrp_solution = CVRPSolution(
            routes=routes,
            total_distance_km=total_distance / 1000,
            total_time_minutes=total_time / 60,
            total_vehicles_used=len(routes),
            fitness_score=total_distance / 1000,  # –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –∫–∞—Ç–æ fitness
            is_feasible=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—â–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ
        invalid_routes = [r for r in routes if not r.is_feasible]
        if invalid_routes:
            cvrp_solution.is_feasible = False
            logger.error(f"‚ùå {len(invalid_routes)} –æ—Ç {len(routes)} –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞—Ä—É—à–∞–≤–∞—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ç–∞!")
            for route in invalid_routes:
                vehicle_config = self._get_vehicle_config_for_id(route.vehicle_id)
                logger.error(f"   –ê–≤—Ç–æ–±—É—Å {route.vehicle_id} ({vehicle_config.vehicle_type.value}): "
                           f"{route.total_distance_km:.1f}–∫–º/{vehicle_config.max_distance_km}–∫–º, "
                           f"{route.total_volume:.1f}—Å—Ç/{vehicle_config.capacity}—Å—Ç")
        else:
            logger.info("‚úÖ –í—Å–∏—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏ —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∞—Ç –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ç–∞")
        
        # –§–∏–Ω–∞–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –ø—Ä–æ–≥—Ä–µ—Å tracker-–∞  
        if hasattr(self, 'progress_tracker'):
            self.progress_tracker.best_solution_value = total_distance
            
        logger.info(f"OR-Tools –Ω–∞–º–µ—Ä–∏ —Ä–µ—à–µ–Ω–∏–µ —Å {len(routes)} –º–∞—Ä—à—Ä—É—Ç–∞")
        logger.info(f"–û–±—â–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ: {cvrp_solution.total_distance_km:.2f} –∫–º")
        logger.info(f"–†–µ—à–µ–Ω–∏–µ –µ –≤–∞–ª–∏–¥–Ω–æ: {'‚úÖ –î–∞' if cvrp_solution.is_feasible else '‚ùå –ù–µ'}")
        
        return cvrp_solution
    
    def _get_vehicle_config_for_id(self, vehicle_id: int) -> VehicleConfig:
        """–ù–∞–º–∏—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –∑–∞ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ –ø–æ ID"""
        current_id = 0
        for vehicle_config in self.vehicle_configs:
            if not vehicle_config.enabled:
                continue
            if current_id <= vehicle_id < current_id + vehicle_config.count:
                return vehicle_config
            current_id += vehicle_config.count
        
        # Fallback –∫—ä–º –ø—ä—Ä–≤–æ—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ
        for vehicle_config in self.vehicle_configs:
            if vehicle_config.enabled:
                return vehicle_config
        
        raise ValueError("–ù—è–º–∞ –≤–∫–ª—é—á–µ–Ω–∏ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
    
    def _create_backup_solution(self) -> CVRPSolution:
        """–ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–µ–Ω fallback –∞–ª–≥–æ—Ä–∏—Ç—ä–º –∞–∫–æ OR-Tools –Ω–µ —Ä–∞–±–æ—Ç–∏ - –°–ü–ê–ó–í–ê –ö–ú –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø"""
        logger.warning("üîÑ –ò–ó–ü–û–õ–ó–í–ê–ú BACKUP –ê–õ–ì–û–†–ò–¢–™–ú –≤–º–µ—Å—Ç–æ OR-Tools")
        logger.warning("   –¢–æ–≤–∞ –ù–ï –µ –æ–ø—Ç–∏–º–∞–ª–Ω–æ - –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –∑–∞—â–æ OR-Tools –Ω–µ —Ä–∞–±–æ—Ç–∏!")
        
        routes = []
        current_customers = self.customers.copy()
        vehicle_id = 0
        
        # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ –ø–æ –æ–±–µ–º (–º–∞–ª–∫–∏ –ø—ä—Ä–≤–æ –∑–∞ –ø–æ-–¥–æ–±—Ä–æ –∑–∞–ø—ä–ª–≤–∞–Ω–µ)
        current_customers.sort(key=lambda c: c.volume)
        
        for vehicle_config in self.vehicle_configs:
            if not vehicle_config.enabled:
                continue
                
            for _ in range(vehicle_config.count):
                if not current_customers:
                    break
                    
                # –ó–∞–ø—ä–ª–≤–∞–º–µ –∞–≤—Ç–æ–±—É—Å–∞ —Å–ø–æ—Ä–µ–¥ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞ –ò –∫–∏–ª–æ–º–µ—Ç—Ä–∏—Ç–µ –º—É
                route_customers = []
                current_volume = 0.0
                current_distance = 0.0
                remaining_customers = []
                
                for customer in current_customers:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ capacity constraint
                    if current_volume + customer.volume > vehicle_config.capacity:
                        remaining_customers.append(customer)
                        continue
                    
                    # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –∞–∫–æ –¥–æ–±–∞–≤–∏–º —Ç–æ–∑–∏ –∫–ª–∏–µ–Ω—Ç
                    depot_idx = 0  # depot –µ –≤–∏–Ω–∞–≥–∏ 0
                    customer_idx = self.customers.index(customer) + 1  # +1 –∑–∞—â–æ—Ç–æ depot –µ 0
                    
                    # –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¥–µ–ø–æ –¥–æ –∫–ª–∏–µ–Ω—Ç
                    distance_to_customer = self.distance_matrix.distances[depot_idx][customer_idx] / 1000  # –≤ –∫–º
                    # –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ –¥–æ –¥–µ–ø–æ
                    distance_back = self.distance_matrix.distances[customer_idx][depot_idx] / 1000  # –≤ –∫–º
                    
                    # –û–±—â–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –∑–∞ —Ç–æ–∑–∏ –∫–ª–∏–µ–Ω—Ç (round trip)
                    total_trip_distance = distance_to_customer + distance_back
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ distance constraint
                    if (vehicle_config.max_distance_km and 
                        current_distance + total_trip_distance > vehicle_config.max_distance_km):
                        remaining_customers.append(customer)
                        continue
                    
                    # –î–æ–±–∞–≤—è–º–µ –∫–ª–∏–µ–Ω—Ç–∞ –∞–∫–æ –æ—Ç–≥–æ–≤–∞—Ä—è –Ω–∞ –≤—Å–∏—á–∫–∏ constraints
                    route_customers.append(customer)
                    current_volume += customer.volume
                    current_distance += total_trip_distance
                
                current_customers = remaining_customers
                
                if route_customers:
                    # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–µ–∞–ª–Ω–æ—Ç–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞
                    route_distance_km = self._calculate_real_route_distance(route_customers)
                    route_time_minutes = self._calculate_real_route_time(route_customers)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç—ä—Ç –µ –≤–∞–ª–∏–¥–µ–Ω
                    is_feasible = True
                    if (vehicle_config.max_distance_km and 
                        route_distance_km > vehicle_config.max_distance_km):
                        is_feasible = False
                        logger.warning(f"‚ö†Ô∏è –ê–≤—Ç–æ–±—É—Å {vehicle_id} ({vehicle_config.vehicle_type.value}) "
                                     f"–Ω–∞–¥–≤–∏—à–∞–≤–∞ km –ª–∏–º–∏—Ç: {route_distance_km:.1f}–∫–º > {vehicle_config.max_distance_km}–∫–º")
                    
                    if current_volume > vehicle_config.capacity:
                        is_feasible = False
                        logger.warning(f"‚ö†Ô∏è –ê–≤—Ç–æ–±—É—Å {vehicle_id} ({vehicle_config.vehicle_type.value}) "
                                     f"–Ω–∞–¥–≤–∏—à–∞–≤–∞ capacity –ª–∏–º–∏—Ç: {current_volume:.1f}—Å—Ç > {vehicle_config.capacity}—Å—Ç")
                    
                    route = Route(
                        vehicle_type=vehicle_config.vehicle_type,
                        vehicle_id=vehicle_id,
                        customers=route_customers,
                        depot_location=self.distance_matrix.locations[0],
                        total_volume=current_volume,
                        total_distance_km=route_distance_km,
                        total_time_minutes=route_time_minutes,
                        is_feasible=is_feasible
                    )
                    routes.append(route)
                    
                    status_icon = "‚úÖ" if is_feasible else "‚ùå"
                    logger.info(f"{status_icon} –ê–≤—Ç–æ–±—É—Å {vehicle_id} ({vehicle_config.vehicle_type.value}): "
                              f"{len(route_customers)} –∫–ª–∏–µ–Ω—Ç–∞, {current_volume:.1f}/{vehicle_config.capacity}—Å—Ç, "
                              f"{route_distance_km:.1f}/{vehicle_config.max_distance_km or 999}–∫–º")
                    vehicle_id += 1
        
        # –ê–∫–æ —Å–∞ –æ—Å—Ç–∞–Ω–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–≤–∞–º–µ
        if current_customers:
            logger.warning(f"‚ö†Ô∏è –û—Å—Ç–∞–Ω–∞—Ö–∞ {len(current_customers)} –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - "
                         f"–æ–±—â –æ–±–µ–º {sum(c.volume for c in current_customers):.1f} —Å—Ç.")
            for customer in current_customers:
                logger.warning(f"   - {customer.name}: {customer.volume}—Å—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –æ–±—â–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç
        invalid_routes = [r for r in routes if not r.is_feasible]
        overall_feasible = len(invalid_routes) == 0 and len(current_customers) == 0
        
        if not overall_feasible:
            logger.error(f"‚ùå –†–µ—à–µ–Ω–∏–µ—Ç–æ –ù–ï –µ –Ω–∞–ø—ä–ª–Ω–æ –≤–∞–ª–∏–¥–Ω–æ:")
            logger.error(f"   - –ù–µ–≤–∞–ª–∏–¥–Ω–∏ –º–∞—Ä—à—Ä—É—Ç–∏: {len(invalid_routes)}")
            logger.error(f"   - –ù–µ—Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏: {len(current_customers)}")
        else:
            logger.info("‚úÖ Fallback —Ä–µ—à–µ–Ω–∏–µ—Ç–æ –µ –í–ê–õ–ò–î–ù–û –∏ —Å–ø–∞–∑–≤–∞ –≤—Å–∏—á–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è!")
        
        return CVRPSolution(
            routes=routes,
            total_distance_km=sum(r.total_distance_km for r in routes),
            total_time_minutes=sum(r.total_time_minutes for r in routes),
            total_vehicles_used=len(routes),
            fitness_score=sum(r.total_distance_km for r in routes),
            is_feasible=overall_feasible
        )
    
    def _calculate_real_route_distance(self, route_customers: List[Customer]) -> float:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ —Ä–µ–∞–ª–Ω–æ—Ç–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –∑–∞ –º–∞—Ä—à—Ä—É—Ç —Å–ø—Ä—è–º–æ OSRM –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞"""
        if not route_customers:
            return 0.0
        
        total_distance = 0.0
        depot_idx = 0
        
        # –û—Ç –¥–µ–ø–æ –¥–æ –ø—ä—Ä–≤–∏—è –∫–ª–∏–µ–Ω—Ç
        first_customer_idx = self.customers.index(route_customers[0]) + 1
        total_distance += self.distance_matrix.distances[depot_idx][first_customer_idx]
        
        # –ú–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ
        for i in range(len(route_customers) - 1):
            from_customer_idx = self.customers.index(route_customers[i]) + 1
            to_customer_idx = self.customers.index(route_customers[i + 1]) + 1
            total_distance += self.distance_matrix.distances[from_customer_idx][to_customer_idx]
        
        # –û—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—è –∫–ª–∏–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ –¥–æ –¥–µ–ø–æ
        last_customer_idx = self.customers.index(route_customers[-1]) + 1
        total_distance += self.distance_matrix.distances[last_customer_idx][depot_idx]
        
        return total_distance / 1000  # –æ—Ç –º–µ—Ç—Ä–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∏
    
    def _calculate_real_route_time(self, route_customers: List[Customer]) -> float:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ —Ä–µ–∞–ª–Ω–æ—Ç–æ –≤—Ä–µ–º–µ –∑–∞ –º–∞—Ä—à—Ä—É—Ç —Å–ø—Ä—è–º–æ OSRM –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞"""
        if not route_customers:
            return 0.0
        
        total_time = 0.0
        depot_idx = 0
        
        # –û—Ç –¥–µ–ø–æ –¥–æ –ø—ä—Ä–≤–∏—è –∫–ª–∏–µ–Ω—Ç
        first_customer_idx = self.customers.index(route_customers[0]) + 1
        total_time += self.distance_matrix.durations[depot_idx][first_customer_idx]
        
        # –ú–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ
        for i in range(len(route_customers) - 1):
            from_customer_idx = self.customers.index(route_customers[i]) + 1
            to_customer_idx = self.customers.index(route_customers[i + 1]) + 1
            total_time += self.distance_matrix.durations[from_customer_idx][to_customer_idx]
        
        # –û—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—è –∫–ª–∏–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ –¥–æ –¥–µ–ø–æ
        last_customer_idx = self.customers.index(route_customers[-1]) + 1
        total_time += self.distance_matrix.durations[last_customer_idx][depot_idx]
        
        # –î–æ–±–∞–≤—è–º–µ service time (15 –º–∏–Ω—É—Ç–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç)
        service_time = len(route_customers) * 15 * 60  # –≤ —Å–µ–∫—É–Ω–¥–∏
        
        return (total_time + service_time) / 60  # –æ—Ç —Å–µ–∫—É–Ω–¥–∏ –≤ –º–∏–Ω—É—Ç–∏


class CVRPSolver:
    """–ì–ª–∞–≤–µ–Ω –∫–ª–∞—Å –∑–∞ —Ä–µ—à–∞–≤–∞–Ω–µ –Ω–∞ CVRP"""
    
    def __init__(self, config: Optional[CVRPConfig] = None):
        self.config = config or get_config().cvrp
        self.osrm_client = OSRMClient()
    
    def solve(self, allocation: WarehouseAllocation, depot_location: Tuple[float, float]) -> CVRPSolution:
        """–†–µ—à–∞–≤–∞ CVRP –∑–∞ –¥–∞–¥–µ–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∏ —Å –ø–æ–¥–¥—Ä—ä–∂–∫–∞ –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–µ–ø–∞"""
        logger.info("–ó–∞–ø–æ—á–≤–∞–º —Ä–µ—à–∞–≤–∞–Ω–µ –Ω–∞ CVRP –ø—Ä–æ–±–ª–µ–º–∞")
        
        customers = allocation.vehicle_customers
        if not customers:
            logger.warning("–ù—è–º–∞ –∫–ª–∏–µ–Ω—Ç–∏ –∑–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
            return CVRPSolution([], 0, 0, 0, 0, True)

        # –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏—Ç–µ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
        from config import config_manager
        enabled_vehicles = config_manager.get_enabled_vehicles()
        
        # –°–¢–™–ü–ö–ê 1: –°—ä–±–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ —É–Ω–∏–∫–∞–ª–Ω–∏ –¥–µ–ø–∞/start_location-–∏
        unique_depots = set()
        unique_depots.add(depot_location)  # –û—Å–Ω–æ–≤–Ω–æ—Ç–æ –¥–µ–ø–æ –≤–∏–Ω–∞–≥–∏ —Å–µ –≤–∫–ª—é—á–≤–∞
        
        for vehicle_config in enabled_vehicles:
            if vehicle_config.start_location:
                unique_depots.add(vehicle_config.start_location)
        
        unique_depots = list(unique_depots)
        
        # –í–ê–ñ–ù–û: –°–æ—Ä—Ç–∏—Ä–∞–º–µ –¥–µ–ø–∞—Ç–∞ –∑–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç - center –¥–µ–ø–æ –ø—ä—Ä–≤–æ
        # –¢–æ–≤–∞ –æ—Å–∏–≥—É—Ä—è–≤–∞ —á–µ center_location –≤–∏–Ω–∞–≥–∏ —â–µ –µ –Ω–∞ –∏–Ω–¥–µ–∫—Å 0
        center_location = get_config().locations.center_location
        if center_location in unique_depots:
            unique_depots.remove(center_location)
            unique_depots.insert(0, center_location)  # Center –¥–µ–ø–æ –Ω–∞ –∏–Ω–¥–µ–∫—Å 0
        
        logger.info(f"üè≠ –£–Ω–∏–∫–∞–ª–Ω–∏ –¥–µ–ø–∞: {len(unique_depots)}")
        for i, depot in enumerate(unique_depots):
            if depot == center_location:
                logger.info(f"   –î–µ–ø–æ {i}: {depot} (CENTER)")
            elif depot == depot_location:
                logger.info(f"   –î–µ–ø–æ {i}: {depot} (MAIN)")
            else:
                logger.info(f"   –î–µ–ø–æ {i}: {depot}")
        
        # –°–¢–™–ü–ö–ê 2: –°—ä–∑–¥–∞–≤–∞–º–µ —Ä–∞–∑—à–∏—Ä–µ–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞: [–¥–µ–ø–∞] + [–∫–ª–∏–µ–Ω—Ç–∏]
        all_locations = unique_depots + [c.coordinates for c in customers]
        
        logger.info("üîç –¢—ä—Ä—Å—è –º–∞—Ç—Ä–∏—Ü–∞ —Å —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∏—è –∫–µ—à...")
        distance_matrix = get_distance_matrix_from_central_cache(all_locations)
        
        if distance_matrix is None:
            logger.info("üíæ –ù—è–º–∞ –¥–∞–Ω–Ω–∏ –≤ –∫–µ—à–∞ - –ø—Ä–∞–≤—è –Ω–æ–≤–∞ OSRM –∑–∞—è–≤–∫–∞")
            distance_matrix = self.osrm_client.get_distance_matrix(all_locations)
        else:
            logger.info("‚úÖ –ò–∑–ø–æ–ª–∑–≤–∞–º –º–∞—Ç—Ä–∏—Ü–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∏—è –∫–µ—à - –±–µ–∑ OSRM –∑–∞—è–≤–∫–∏!")
        
        # –†–µ—à–∞–≤–∞–Ω–µ —Å OR-Tools
        if self.config.algorithm == "or_tools":
            solver = ORToolsSolver(self.config, enabled_vehicles, customers, distance_matrix, unique_depots)
        else:
            logger.warning(f"–ù–µ–ø–æ–¥–¥—ä—Ä–∂–∞–Ω –∞–ª–≥–æ—Ä–∏—Ç—ä–º: {self.config.algorithm}, –∏–∑–ø–æ–ª–∑–≤–∞–º OR-Tools")
            solver = ORToolsSolver(self.config, enabled_vehicles, customers, distance_matrix, unique_depots)
        
        solution = solver.solve()
        
        logger.info(f"CVRP —Ä–µ—à–µ–Ω: {solution.total_vehicles_used} –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
        
        return solution
    
    def close(self):
        """–ó–∞—Ç–≤–∞—Ä—è —Ä–µ—Å—É—Ä—Å–∏—Ç–µ"""
        self.osrm_client.close()


# –£–¥–æ–±–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
def solve_cvrp(allocation: WarehouseAllocation, depot_location: Tuple[float, float]) -> CVRPSolution:
    """–£–¥–æ–±–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Ä–µ—à–∞–≤–∞–Ω–µ –Ω–∞ CVRP"""
    solver = CVRPSolver()
    try:
        return solver.solve(allocation, depot_location)
    finally:
        solver.close() 