"""
CVRP Solver - –æ—Å–Ω–æ–≤–µ–Ω –º–æ–¥—É–ª –∑–∞ —Ä–µ—à–∞–≤–∞–Ω–µ –Ω–∞ Vehicle Routing Problem
–ò–∑–ø–æ–ª–∑–≤–∞ OR-Tools –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
"""

import random
import math
import time
import threading
from typing import List, Dict, Tuple, Optional, Set
from dataclasses import dataclass
import logging
from tqdm import tqdm

# OR-Tools –∏–º–ø–æ—Ä—Ç–∏
try:
    from ortools.constraint_solver import routing_enums_pb2
    from ortools.constraint_solver import pywrapcp
    ORTOOLS_AVAILABLE = True
except ImportError:
    ORTOOLS_AVAILABLE = False
    logging.warning("OR-Tools –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω. –©–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ –æ–ø—Ä–æ—Å—Ç–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç—ä–º.")

from config import get_config, CVRPConfig, VehicleConfig, VehicleType, LocationConfig
from input_handler import Customer
from osrm_client import DistanceMatrix
from warehouse_manager import WarehouseAllocation

logger = logging.getLogger(__name__)

def calculate_distance_km(coord1: Optional[Tuple[float, float]], coord2: Tuple[float, float]) -> float:
    """–ò–∑—á–∏—Å–ª—è–≤–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –º–µ–∂–¥—É –¥–≤–µ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∏"""
    if not coord1 or not coord2:
        return float('inf')
    
    lat1, lon1 = math.radians(coord1[0]), math.radians(coord1[1])
    lat2, lon2 = math.radians(coord2[0]), math.radians(coord2[1])
    
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    
    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
    c = 2 * math.asin(math.sqrt(a))
    
    return 6371 * c  # 6371 km –µ —Ä–∞–¥–∏—É—Å—ä—Ç –Ω–∞ –ó–µ–º—è—Ç–∞


class ORToolsProgressTracker:
    """–ö–ª–∞—Å –∑–∞ —Å–ª–µ–¥–µ–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞ –Ω–∞ OR-Tools –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"""
    
    def __init__(self, time_limit_seconds: int, num_customers: int):
        self.time_limit_seconds = time_limit_seconds
        self.num_customers = num_customers
        self.start_time = None
        self.best_solution_value = float('inf')
        self.solution_count = 0
        self.progress_bar = None
        self.running = False
        self.progress_thread = None
        
    def start_tracking(self):
        """–°—Ç–∞—Ä—Ç–∏—Ä–∞ —Å–ª–µ–¥–µ–Ω–µ—Ç–æ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞"""
        self.start_time = time.time()
        self.running = True
        self.solution_count = 0
        
        # –°—ä–∑–¥–∞–≤–∞–º–µ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
        self.progress_bar = tqdm(
            total=self.time_limit_seconds,
            desc=f"üîÑ OR-Tools –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è ({self.num_customers} –∫–ª–∏–µ–Ω—Ç–∞)",
            unit="s",
            bar_format="{l_bar}{bar}| {n:.0f}/{total:.0f}s [{elapsed}<{remaining}, {postfix}]",
            dynamic_ncols=True
        )
        
        # –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ thread –∑–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞
        self.progress_thread = threading.Thread(target=self._update_progress)
        self.progress_thread.daemon = True
        self.progress_thread.start()
        
    def update_solution(self, solution_value: float):
        """–û–±–Ω–æ–≤—è–≤–∞ –Ω–∞–π-–¥–æ–±—Ä–æ—Ç–æ —Ä–µ—à–µ–Ω–∏–µ"""
        if solution_value < self.best_solution_value:
            self.best_solution_value = solution_value
            self.solution_count += 1
            
            # –û–±–Ω–æ–≤—è–≤–∞–º–µ postfix –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞
            if self.progress_bar:
                improvement_percent = ((self.best_solution_value / self.best_solution_value * 100) 
                                     if self.best_solution_value > 0 else 0)
                self.progress_bar.set_postfix({
                    '—Ä–µ—à–µ–Ω–∏—è': self.solution_count,
                    '–Ω–∞–π-–¥–æ–±—Ä–æ': f'{self.best_solution_value/1000:.1f}–∫–º'
                })
    
    def _update_progress(self):
        """–û–±–Ω–æ–≤—è–≤–∞ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä–∞ –≤ –æ—Ç–¥–µ–ª–µ–Ω thread"""
        while self.running and self.progress_bar:
            if self.start_time:
                elapsed = time.time() - self.start_time
                if elapsed <= self.time_limit_seconds:
                    self.progress_bar.n = min(elapsed, self.time_limit_seconds)
                    self.progress_bar.refresh()
                else:
                    self.progress_bar.n = self.time_limit_seconds
                    self.progress_bar.refresh()
                    break
            time.sleep(0.5)  # –û–±–Ω–æ–≤—è–≤–∞–º–µ –Ω–∞ –≤—Å–µ–∫–∏ 0.5 —Å–µ–∫—É–Ω–¥–∏
    
    def stop_tracking(self):
        """–°–ø–∏—Ä–∞ —Å–ª–µ–¥–µ–Ω–µ—Ç–æ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞"""
        self.running = False
        if self.progress_bar:
            # –î–æ–≤—ä—Ä—à–≤–∞–º–µ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä–∞
            elapsed = time.time() - self.start_time if self.start_time else 0
            self.progress_bar.n = min(elapsed, self.time_limit_seconds)
            
            # –§–∏–Ω–∞–ª–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ
            final_msg = f"‚úÖ –ó–∞–≤—ä—Ä—à–µ–Ω–æ - {self.solution_count} —Ä–µ—à–µ–Ω–∏—è –∑–∞ {elapsed:.1f}s"
            if self.best_solution_value != float('inf'):
                final_msg += f" | –ù–∞–π-–¥–æ–±—Ä–æ: {self.best_solution_value/1000:.1f}–∫–º"
            
            self.progress_bar.set_description(final_msg)
            self.progress_bar.refresh()
            self.progress_bar.close()
            
        if self.progress_thread and self.progress_thread.is_alive():
            self.progress_thread.join(timeout=1.0)


@dataclass
class Route:
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–≤–∞ –º–∞—Ä—à—Ä—É—Ç –∑–∞ –µ–¥–Ω–æ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ"""
    vehicle_type: VehicleType
    vehicle_id: int
    customers: List[Customer]
    depot_location: Tuple[float, float]
    total_distance_km: float = 0.0
    total_time_minutes: float = 0.0
    total_volume: float = 0.0
    is_feasible: bool = True


@dataclass
class CVRPSolution:
    """–¶—è–ª–æ—Å—Ç–Ω–æ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ CVRP –ø—Ä–æ–±–ª–µ–º–∞"""
    routes: List[Route]
    dropped_customers: List[Customer]
    total_distance_km: float
    total_time_minutes: float
    total_vehicles_used: int
    fitness_score: float # –û—Å–Ω–æ–≤–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç, –∫–æ—è—Ç–æ solver-—ä—Ç –º–∏–Ω–∏–º–∏–∑–∏—Ä–∞ (—Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ)
    is_feasible: bool
    total_served_volume: float = 0.0 # –û–±—Ö—ä—Ç –æ–±—Å–ª—É–∂–µ–Ω –æ–±–µ–º, –∏–∑–ø–æ–ª–∑–≤–∞–Ω –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ "–ø–æ–±–µ–¥–∏—Ç–µ–ª"


class RouteBuilder:
    """–ö–ª–∞—Å –∑–∞ –ø–æ—Å—Ç—Ä–æ—è–≤–∞–Ω–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏"""
    
    def __init__(self, vehicle_configs: List[VehicleConfig], distance_matrix: DistanceMatrix):
        self.vehicle_configs = vehicle_configs
        self.distance_matrix = distance_matrix
        self.locations = distance_matrix.locations  # [depot, customer1, customer2, ...]
    
    def build_route(self, vehicle_type: VehicleType, vehicle_id: int, 
                   customer_indices: List[int], depot_location: Tuple[float, float]) -> Route:
        """–ü–æ—Å—Ç—Ä–æ—è–≤–∞ –º–∞—Ä—à—Ä—É—Ç –∑–∞ –¥–∞–¥–µ–Ω–æ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ"""
        vehicle_config = self._get_vehicle_config(vehicle_type)
        customers = [self._get_customer_by_index(idx) for idx in customer_indices]
        
        route = Route(
            vehicle_type=vehicle_type,
            vehicle_id=vehicle_id,
            customers=customers,
            depot_location=depot_location
        )
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –æ–±–µ–º
        route.total_volume = sum(c.volume for c in customers)
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ
        if customer_indices:
            route.total_distance_km, route.total_time_minutes = self._calculate_route_metrics(customer_indices)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        route.is_feasible = self._validate_route(route, vehicle_config)
        
        return route
    
    def _get_vehicle_config(self, vehicle_type: VehicleType) -> VehicleConfig:
        """–ù–∞–º–∏—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –∑–∞ –¥–∞–¥–µ–Ω–∏—è —Ç–∏–ø –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ"""
        for config in self.vehicle_configs:
            if config.vehicle_type == vehicle_type:
                return config
        raise ValueError(f"–ù—è–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ –æ—Ç —Ç–∏–ø {vehicle_type}")
    
    def _get_customer_by_index(self, index: int) -> Customer:
        """–í—Ä—ä—â–∞ –∫–ª–∏–µ–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞ (–∏–Ω–¥–µ–∫—Å 0 –µ –¥–µ–ø–æ—Ç–æ)"""
        # –¢–æ–≤–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞ —á–µ –∏–º–∞–º–µ –¥–æ—Å—Ç—ä–ø –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∏
        # –í —Ä–µ–∞–ª–Ω–∞—Ç–∞ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è —Ç—Ä—è–±–≤–∞ –¥–∞ –ø—Ä–µ–¥–∞–≤–∞–º–µ —Å–ø–∏—Å—ä–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–∏
        return Customer(
            id=f"customer_{index}",
            name=f"Customer {index}",
            coordinates=self.locations[index],
            volume=0.0,  # —â–µ —Å–µ –ø–æ–ø—ä–ª–Ω–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
            original_gps_data=""
        )
    
    def _calculate_route_metrics(self, customer_indices: List[int]) -> Tuple[float, float]:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ –æ–±—â–æ—Ç–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ –∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞"""
        if not customer_indices:
            return 0.0, 0.0
        
        total_distance = 0.0
        total_time = 0.0
        
        # –û—Ç –¥–µ–ø–æ –¥–æ –ø—ä—Ä–≤–∏—è –∫–ª–∏–µ–Ω—Ç
        current_index = 0  # –¥–µ–ø–æ
        for next_index in customer_indices:
            distance = self.distance_matrix.distances[current_index][next_index]
            duration = self.distance_matrix.durations[current_index][next_index]
            
            total_distance += distance
            total_time += duration
            current_index = next_index
        
        # –û—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—è –∫–ª–∏–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –¥–µ–ø–æ—Ç–æ
        distance = self.distance_matrix.distances[current_index][0]
        duration = self.distance_matrix.durations[current_index][0]
        total_distance += distance
        total_time += duration
        
        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –æ–±—Å–ª—É–∂–≤–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ
        service_time = len(customer_indices) * 15 * 60  # 15 –º–∏–Ω—É—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∏ –∑–∞ –≤—Å–µ–∫–∏ –∫–ª–∏–µ–Ω—Ç
        total_time += service_time
        
        return total_distance / 1000, total_time / 60  # –≤ –∫–º –∏ –º–∏–Ω—É—Ç–∏
    
    def _validate_route(self, route: Route, vehicle_config: VehicleConfig) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä–∞ –¥–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç—ä—Ç –µ –¥–æ–ø—É—Å—Ç–∏–º"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞
        if route.total_volume > vehicle_config.capacity:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ
        if route.total_time_minutes > vehicle_config.max_time_hours * 60:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ (–∞–∫–æ –∏–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
        if vehicle_config.max_distance_km and route.total_distance_km > vehicle_config.max_distance_km:
            return False
        
        return True


class ORToolsSolver:
    """OR-Tools CVRP —Ä–µ—à–∞—Ç–µ–ª, –æ–ø—Ä–æ—Å—Ç–µ–Ω–∞ –≤–µ—Ä—Å–∏—è."""
    
    def __init__(self, config: CVRPConfig, vehicle_configs: List[VehicleConfig], 
                 customers: List[Customer], distance_matrix: DistanceMatrix, unique_depots: List[Tuple[float, float]], 
                 center_zone_customers: Optional[List[Customer]] = None, location_config: Optional[LocationConfig] = None):
        self.config = config
        self.vehicle_configs = vehicle_configs
        self.customers = customers
        self.distance_matrix = distance_matrix
        self.unique_depots = unique_depots
        self.center_zone_customers = center_zone_customers or []
        self.location_config = location_config

    def solve(self) -> CVRPSolution:
        """
        –†–µ—à–∞–≤–∞ CVRP –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ –∫–ª–∞—Å–∏—á–µ—Å–∫–∏—è –Ω–∞—á–∏–Ω, –∫–∞—Ç–æ –º–∏–Ω–∏–º–∏–∑–∏—Ä–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ
        –∏ —Å–ø–∞–∑–≤–∞ 4-—Ç–µ —Ç–≤—ä—Ä–¥–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –æ–±–µ–º, —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ, –±—Ä–æ–π –∫–ª–∏–µ–Ω—Ç–∏ –∏ –≤—Ä–µ–º–µ.
        """
        if not ORTOOLS_AVAILABLE:
            logger.error("‚ùå OR-Tools –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω")
            return self._create_empty_solution()
        
        try:
            # 1. –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ data model –∏ –º–µ–Ω–∏–¥–∂—ä—Ä
            data = self._create_data_model()
            manager = pywrapcp.RoutingIndexManager(
                len(data['distance_matrix']), data['num_vehicles'], data['vehicle_starts'], data['vehicle_ends']
            )
            routing = pywrapcp.RoutingModel(manager)

            # 2. –¶–ï–ù–ê –ù–ê –ú–ê–†–®–†–£–¢–ê = –†–ê–ó–°–¢–û–Ø–ù–ò–ï
            def distance_callback(from_index, to_index):
                from_node = manager.IndexToNode(from_index)
                to_node = manager.IndexToNode(to_index)
                # –ö–†–ò–¢–ò–ß–ï–ù –§–ò–ö–°: OR-Tools –æ—á–∞–∫–≤–∞ –¶–Ø–õ–û –ß–ò–°–õ–û.
                return int(self.distance_matrix.distances[from_node][to_node])
            
            transit_callback_index = routing.RegisterTransitCallback(distance_callback)
            routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

            # 3. –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø (DIMENSIONS) - –í–°–ò–ß–ö–ò –°–ê –ê–ö–¢–ò–í–ù–ò
            # –û–±–µ–º
            def demand_callback(from_index):
                from_node = manager.IndexToNode(from_index)
                return int(data['demands'][from_node]) # int() –∑–∞ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç
            demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)
            routing.AddDimensionWithVehicleCapacity(
                demand_callback_index, 0, data['vehicle_capacities'], True, "Capacity"
            )

            # –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ - –ê–ö–¢–ò–í–ò–†–ê–ù–û
            routing.AddDimensionWithVehicleCapacity(
                transit_callback_index, 0, data['vehicle_max_distances'], True, "Distance"
            )

            # –ë—Ä–æ–π –∫–ª–∏–µ–Ω—Ç–∏ (—Å–ø–∏—Ä–∫–∏) - –ê–ö–¢–ò–í–ò–†–ê–ù–û
            def stop_callback(from_index):
                return 1 if manager.IndexToNode(from_index) not in data['depot_indices'] else 0
            stop_callback_index = routing.RegisterUnaryTransitCallback(stop_callback)
            routing.AddDimensionWithVehicleCapacity(
                stop_callback_index, 0, data['vehicle_max_stops'], True, "Stops"
            )

            # –í—Ä–µ–º–µ - –ê–ö–¢–ò–í–ò–†–ê–ù–û
            def time_callback(from_index, to_index):
                from_node = manager.IndexToNode(from_index)
                to_node = manager.IndexToNode(to_index)
                travel_time = self.distance_matrix.durations[from_node][to_node]
                service_time = data['service_times'][from_node]
                return int(service_time + travel_time) # –ö–†–ò–¢–ò–ß–ï–ù –§–ò–ö–°: –í—Ä—ä—â–∞–º–µ int
            
            time_callback_index = routing.RegisterTransitCallback(time_callback)
            routing.AddDimensionWithVehicleCapacity(
                time_callback_index, 0, data['vehicle_max_times'], False, "Time"
            )

            # 4. –õ–û–ì–ò–ö–ê –ó–ê –ü–†–û–ü–£–°–ö–ê–ù–ï –ù–ê –ö–õ–ò–ï–ù–¢–ò - —Å –î–ò–ù–ê–ú–ò–ß–ù–ê –≥–ª–æ–±–∞ –ø–æ —Ç–≤–æ—è—Ç–∞ —Ñ–æ—Ä–º—É–ª–∞
            logger.info("–ò–∑–ø–æ–ª–∑–≤–∞ —Å–µ –î–ò–ù–ê–ú–ò–ß–ù–ê –≥–ª–æ–±–∞ –∑–∞ –ø—Ä–æ–ø—É—Å–∫–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏, –±–∞–∑–∏—Ä–∞–Ω–∞ –Ω–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±–µ–º.")
            
            # –í–∑–µ–º–∞–º–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
            distance_normalization_factor = self.config.distance_normalization_factor
            volume_normalization_factor = self.config.volume_normalization_factor
            distance_weight = self.config.distance_weight
            volume_weight = self.config.volume_weight
            max_discount_percentage = self.config.max_discount_percentage
            discount_factor_divisor = self.config.discount_factor_divisor
            distance_penalty_disjunction = self.config.distance_penalty_disjunction
            
            logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞: distance_weight={distance_weight}, volume_weight={volume_weight}, "
                       f"max_discount={max_discount_percentage*100:.1f}%, discount_divisor={discount_factor_divisor}")

            # –°—ä–∑–¥–∞–≤–∞–º–µ —Å–ø–∏—Å—ä–∫ —Å –∫–ª–∏–µ–Ω—Ç–∏ –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞ –∑–∞ –±—ä—Ä–∑–æ —Ç—ä—Ä—Å–µ–Ω–µ
            center_zone_customer_ids = {c.id for c in self.center_zone_customers}
            
            logger.info(f"üéØ –ü—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞: {len(self.center_zone_customers)} –∫–ª–∏–µ–Ω—Ç–∞")

            # –ì–ª–æ–±–∞–ª–µ–Ω callback –∑–∞ –Ω–∞–º–∞–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ –∑–∞ –¥–∞–ª–µ—á–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏ —Å –º–∞–ª—ä–∫ –æ–±–µ–º
            logger.info("üåü –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∏ –∑–∞ –¥–∞–ª–µ—á–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏")
            
            # –í–∑–µ–º–∞–º–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
            distance_normalization_factor = self.config.distance_normalization_factor
            volume_normalization_factor = self.config.volume_normalization_factor
            distance_weight = self.config.distance_weight
            volume_weight = self.config.volume_weight
            max_discount_percentage = self.config.max_discount_percentage
            discount_factor_divisor = self.config.discount_factor_divisor
            
            # –°—ä–∑–¥–∞–≤–∞–º–µ –æ—Ç–¥–µ–ª–µ–Ω callback –∑–∞ –≤—Å–µ–∫–∏ —Ç–∏–ø –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ
            
            # 1. –ë–ê–ó–û–í CALLBACK - –∑–∞–ø–∞–∑–≤–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—Ç–µ —Ä–∞–∑—Ö–æ–¥–∏
            def base_distance_callback(from_index, to_index):
                from_node = manager.IndexToNode(from_index)
                to_node = manager.IndexToNode(to_index)
                return int(self.distance_matrix.distances[from_node][to_node])
                
            base_callback_index = routing.RegisterTransitCallback(base_distance_callback)
            
            # –ü—ä—Ä–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–º–µ –±–∞–∑–æ–≤–∏—è callback –∑–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
            routing.SetArcCostEvaluatorOfAllVehicles(base_callback_index)
            
            # 2. CALLBACK –∑–∞ EXTERNAL_BUS –∏ INTERNAL_BUS - –Ω–∞–º–∞–ª—è–≤–∞ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ –∑–∞ –¥–∞–ª–µ—á–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏ —Å –º–∞–ª—ä–∫ –æ–±–µ–º
            def priority_non_center_callback(from_index, to_index):
                from_node = manager.IndexToNode(from_index)
                to_node = manager.IndexToNode(to_index)
                
                # –ë–∞–∑–æ–≤–∞ —Ü–µ–Ω–∞ (—Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ)
                base_distance = self.distance_matrix.distances[from_node][to_node]
                
                # –ê–∫–æ —Ç–æ–≤–∞ –µ –∫–ª–∏–µ–Ω—Ç (–Ω–µ –¥–µ–ø–æ), –ø—Ä–∏–ª–∞–≥–∞–º–µ –Ω–∞–º–∞–ª–µ–Ω–∏–µ —Å–ø–æ—Ä–µ–¥ —Ñ–æ—Ä–º—É–ª–∞—Ç–∞
                if to_node >= len(self.unique_depots):
                    customer_index = to_node - len(self.unique_depots)
                    customer = self.customers[customer_index]
                    
                    # –î–∞–Ω–Ω–∏ –∑–∞ –∫–ª–∏–µ–Ω—Ç–∞
                    customer_volume = customer.volume
                    distance_from_depot_m = customer.distance_from_depot_m
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ - –ø–æ-–≥–æ–ª–µ–º–∏—Ç–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –¥–∞–≤–∞—Ç –ø–æ-–≥–æ–ª–µ–º–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
                    distance_factor = distance_from_depot_m / distance_normalization_factor
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –æ–±–µ–º–∞ - –ø–æ-–º–∞–ª–∫–∏—Ç–µ –æ–±–µ–º–∏ –¥–∞–≤–∞—Ç –ø–æ-–≥–æ–ª–µ–º–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
                    volume_factor = (volume_normalization_factor - customer_volume) / volume_normalization_factor
                    
                    # –ö–æ–º–±–∏–Ω–∏—Ä–∞–Ω —Ñ–∞–∫—Ç–æ—Ä - –∫–æ–ª–∫–æ—Ç–æ –ø–æ-–≥–æ–ª—è–º –µ, —Ç–æ–ª–∫–æ–≤–∞ –ø–æ-–≥–æ–ª—è–º–æ –µ –Ω–∞–º–∞–ª–µ–Ω–∏–µ—Ç–æ
                    combined_factor = (distance_factor * distance_weight) + (volume_factor * volume_weight)
                    
                    # –ü—Ä–∏–ª–∞–≥–∞–º–µ –Ω–∞–º–∞–ª–µ–Ω–∏–µ –æ—Ç 0% –¥–æ max_discount_percentage –Ω–∞ –±–∞–∑–æ–≤–∞—Ç–∞ —Ü–µ–Ω–∞
                    discount = min(max_discount_percentage, combined_factor / discount_factor_divisor)
                    
                    # –í—Ä—ä—â–∞–º–µ –Ω–∞–º–∞–ª–µ–Ω–∞—Ç–∞ —Ü–µ–Ω–∞
                    return int(base_distance * (1.0 - discount))
                
                # –ó–∞ –≤—Å–∏—á–∫–∏ –¥—Ä—É–≥–∏ —Å–ª—É—á–∞–∏ –≤—Ä—ä—â–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ —Ü–µ–Ω–∞
                return int(base_distance)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–º–µ callback-–∞ –∑–∞ –Ω–∞–º–∞–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ
            priority_non_center_callback_index = routing.RegisterTransitCallback(priority_non_center_callback)
            
            # –ü—Ä–∏–ª–∞–≥–∞–º–µ callback-–∞ –°–ê–ú–û –∑–∞ EXTERNAL_BUS –∏ INTERNAL_BUS –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
            logger.info(f"üöõ –ü—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞ –¥–∞–ª–µ—á–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏ —Å–∞–º–æ –∑–∞ EXTERNAL_BUS –∏ INTERNAL_BUS")
            
            # –ü—Ä–∏–ª–∞–≥–∞–º–µ callback-–∞ –∑–∞ EXTERNAL_BUS –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
            for vehicle_id in data['external_bus_vehicle_ids']:
                routing.SetArcCostEvaluatorOfVehicle(priority_non_center_callback_index, vehicle_id)
                logger.debug(f"  - –ü—Ä–∏–ª–æ–∂–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞ –¥–∞–ª–µ—á–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏ –∑–∞ EXTERNAL_BUS #{vehicle_id}")
            
            # –ü—Ä–∏–ª–∞–≥–∞–º–µ callback-–∞ –∑–∞ INTERNAL_BUS –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
            for vehicle_id in data['internal_bus_vehicle_ids']:
                routing.SetArcCostEvaluatorOfVehicle(priority_non_center_callback_index, vehicle_id)
                logger.debug(f"  - –ü—Ä–∏–ª–æ–∂–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞ –¥–∞–ª–µ—á–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏ –∑–∞ INTERNAL_BUS #{vehicle_id}")
                
            # –ü—Ä–∏–ª–∞–≥–∞–º–µ callback-–∞ –∑–∞ SPECIAL_BUS –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
            for vehicle_id in data['special_bus_vehicle_ids']:
                routing.SetArcCostEvaluatorOfVehicle(priority_non_center_callback_index, vehicle_id)
                logger.debug(f"  - –ü—Ä–∏–ª–æ–∂–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞ –¥–∞–ª–µ—á–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏ –∑–∞ SPECIAL_BUS #{vehicle_id}")
                
            logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞ –¥–∞–ª–µ—á–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏")
            
            # –í—Å–µ –æ—â–µ –¥–æ–±–∞–≤—è–º–µ –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç –∑–∞ –ø—Ä–æ–ø—É—Å–∫–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏, –Ω–æ —Å –ø–æ-–Ω–∏—Å–∫–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
            for node_idx in range(len(self.unique_depots), len(data['distance_matrix'])):
                # –î–æ–±–∞–≤—è–º–µ –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç—Ç–∞ –∑–∞ –ø—Ä–æ–ø—É—Å–∫–∞–Ω–µ, –Ω–æ —Å —É–º–µ—Ä–µ–Ω–∞ –≥–ª–æ–±–∞
                routing.AddDisjunction([manager.NodeToIndex(node_idx)], distance_penalty_disjunction)

            # 5. –ü–†–ò–û–†–ò–¢–ò–ó–ò–†–ê–ù–ï –ù–ê CENTER_BUS –ó–ê –¶–ï–ù–¢–™–† –ó–û–ù–ê–¢–ê
            if self.center_zone_customers and data['center_bus_vehicle_ids']:
                logger.info("üéØ –ü—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞ CENTER_BUS –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞")
                
                # –°—ä–∑–¥–∞–≤–∞–º–µ callback –∑–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ CENTER_BUS
                def center_bus_priority_callback(from_index, to_index):
                    from_node = manager.IndexToNode(from_index)
                    to_node = manager.IndexToNode(to_index)
                    
                    # –ê–∫–æ —Ç–æ–≤–∞ –µ –∫–ª–∏–µ–Ω—Ç –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞
                    if to_node >= len(self.unique_depots):
                        customer_index = to_node - len(self.unique_depots)
                        customer = self.customers[customer_index]
                        
                        if customer.id in {c.id for c in self.center_zone_customers}:
                            # –ù–∞–º–∞–ª—è–≤–∞–º–µ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ –∑–∞ CENTER_BUS —Å 50%
                            return int(self.distance_matrix.distances[from_node][to_node] * 0.5)
                    
                    return int(self.distance_matrix.distances[from_node][to_node])
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–º–µ callback-–∞ –∑–∞ CENTER_BUS –ø—Ä–µ–≤–æ–∑–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
                center_bus_callback_index = routing.RegisterTransitCallback(center_bus_priority_callback)
                
                for vehicle_id in data['center_bus_vehicle_ids']:
                    routing.SetArcCostEvaluatorOfVehicle(center_bus_callback_index, vehicle_id)
            
            # 6. –ì–õ–û–ë–ê –ó–ê –û–°–¢–ê–ù–ê–õ–ò–¢–ï –ë–£–°–û–í–ï –ó–ê –í–õ–ò–ó–ê–ù–ï –í –¶–ï–ù–¢–™–†–ê
            if data['external_bus_vehicle_ids'] and self.location_config and self.location_config.enable_center_zone_restrictions:
                logger.info("üö´ –ü—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ –≥–ª–æ–±–∞ –∑–∞ EXTERNAL_BUS –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞")
                
                # –°—ä–∑–¥–∞–≤–∞–º–µ callback –∑–∞ –≥–ª–æ–±–∞ –Ω–∞ EXTERNAL_BUS
                def external_bus_penalty_callback(from_index, to_index):
                    from_node = manager.IndexToNode(from_index)
                    to_node = manager.IndexToNode(to_index)
                    
                    # –ê–∫–æ —Ç–æ–≤–∞ –µ –∫–ª–∏–µ–Ω—Ç –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞
                    if to_node >= len(self.unique_depots):
                        customer_index = to_node - len(self.unique_depots)
                        customer = self.customers[customer_index]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—ä—Ç –µ –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞
                        if customer.coordinates and self.location_config:
                            distance_to_center = calculate_distance_km(
                                customer.coordinates, 
                                self.location_config.center_location
                            )
                            if distance_to_center <= self.location_config.center_zone_radius_km:
                                # –£–≤–µ–ª–∏—á–∞–≤–∞–º–µ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ –∑–∞ EXTERNAL_BUS —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª
                                multiplier = self.location_config.external_bus_center_penalty_multiplier if self.location_config else 10.0
                                return int(self.distance_matrix.distances[from_node][to_node] * multiplier)
                    
                    return int(self.distance_matrix.distances[from_node][to_node])
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–º–µ callback-–∞ –∑–∞ EXTERNAL_BUS –ø—Ä–µ–≤–æ–∑–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
                external_bus_callback_index = routing.RegisterTransitCallback(external_bus_penalty_callback)
                
                for vehicle_id in data['external_bus_vehicle_ids']:
                    routing.SetArcCostEvaluatorOfVehicle(external_bus_callback_index, vehicle_id)
            
            # 7. –ì–õ–û–ë–ê –ó–ê INTERNAL_BUS –ó–ê –í–õ–ò–ó–ê–ù–ï –í –¶–ï–ù–¢–™–†–ê
            if data['internal_bus_vehicle_ids'] and self.location_config and self.location_config.enable_center_zone_restrictions:
                logger.info("‚ö†Ô∏è –ü—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ –≥–ª–æ–±–∞ –∑–∞ INTERNAL_BUS –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞")
                
                # –°—ä–∑–¥–∞–≤–∞–º–µ callback –∑–∞ –≥–ª–æ–±–∞ –Ω–∞ INTERNAL_BUS
                def internal_bus_penalty_callback(from_index, to_index):
                    from_node = manager.IndexToNode(from_index)
                    to_node = manager.IndexToNode(to_index)
                    
                    # –ê–∫–æ —Ç–æ–≤–∞ –µ –∫–ª–∏–µ–Ω—Ç –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞
                    if to_node >= len(self.unique_depots):
                        customer_index = to_node - len(self.unique_depots)
                        customer = self.customers[customer_index]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—ä—Ç –µ –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞
                        if customer.coordinates and self.location_config:
                            distance_to_center = calculate_distance_km(
                                customer.coordinates, 
                                self.location_config.center_location
                            )
                            if distance_to_center <= self.location_config.center_zone_radius_km:
                                # –£–≤–µ–ª–∏—á–∞–≤–∞–º–µ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ –∑–∞ INTERNAL_BUS —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª
                                multiplier = self.location_config.internal_bus_center_penalty_multiplier if self.location_config else 2.0
                                return int(self.distance_matrix.distances[from_node][to_node] * multiplier)
                    
                    return int(self.distance_matrix.distances[from_node][to_node])
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–º–µ callback-–∞ –∑–∞ INTERNAL_BUS –ø—Ä–µ–≤–æ–∑–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
                internal_bus_callback_index = routing.RegisterTransitCallback(internal_bus_penalty_callback)
                
                for vehicle_id in data['internal_bus_vehicle_ids']:
                    routing.SetArcCostEvaluatorOfVehicle(internal_bus_callback_index, vehicle_id)
                    
            # 8. –ì–õ–û–ë–ê –ó–ê SPECIAL_BUS –ó–ê –í–õ–ò–ó–ê–ù–ï –í –¶–ï–ù–¢–™–†–ê
            if data['special_bus_vehicle_ids'] and self.location_config and self.location_config.enable_center_zone_restrictions:
                logger.info("üî∂ –ü—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ –≥–ª–æ–±–∞ –∑–∞ SPECIAL_BUS –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞")
                
                # –°—ä–∑–¥–∞–≤–∞–º–µ callback –∑–∞ –≥–ª–æ–±–∞ –Ω–∞ SPECIAL_BUS
                def special_bus_penalty_callback(from_index, to_index):
                    from_node = manager.IndexToNode(from_index)
                    to_node = manager.IndexToNode(to_index)
                    
                    # –ê–∫–æ —Ç–æ–≤–∞ –µ –∫–ª–∏–µ–Ω—Ç –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞
                    if to_node >= len(self.unique_depots):
                        customer_index = to_node - len(self.unique_depots)
                        customer = self.customers[customer_index]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—ä—Ç –µ –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞
                        if customer.coordinates and self.location_config:
                            distance_to_center = calculate_distance_km(
                                customer.coordinates, 
                                self.location_config.center_location
                            )
                            if distance_to_center <= self.location_config.center_zone_radius_km:
                                # –£–≤–µ–ª–∏—á–∞–≤–∞–º–µ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ –∑–∞ SPECIAL_BUS —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª
                                multiplier = self.location_config.special_bus_center_penalty_multiplier if self.location_config else 7.0
                                return int(self.distance_matrix.distances[from_node][to_node] * multiplier)
                    
                    return int(self.distance_matrix.distances[from_node][to_node])
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–º–µ callback-–∞ –∑–∞ SPECIAL_BUS –ø—Ä–µ–≤–æ–∑–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
                special_bus_callback_index = routing.RegisterTransitCallback(special_bus_penalty_callback)
                
                for vehicle_id in data['special_bus_vehicle_ids']:
                    routing.SetArcCostEvaluatorOfVehicle(special_bus_callback_index, vehicle_id)
            
            # 9. –ü–ê–†–ê–ú–ï–¢–†–ò –ù–ê –¢–™–†–°–ï–ù–ï (–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏)
            logger.info("–ò–∑–ø–æ–ª–∑–≤–∞—Ç —Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ.")
            search_parameters = pywrapcp.DefaultRoutingSearchParameters()
            search_parameters.first_solution_strategy = (
                routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC
            )
            search_parameters.local_search_metaheuristic = (
                routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH
            )
            search_parameters.time_limit.seconds = self.config.time_limit_seconds
            search_parameters.log_search = self.config.log_search

            # 10. –†–ï–®–ê–í–ê–ù–ï
            logger.info(f"üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–º —Ä–µ—à–∞–≤–∞–Ω–µ —Å –ø—ä–ª–Ω–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–≤—Ä–µ–º–µ–≤–∏ –ª–∏–º–∏—Ç: {self.config.time_limit_seconds}s)...")
            solution = routing.SolveWithParameters(search_parameters)
            
            # 11. –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê –†–ï–®–ï–ù–ò–ï–¢–û
            if solution:
                return self._extract_solution(manager, routing, solution, data)
            else:
                logger.error("‚ùå OR-Tools –Ω–µ –Ω–∞–º–µ—Ä–∏ —Ä–µ—à–µ–Ω–∏–µ!")
                return self._create_empty_solution()
                
        except Exception as e:
            logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ OR-Tools solver: {e}", exc_info=True)
            return self._create_empty_solution()

    def _create_data_model(self):
        """
        –ò–∑—Ü—è–ª–æ –ø—Ä–µ–Ω–∞–ø–∏—Å–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞ –¥–∞ —Å–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–∞, —á–µ –ß–ï–¢–ò–†–ò–¢–ï —Ç–≤—ä—Ä–¥–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        (–û–±–µ–º, –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ, –ë—Ä–æ–π –∫–ª–∏–µ–Ω—Ç–∏, –í—Ä–µ–º–µ) —Å–µ —á–µ—Ç–∞—Ç –∏ –ø—Ä–∏–ª–∞–≥–∞—Ç –°–¢–†–ò–ö–¢–ù–û
        –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–∏—è —Ñ–∞–π–ª, –±–µ–∑ –≥—Ä–µ—à–∫–∏ –∏–ª–∏ —Å–≤–æ–µ–≤–æ–ª–∏—è.
        """
        logger.info("--- –°–™–ó–î–ê–í–ê–ù–ï –ù–ê DATA MODEL (–°–¢–†–ò–ö–¢–ï–ù –†–ï–ñ–ò–ú) ---")
        data = {}
        data['distance_matrix'] = self.distance_matrix.distances
        data['demands'] = [0] * len(self.unique_depots) + [int(c.volume * 100) for c in self.customers]
        
        base_service_time = next((v.service_time_minutes for v in self.vehicle_configs if v.enabled), 15) * 60
        data['service_times'] = [0] * len(self.unique_depots) + [base_service_time] * len(self.customers)
        
        data['num_vehicles'] = sum(v.count for v in self.vehicle_configs if v.enabled)
        logger.info(f"  - –û–±—â–æ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞: {data['num_vehicles']}")
        data['depot_indices'] = list(range(len(self.unique_depots)))

        vehicle_capacities = []
        vehicle_max_distances = []
        vehicle_max_stops = []
        vehicle_max_times = []
        vehicle_starts = []
        vehicle_ends = []
        
        logger.info("  - –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç–≤—ä—Ä–¥–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞...")
        
        # –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–∞–º–µ CENTER_BUS –ø—Ä–µ–≤–æ–∑–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
        center_bus_vehicle_ids = []
        external_bus_vehicle_ids = []
        internal_bus_vehicle_ids = []
        special_bus_vehicle_ids = []
        vehicle_id = 0
        
        logger.info("  - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –¥–µ–ø–∞ –∑–∞ –ø—Ä–µ–≤–æ–∑–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:")
        
        for v_config in self.vehicle_configs:
            if v_config.enabled:
                depot_index = self._get_depot_index_for_vehicle(v_config)
                depot_location = self.unique_depots[depot_index]
                
                logger.info(f"    {v_config.vehicle_type.value}: –¥–µ–ø–æ {depot_index} ({depot_location})")
                
                for _ in range(v_config.count):
                    # –ó–∞–ø–∏—Å–≤–∞–º–µ ID-—Ç–∞—Ç–∞ –Ω–∞ CENTER_BUS –ø—Ä–µ–≤–æ–∑–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
                    if v_config.vehicle_type == VehicleType.CENTER_BUS:
                        center_bus_vehicle_ids.append(vehicle_id)
                    elif v_config.vehicle_type == VehicleType.EXTERNAL_BUS:
                        external_bus_vehicle_ids.append(vehicle_id)
                    elif v_config.vehicle_type == VehicleType.INTERNAL_BUS:
                        internal_bus_vehicle_ids.append(vehicle_id)
                    elif v_config.vehicle_type == VehicleType.SPECIAL_BUS:
                        special_bus_vehicle_ids.append(vehicle_id)
                    
                    # 1. –û–±–µ–º (Capacity) - —Å—Ç—Ä–∏–∫—Ç–Ω–æ
                    vehicle_capacities.append(int(v_config.capacity * 100))
                    
                    # 2. –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ (Distance) - —Å—Ç—Ä–∏–∫—Ç–Ω–æ
                    max_dist = int(v_config.max_distance_km * 1000) if v_config.max_distance_km else 999999999
                    vehicle_max_distances.append(max_dist)
                    
                    # 3. –ë—Ä–æ–π –∫–ª–∏–µ–Ω—Ç–∏ (Stops) - —Å—Ç—Ä–∏–∫—Ç–Ω–æ
                    max_stops = v_config.max_customers_per_route if v_config.max_customers_per_route is not None else len(self.customers) + 1
                    vehicle_max_stops.append(max_stops)

                    # 4. –í—Ä–µ–º–µ (Time) - —Å—Ç—Ä–∏–∫—Ç–Ω–æ
                    vehicle_max_times.append(int(v_config.max_time_hours * 3600))
                    
                    vehicle_starts.append(depot_index)
                    vehicle_ends.append(depot_index)
                    vehicle_id += 1
        
        data['vehicle_capacities'] = vehicle_capacities
        data['vehicle_max_distances'] = vehicle_max_distances
        data['vehicle_max_stops'] = vehicle_max_stops
        data['vehicle_max_times'] = vehicle_max_times
        data['vehicle_starts'] = vehicle_starts
        data['vehicle_ends'] = vehicle_ends
        data['depot'] = 0 
        data['center_bus_vehicle_ids'] = center_bus_vehicle_ids
        data['external_bus_vehicle_ids'] = external_bus_vehicle_ids
        data['internal_bus_vehicle_ids'] = internal_bus_vehicle_ids
        data['special_bus_vehicle_ids'] = special_bus_vehicle_ids
        
        logger.info(f"  - –ö–∞–ø–∞—Ü–∏—Ç–µ—Ç–∏: {data['vehicle_capacities']}")
        logger.info(f"  - –ú–∞–∫—Å. —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è (–º): {data['vehicle_max_distances']}")
        logger.info(f"  - –ú–∞–∫—Å. —Å–ø–∏—Ä–∫–∏: {data['vehicle_max_stops']}")
        logger.info(f"  - –ú–∞–∫—Å. –≤—Ä–µ–º–µ–Ω–∞ (—Å–µ–∫): {data['vehicle_max_times']}")
        logger.info(f"  - CENTER_BUS –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞: {center_bus_vehicle_ids}")
        logger.info(f"  - EXTERNAL_BUS –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞: {external_bus_vehicle_ids}")
        logger.info(f"  - INTERNAL_BUS –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞: {internal_bus_vehicle_ids}")
        logger.info(f"  - SPECIAL_BUS –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞: {special_bus_vehicle_ids}")
        logger.info("--- DATA MODEL –°–™–ó–î–ê–î–ï–ù ---")
        return data

    def _get_depot_index_for_vehicle(self, vehicle_config: VehicleConfig) -> int:
        """–ù–∞–º–∏—Ä–∞ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ –¥–µ–ø–æ—Ç–æ –∑–∞ –¥–∞–¥–µ–Ω–æ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ."""
        if vehicle_config.start_location and vehicle_config.start_location in self.unique_depots:
            return self.unique_depots.index(vehicle_config.start_location)
        # –í—Ä—ä—â–∞–º–µ –æ—Å–Ω–æ–≤–Ω–æ—Ç–æ –¥–µ–ø–æ –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ
        return 0

    def _extract_solution(self, manager, routing, solution, data) -> CVRPSolution:
        """–ò–∑–≤–ª–∏—á–∞ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ –æ—Ç OR-Tools –∏ –≥–æ –ø–æ–ø—ä–ª–≤–∞ –≤ –Ω–∞—à–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏."""
        logger.info("--- –ò–ó–í–õ–ò–ß–ê–ù–ï –ù–ê –†–ï–®–ï–ù–ò–ï ---")
        start_time = time.time()
        
        # –î–∏—Ä–µ–∫—Ç–Ω–æ –≤–∑–∏–º–∞–º–µ "–≤—Ä–µ–º–µ–≤–æ—Ç–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ" –æ—Ç —Å–æ–ª–≤—ä—Ä–∞.
        # –¢–æ–≤–∞ –µ "–∏–∑—Ç–æ—á–Ω–∏–∫—ä—Ç –Ω–∞ –∏—Å—Ç–∏–Ω–∞—Ç–∞" –∑–∞ –≤—Ä–µ–º–µ—Ç–æ.
        time_dimension = routing.GetDimensionOrDie("Time")
        
        routes = []
        total_distance = 0
        total_time_seconds = 0
        
        num_depots = len(self.unique_depots)
        all_serviced_customer_indices = set()
        
        for vehicle_id in range(routing.vehicles()):
            route_customers = []
            route_distance = 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–º–µ –∫–æ–µ –µ –¥–µ–ø–æ—Ç–æ –∑–∞ —Ç–æ–∑–∏ vehicle —Å–ø–æ—Ä–µ–¥ data model
            vehicle_config = self._get_vehicle_config_for_id(vehicle_id)
            
            # –í–∑–µ–º–∞–º–µ –¥–µ–ø–æ—Ç–æ –¥–∏—Ä–µ–∫—Ç–Ω–æ –æ—Ç —Ä–µ—à–µ–Ω–∏–µ—Ç–æ –Ω–∞ OR-Tools
            start_node = manager.IndexToNode(routing.Start(vehicle_id))
            
            if start_node >= num_depots:
                # –¢–æ–≤–∞ –Ω–µ –±–∏ —Ç—Ä—è–±–≤–∞–ª–æ –¥–∞ —Å–µ —Å–ª—É—á–≤–∞, —Ç—ä–π –∫–∞—Ç–æ –≤—Å–∏—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏ —Ç—Ä—è–±–≤–∞ –¥–∞ –∑–∞–ø–æ—á–≤–∞—Ç –æ—Ç –¥–µ–ø–æ.
                # –ù–æ –∑–∞ –≤—Å–µ–∫–∏ —Å–ª—É—á–∞–π, –ª–æ–≥–≤–∞–º–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–º–µ —Ç–æ–∑–∏ –∞–≤—Ç–æ–±—É—Å.
                logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞: –ê–≤—Ç–æ–±—É—Å {vehicle_id} –∑–∞–ø–æ—á–≤–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç (node {start_node}), –∞ –Ω–µ –æ—Ç –¥–µ–ø–æ. –ú–∞—Ä—à—Ä—É—Ç—ä—Ç —Å–µ –∏–≥–Ω–æ—Ä–∏—Ä–∞.")
                continue

            depot_location = self.unique_depots[start_node]
            
            logger.info(f"Extracting route for vehicle {vehicle_id}")

            index = routing.Start(vehicle_id)
            max_iterations = len(self.customers) + 10  # –ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–∏: –±—Ä–æ–π –∫–ª–∏–µ–Ω—Ç–∏ + –º–∞–ª–∫–æ –∑–∞–ø–∞—Å
            iteration_count = 0

            while not routing.IsEnd(index):
                iteration_count += 1
                if iteration_count > max_iterations:
                    logger.error(f"‚ùå –ë–µ–∑–∫—Ä–∞–µ–Ω —Ü–∏–∫—ä–ª –æ—Ç–∫—Ä–∏—Ç –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç –∑–∞ vehicle {vehicle_id}. –ü—Ä–µ–∫—Ä–∞—Ç—è–≤–∞–º.")
                    break

                node_index = manager.IndexToNode(index)
                # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Ç–æ–≤–∞ –µ –∫–ª–∏–µ–Ω—Ç (–Ω–µ –¥–µ–ø–æ)
                if node_index >= num_depots:  # –ö–ª–∏–µ–Ω—Ç–∏—Ç–µ —Å–∞ —Å–ª–µ–¥ –¥–µ–ø–∞—Ç–∞ –≤ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞
                    # Customer index –µ node_index - –±—Ä–æ–π –¥–µ–ø–∞
                    customer_index = node_index - num_depots
                    if 0 <= customer_index < len(self.customers):
                        customer = self.customers[customer_index]
                        route_customers.append(customer)
                        all_serviced_customer_indices.add(customer_index)
                
                previous_index = index
                index = solution.Value(routing.NextVar(index))
                
                # –í–∑–µ–º–∞–º–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–Ω–∏—Ç–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –æ—Ç –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞
                from_node = manager.IndexToNode(previous_index)
                to_node = manager.IndexToNode(index)
                actual_distance = self.distance_matrix.distances[from_node][to_node]
                
                route_distance += actual_distance
            
            if route_customers:
                # –ö–õ–Æ–ß–û–í–ê –ü–†–û–ú–Ø–ù–ê: –í–∑–∏–º–∞–º–µ –≤—Ä–µ–º–µ—Ç–æ –¥–∏—Ä–µ–∫—Ç–Ω–æ –æ—Ç —Ä–µ—à–µ–Ω–∏–µ—Ç–æ –Ω–∞ —Å–æ–ª–≤—ä—Ä–∞.
                # –¢–æ–≤–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–∞ 100% –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç –º–µ–∂–¥—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –æ—Ç—á–µ—Ç.
                route_end_index = routing.End(vehicle_id)
                route_time_seconds = solution.Value(time_dimension.CumulVar(route_end_index))

                route = Route(
                    vehicle_type=vehicle_config.vehicle_type,
                    vehicle_id=vehicle_id,
                    customers=route_customers,
                    depot_location=depot_location,
                    total_distance_km=route_distance / 1000,
                    total_time_minutes=route_time_seconds / 60, # –ü—Ä–µ–≤—Ä—ä—â–∞–º–µ –æ—Ç —Å–µ–∫—É–Ω–¥–∏ –≤ –º–∏–Ω—É—Ç–∏
                    total_volume=sum(c.volume for c in route_customers),
                    is_feasible=True
                )
                
                # –í—Ä—ä—â–∞–º–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏—Ç–µ, –∑–∞ –¥–∞ —Å–º–µ —Å–∏–≥—É—Ä–Ω–∏, —á–µ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ —Å–ø–∞–∑–≤–∞ –ø—Ä–∞–≤–∏–ª–∞—Ç–∞
                if (vehicle_config.max_distance_km and 
                    route.total_distance_km > vehicle_config.max_distance_km):
                    logger.warning(f"‚ö†Ô∏è –ê–≤—Ç–æ–±—É—Å {vehicle_id} ({vehicle_config.vehicle_type.value}) "
                                  f"–Ω–∞–¥–≤–∏—à–∞–≤–∞ distance –ª–∏–º–∏—Ç: {route.total_distance_km:.1f}–∫–º > "
                                  f"{vehicle_config.max_distance_km}–∫–º")
                    route.is_feasible = False
                
                if route.total_volume > vehicle_config.capacity:
                    logger.warning(f"‚ö†Ô∏è –ê–≤—Ç–æ–±—É—Å {vehicle_id} ({vehicle_config.vehicle_type.value}) "
                                  f"–Ω–∞–¥–≤–∏—à–∞–≤–∞ capacity –ª–∏–º–∏—Ç: {route.total_volume:.1f}—Å—Ç > "
                                  f"{vehicle_config.capacity}—Å—Ç")
                    route.is_feasible = False

                if (vehicle_config.max_customers_per_route and
                    len(route.customers) > vehicle_config.max_customers_per_route):
                     logger.warning(f"‚ö†Ô∏è –ê–≤—Ç–æ–±—É—Å {vehicle_id} ({vehicle_config.vehicle_type.value}) "
                                   f"–Ω–∞–¥–≤–∏—à–∞–≤–∞ –ª–∏–º–∏—Ç–∞ –∑–∞ –∫–ª–∏–µ–Ω—Ç–∏: {len(route.customers)} > "
                                   f"{vehicle_config.max_customers_per_route}")
                     route.is_feasible = False

                if route.total_time_minutes > (vehicle_config.max_time_hours * 60) + 1: # +1 –∑–∞ –∑–∞–∫—Ä—ä–≥–ª–µ–Ω–∏—è
                    logger.warning(f"‚ö†Ô∏è –ê–≤—Ç–æ–±—É—Å {vehicle_id} ({vehicle_config.vehicle_type.value}) "
                                  f"–Ω–∞–¥–≤–∏—à–∞–≤–∞ time –ª–∏–º–∏—Ç: {route.total_time_minutes:.1f}–º–∏–Ω > "
                                  f"{vehicle_config.max_time_hours * 60}–º–∏–Ω")
                    route.is_feasible = False
                
                routes.append(route)
                total_distance += route_distance
                total_time_seconds += route_time_seconds
        
        logger.info(f"  - –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏ –æ—Ç–Ω–µ: {time.time() - start_time:.2f} —Å–µ–∫.")
        
        # –ù–û–í–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–ù–û–°–¢: –§–∏–Ω–∞–ª–µ–Ω —Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ –æ—Ç –¥–µ–ø–æ—Ç–æ
        if self.config.enable_final_depot_reconfiguration:
            logger.info("üîÑ –ü—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ —Ñ–∏–Ω–∞–ª–Ω–∞ —Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ –æ—Ç –¥–µ–ø–æ—Ç–æ...")
            routes = self._reconfigure_routes_from_depot(routes)
        else:
            logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ –Ω–∞ —Ñ–∏–Ω–∞–ª–Ω–∞ —Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∏–∑–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞)")
        
        # –ù–∞–º–∏—Ä–∞–º–µ –ø—Ä–æ–ø—É—Å–Ω–∞—Ç–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∏
        start_dropped_time = time.time()
        all_customer_indices = set(range(len(self.customers)))
        dropped_customer_indices = all_customer_indices - all_serviced_customer_indices
        dropped_customers = [self.customers[i] for i in dropped_customer_indices]
        
        if dropped_customers:
            logger.warning(f"‚ö†Ô∏è OR-Tools –ø—Ä–æ–ø—É—Å–Ω–∞ {len(dropped_customers)} –∫–ª–∏–µ–Ω—Ç–∞, –∑–∞ –¥–∞ –Ω–∞–º–µ—Ä–∏ —Ä–µ—à–µ–Ω–∏–µ:")
            # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ –æ–±–µ–º –∑–∞ –ø–æ-—è—Å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—è–Ω–µ
            dropped_customers.sort(key=lambda c: c.volume, reverse=True)
            for cust in dropped_customers[:10]: # –ø–æ–∫–∞–∑–≤–∞–º–µ –ø—ä—Ä–≤–∏—Ç–µ 10
                logger.warning(f"   - –ü—Ä–æ–ø—É—Å–Ω–∞—Ç: {cust.name} (–æ–±–µ–º: {cust.volume:.1f} —Å—Ç.)")
            if len(dropped_customers) > 10:
                logger.warning(f"   - ... –∏ –æ—â–µ {len(dropped_customers) - 10}")
        
        logger.info(f"  - –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–Ω–∞—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∏ –æ—Ç–Ω–µ: {time.time() - start_dropped_time:.2f} —Å–µ–∫.")

        total_served_volume = sum(r.total_volume for r in routes)

        cvrp_solution = CVRPSolution(
            routes=routes,
            dropped_customers=dropped_customers,
            total_distance_km=total_distance / 1000,
            total_time_minutes=total_time_seconds / 60,
            total_vehicles_used=len(routes),
            fitness_score=float(solution.ObjectiveValue()),
            is_feasible=True, # –©–µ —Å–µ –æ–±–Ω–æ–≤–∏ –ø–æ-–¥–æ–ª—É
            total_served_volume=total_served_volume
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—â–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ
        invalid_routes = [r for r in routes if not r.is_feasible]
        is_solution_feasible = not invalid_routes and not dropped_customers
        cvrp_solution.is_feasible = is_solution_feasible
        
        logger.info(f"--- –†–ï–®–ï–ù–ò–ï–¢–û –ò–ó–í–õ–ï–ß–ï–ù–û ({time.time() - start_time:.2f} —Å–µ–∫.) ---")
        return cvrp_solution

    def _get_vehicle_config_for_id(self, vehicle_id: int) -> VehicleConfig:
        """–ù–∞–º–∏—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –∑–∞ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ –ø–æ ID"""
        current_id = 0
        for vehicle_config in self.vehicle_configs:
            if not vehicle_config.enabled:
                continue
            if current_id <= vehicle_id < current_id + vehicle_config.count:
                return vehicle_config
            current_id += vehicle_config.count
        
        # Fallback –∫—ä–º –ø—ä—Ä–≤–æ—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ
        for vehicle_config in self.vehicle_configs:
            if vehicle_config.enabled:
                return vehicle_config
        
        raise ValueError("–ù—è–º–∞ –≤–∫–ª—é—á–µ–Ω–∏ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
    
    def _create_empty_solution(self) -> CVRPSolution:
        """–°—ä–∑–¥–∞–≤–∞ –ø—Ä–∞–∑–Ω–æ —Ä–µ—à–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–π –Ω–∞ –≥—Ä–µ—à–∫–∞."""
        return CVRPSolution(routes=[], dropped_customers=[], total_distance_km=0,
                            total_time_minutes=0, total_vehicles_used=0,
                            fitness_score=float('inf'), is_feasible=False, total_served_volume=0)

    def _reconfigure_routes_from_depot(self, routes: List[Route]) -> List[Route]:
        """
        –†–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞ –≤—Å–∏—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏ –¥–∞ –∑–∞–ø–æ—á–≤–∞—Ç –æ—Ç –¥–µ–ø–æ—Ç–æ.
        –¢–æ–≤–∞ –µ —Ñ–∏–Ω–∞–ª–Ω–∞ —Å—Ç—ä–ø–∫–∞ —Å–ª–µ–¥ –∫–∞—Ç–æ OR-Tools –Ω–∞–º–µ—Ä–∏ —Ä–µ—à–µ–Ω–∏–µ.
        """
        logger.info("üîÑ –†–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ –æ—Ç –¥–µ–ø–æ—Ç–æ...")
        
        # –í–∑–∏–º–∞–º–µ –≥–ª–∞–≤–Ω–æ—Ç–æ –¥–µ–ø–æ (–∏–Ω–¥–µ–∫—Å 0)
        main_depot = self.unique_depots[0]
        
        reconfigured_routes = []
        
        for route in routes:
            if not route.customers:
                continue
                
            # –ù–û–í–ê –õ–û–ì–ò–ö–ê: –ü—Ä–µ–∏–∑—á–∏—Å–ª—è–≤–∞–º–µ –æ–ø—Ç–∏–º–∞–ª–Ω–∏—è —Ä–µ–¥ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ –æ—Ç –¥–µ–ø–æ—Ç–æ
            optimized_customers = self._optimize_route_from_depot(route.customers, main_depot)
            
            # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –Ω–æ–≤–∏—Ç–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∞ –æ—Ç –¥–µ–ø–æ—Ç–æ
            new_distance_km, new_time_minutes = self._calculate_route_from_depot(
                optimized_customers, main_depot
            )
            
            # –°—ä–∑–¥–∞–≤–∞–º–µ –Ω–æ–≤ –º–∞—Ä—à—Ä—É—Ç —Å –¥–µ–ø–æ—Ç–æ –∫–∞—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞ —Ç–æ—á–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω —Ä–µ–¥
            reconfigured_route = Route(
                vehicle_type=route.vehicle_type,
                vehicle_id=route.vehicle_id,
                customers=optimized_customers,  # –û–ü–¢–ò–ú–ò–ó–ò–†–ê–ù —Ä–µ–¥ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ
                depot_location=main_depot,  # –í–ò–ù–ê–ì–ò –¥–µ–ø–æ—Ç–æ
                total_distance_km=new_distance_km,
                total_time_minutes=new_time_minutes,
                total_volume=sum(c.volume for c in optimized_customers),
                is_feasible=True
            )
            
            # –í–∞–ª–∏–¥–∏—Ä–∞–º–µ –Ω–æ–≤–∏—è –º–∞—Ä—à—Ä—É—Ç
            vehicle_config = self._get_vehicle_config_for_id(route.vehicle_id)
            
            # –°—Ä–∞–≤–Ω—è–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—Ç–µ –∏ –Ω–æ–≤–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
            logger.info(f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞ –º–∞—Ä—à—Ä—É—Ç {route.vehicle_id} ({vehicle_config.vehicle_type.value}):")
            logger.info(f"  - –û—Ä–∏–≥–∏–Ω–∞–ª–Ω–æ: {route.total_distance_km:.1f}–∫–º, {route.total_time_minutes:.1f}–º–∏–Ω")
            logger.info(f"  - –û—Ç –¥–µ–ø–æ—Ç–æ: {new_distance_km:.1f}–∫–º, {new_time_minutes:.1f}–º–∏–Ω")
            logger.info(f"  - –†–∞–∑–ª–∏–∫–∞: +{new_distance_km - route.total_distance_km:.1f}–∫–º, +{new_time_minutes - route.total_time_minutes:.1f}–º–∏–Ω")
            
            if not self._validate_reconfigured_route(reconfigured_route, vehicle_config):
                logger.warning(f"‚ö†Ô∏è –†–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç {route.vehicle_id} –ù–ï —Å–ø–∞–∑–≤–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ç–∞!")
                reconfigured_route.is_feasible = False
            else:
                logger.info(f"‚úÖ –†–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç {route.vehicle_id} —Å–ø–∞–∑–≤–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ç–∞")
            
            reconfigured_routes.append(reconfigured_route)
        
        logger.info(f"‚úÖ –†–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω–∏ {len(reconfigured_routes)} –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç –¥–µ–ø–æ—Ç–æ")
        return reconfigured_routes
    
    def _optimize_route_from_depot(self, customers: List[Customer], depot_location: Tuple[float, float]) -> List[Customer]:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–∞ —Ä–µ–¥–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ, –∑–∞–ø–æ—á–≤–∞–π–∫–∏ –æ—Ç –¥–µ–ø–æ—Ç–æ.
        –ò–∑–ø–æ–ª–∑–≤–∞ greedy –∞–ª–≥–æ—Ä–∏—Ç—ä–º –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–∞–π-–±–ª–∏–∑–∫–∏—è –∫–ª–∏–µ–Ω—Ç.
        """
        if not customers:
            return []
        
        # –ù–∞–º–∏—Ä–∞–º–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ –¥–µ–ø–æ—Ç–æ –≤ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞
        depot_index = 0  # –í–∏–Ω–∞–≥–∏ –∏–Ω–¥–µ–∫—Å 0 –µ –≥–ª–∞–≤–Ω–æ—Ç–æ –¥–µ–ø–æ
        
        optimized_customers = []
        remaining_customers = customers.copy()
        current_node = depot_index
        
        while remaining_customers:
            # –ù–∞–º–∏—Ä–∞–º–µ –Ω–∞–π-–±–ª–∏–∑–∫–∏—è –∫–ª–∏–µ–Ω—Ç –æ—Ç —Ç–µ–∫—É—â–∏—è node
            min_distance = float('inf')
            closest_customer = None
            closest_index = -1
            
            for i, customer in enumerate(remaining_customers):
                # –ù–∞–º–∏—Ä–∞–º–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞
                customer_index = len(self.unique_depots) + self.customers.index(customer)
                
                # –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–∏—è node –¥–æ –∫–ª–∏–µ–Ω—Ç–∞
                distance = self.distance_matrix.distances[current_node][customer_index]
                
                if distance < min_distance:
                    min_distance = distance
                    closest_customer = customer
                    closest_index = i
            
            if closest_customer:
                optimized_customers.append(closest_customer)
                remaining_customers.pop(closest_index)
                
                # –û–±–Ω–æ–≤—è–≤–∞–º–µ —Ç–µ–∫—É—â–∏—è node
                customer_index = len(self.unique_depots) + self.customers.index(closest_customer)
                current_node = customer_index
        
        logger.debug(f"  - –û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω —Ä–µ–¥ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ: {[c.name for c in optimized_customers]}")
        return optimized_customers
    
    def _calculate_route_from_depot(self, customers: List[Customer], depot_location: Tuple[float, float]) -> Tuple[float, float]:
        """
        –ò–∑—á–∏—Å–ª—è–≤–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ –∑–∞ –º–∞—Ä—à—Ä—É—Ç, –∑–∞–ø–æ—á–≤–∞—â –æ—Ç –¥–µ–ø–æ—Ç–æ.
        """
        if not customers:
            return 0.0, 0.0
        
        total_distance = 0.0
        total_time = 0.0
        
        # –ù–∞–º–∏—Ä–∞–º–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ –¥–µ–ø–æ—Ç–æ –≤ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞
        depot_index = 0  # –í–∏–Ω–∞–≥–∏ –∏–Ω–¥–µ–∫—Å 0 –µ –≥–ª–∞–≤–Ω–æ—Ç–æ –¥–µ–ø–æ
        
        # –í–∑–∏–º–∞–º–µ service time –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        service_time_minutes = next((v.service_time_minutes for v in self.vehicle_configs if v.enabled), 15)
        service_time_seconds = service_time_minutes * 60
        
        # –û—Ç –¥–µ–ø–æ –¥–æ –ø—ä—Ä–≤–∏—è –∫–ª–∏–µ–Ω—Ç
        current_node = depot_index
        for customer in customers:
            # –ù–∞–º–∏—Ä–∞–º–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞
            customer_index = len(self.unique_depots) + self.customers.index(customer)
            
            # –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ –æ—Ç —Ç–µ–∫—É—â–∏—è node –¥–æ –∫–ª–∏–µ–Ω—Ç–∞
            distance = self.distance_matrix.distances[current_node][customer_index]
            duration = self.distance_matrix.durations[current_node][customer_index]
            
            total_distance += distance
            total_time += duration
            
            # –í—Ä–µ–º–µ –∑–∞ –æ–±—Å–ª—É–∂–≤–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ (—Å–∞–º–æ –∑–∞ –∫–ª–∏–µ–Ω—Ç–∏, –Ω–µ –∑–∞ –¥–µ–ø–æ)
            total_time += service_time_seconds
            
            current_node = customer_index
        
        # –û—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—è –∫–ª–∏–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –¥–µ–ø–æ—Ç–æ
        distance = self.distance_matrix.distances[current_node][depot_index]
        duration = self.distance_matrix.durations[current_node][depot_index]
        
        total_distance += distance
        total_time += duration
        
        logger.debug(f"  - –ò–∑—á–∏—Å–ª–µ–Ω–æ –æ—Ç –¥–µ–ø–æ—Ç–æ: {total_distance/1000:.1f}–∫–º, {total_time/60:.1f}–º–∏–Ω")
        return total_distance / 1000, total_time / 60  # –≤ –∫–º –∏ –º–∏–Ω—É—Ç–∏
    
    def _validate_reconfigured_route(self, route: Route, vehicle_config: VehicleConfig) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä–∞ —Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç —Å–ø—Ä—è–º–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ç–∞.
        """
        logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç {route.vehicle_id} ({vehicle_config.vehicle_type.value}):")
        logger.info(f"  - –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ: {route.total_distance_km:.1f}–∫–º (–ª–∏–º–∏—Ç: {vehicle_config.max_distance_km}–∫–º)")
        logger.info(f"  - –í—Ä–µ–º–µ: {route.total_time_minutes:.1f}–º–∏–Ω (–ª–∏–º–∏—Ç: {vehicle_config.max_time_hours * 60}–º–∏–Ω)")
        logger.info(f"  - –û–±–µ–º: {route.total_volume:.1f}—Å—Ç (–ª–∏–º–∏—Ç: {vehicle_config.capacity}—Å—Ç)")
        logger.info(f"  - –ö–ª–∏–µ–Ω—Ç–∏: {len(route.customers)} (–ª–∏–º–∏—Ç: {vehicle_config.max_customers_per_route})")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞
        if route.total_volume > vehicle_config.capacity:
            logger.warning(f"‚ö†Ô∏è –†–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç {route.vehicle_id} –Ω–∞–¥–≤–∏—à–∞–≤–∞ capacity –ª–∏–º–∏—Ç")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ
        if route.total_time_minutes > vehicle_config.max_time_hours * 60:
            logger.warning(f"‚ö†Ô∏è –†–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç {route.vehicle_id} –Ω–∞–¥–≤–∏—à–∞–≤–∞ time –ª–∏–º–∏—Ç")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ (–∞–∫–æ –∏–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
        if vehicle_config.max_distance_km and route.total_distance_km > vehicle_config.max_distance_km:
            logger.warning(f"‚ö†Ô∏è –†–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç {route.vehicle_id} –Ω–∞–¥–≤–∏—à–∞–≤–∞ distance –ª–∏–º–∏—Ç")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—Ä–æ–π –∫–ª–∏–µ–Ω—Ç–∏
        if (vehicle_config.max_customers_per_route and 
            len(route.customers) > vehicle_config.max_customers_per_route):
            logger.warning(f"‚ö†Ô∏è –†–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç {route.vehicle_id} –Ω–∞–¥–≤–∏—à–∞–≤–∞ –ª–∏–º–∏—Ç–∞ –∑–∞ –∫–ª–∏–µ–Ω—Ç–∏")
            return False
        
        logger.info(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç {route.vehicle_id} —Å–ø–∞–∑–≤–∞ –≤—Å–∏—á–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
        return True

    def solve_simple(self) -> CVRPSolution:
        """
        –û–ø—Ä–æ—Å—Ç–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ–µ—Ç–æ —Ç–æ—á–Ω–æ —Å–ª–µ–¥–≤–∞ –∫–ª–∞—Å–∏—á–µ—Å–∫–∏—è OR-Tools –ø—Ä–∏–º–µ—Ä.
        –°–∞–º–æ capacity constraints, –±–µ–∑ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.
        """
        if not ORTOOLS_AVAILABLE:
            logger.error("‚ùå OR-Tools –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω")
            return self._create_empty_solution()
        
        try:
            # 1. –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ data model (–æ–ø—Ä–æ—Å—Ç–µ–Ω)
            data = self._create_simple_data_model()
            
            # 2. –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º–µ–Ω–∏–¥–∂—ä—Ä (single depot)
            manager = pywrapcp.RoutingIndexManager(
                len(data['distance_matrix']), 
                data['num_vehicles'], 
                data['depot']
            )
            routing = pywrapcp.RoutingModel(manager)

            # 3. Distance callback - —Ç–æ—á–Ω–æ –∫–∞—Ç–æ –≤ –ø—Ä–∏–º–µ—Ä–∞
            def distance_callback(from_index, to_index):
                from_node = manager.IndexToNode(from_index)
                to_node = manager.IndexToNode(to_index)
                return data['distance_matrix'][from_node][to_node]
            
            transit_callback_index = routing.RegisterTransitCallback(distance_callback)
            routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

            # 4. Demand callback - —Ç–æ—á–Ω–æ –∫–∞—Ç–æ –≤ –ø—Ä–∏–º–µ—Ä–∞
            def demand_callback(from_index):
                from_node = manager.IndexToNode(from_index)
                return data['demands'][from_node]
            
            demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)
            
            # 5. Capacity constraints - —Ç–æ—á–Ω–æ –∫–∞—Ç–æ –≤ –ø—Ä–∏–º–µ—Ä–∞
            routing.AddDimensionWithVehicleCapacity(
                demand_callback_index,
                0,  # null capacity slack
                data['vehicle_capacities'],  # vehicle maximum capacities
                True,  # start cumul to zero
                "Capacity"
            )

            # 6. Search parameters - —Ç–æ—á–Ω–æ –∫–∞—Ç–æ –≤ –ø—Ä–∏–º–µ—Ä–∞
            search_parameters = pywrapcp.DefaultRoutingSearchParameters()
            search_parameters.first_solution_strategy = (
                routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC
            )
            search_parameters.local_search_metaheuristic = (
                routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH
            )
            search_parameters.time_limit.seconds = self.config.time_limit_seconds
            search_parameters.log_search = self.config.log_search
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –∏–∑–±—è–≥–≤–∞–Ω–µ –Ω–∞ "–∑–∞–≤–∏—Å–≤–∞–Ω–µ" –≤ –æ–ø—Ä–æ—Å—Ç–µ–Ω–∏—è solver
            search_parameters.solution_limit = 100  # –û–≥—Ä–∞–Ω–∏—á–∞–≤–∞–º–µ –±—Ä–æ—è —Ä–µ—à–µ–Ω–∏—è
            search_parameters.use_unfiltered_first_solution_strategy = True  # –ü–æ-–±—ä—Ä–∑–æ –ø—ä—Ä–≤–æ —Ä–µ—à–µ–Ω–∏–µ
            
            # LNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            lns_seconds = self.config.lns_time_limit_seconds
            search_parameters.lns_time_limit.seconds = int(lns_seconds)
            search_parameters.lns_time_limit.nanos = int((lns_seconds % 1) * 1e9)

            # 7. –†–µ—à–∞–≤–∞–Ω–µ —Å progress tracking
            logger.info("üîÑ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –æ–ø—Ä–æ—Å—Ç–µ–Ω OR-Tools solver...")
            
            # –°—ä–∑–¥–∞–≤–∞–º–µ progress tracker
            progress_tracker = ORToolsProgressTracker(self.config.time_limit_seconds, len(self.customers))
            
            # –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ tracking
            progress_tracker.start_tracking()
            
            try:
                solution = routing.SolveWithParameters(search_parameters)
                
                # –°–ø–∏—Ä–∞–º–µ tracking
                progress_tracker.stop_tracking()
                
                # 8. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ
                if solution:
                    logger.info("‚úÖ –ù–∞–º–µ—Ä–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ —Å –æ–ø—Ä–æ—Å—Ç–µ–Ω–∞ –ª–æ–≥–∏–∫–∞")
                    return self._extract_simple_solution(manager, routing, solution, data)
                else:
                    logger.error("‚ùå –û–ø—Ä–æ—Å—Ç–µ–Ω–∏—è—Ç solver –Ω–µ –Ω–∞–º–µ—Ä–∏ —Ä–µ—à–µ–Ω–∏–µ")
                    return self._create_empty_solution()
                    
            except Exception as solve_error:
                progress_tracker.stop_tracking()
                raise solve_error

        except Exception as e:
            logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ –æ–ø—Ä–æ—Å—Ç–µ–Ω–∏—è solver: {e}", exc_info=True)
            return self._create_empty_solution()

    def _create_simple_data_model(self):
        """–°—ä–∑–¥–∞–≤–∞ –æ–ø—Ä–æ—Å—Ç–µ–Ω data model –∫–∞—Ç–æ –≤ OR-Tools –ø—Ä–∏–º–µ—Ä–∞"""
        data = {}
        
        # Distance matrix - –∏–∑–ø–æ–ª–∑–≤–∞–º–µ OSRM –¥–∞–Ω–Ω–∏—Ç–µ
        data['distance_matrix'] = self.distance_matrix.distances
        
        # Demands - –¥–µ–ø–æ –∏–º–∞ 0, –∫–ª–∏–µ–Ω—Ç–∏ –∏–º–∞—Ç —Ä–µ–∞–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
        data['demands'] = [0] + [int(c.volume * 100) for c in self.customers]
        
        # Vehicle capacities - –≤—Å–∏—á–∫–∏ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
        data['vehicle_capacities'] = []
        for v_config in self.vehicle_configs:
            if v_config.enabled:
                for _ in range(v_config.count):
                    data['vehicle_capacities'].append(int(v_config.capacity * 100))
        
        # –ë—Ä–æ–π –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
        data['num_vehicles'] = len(data['vehicle_capacities'])
        
        # –î–µ–ø–æ - –≤–∏–Ω–∞–≥–∏ –∏–Ω–¥–µ–∫—Å 0
        data['depot'] = 0
        
        logger.info(f"üìä –û–ø—Ä–æ—Å—Ç–µ–Ω data model: {len(self.customers)} –∫–ª–∏–µ–Ω—Ç–∞, {data['num_vehicles']} –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
        
        return data

    def _extract_simple_solution(self, manager, routing, solution, data) -> CVRPSolution:
        """–ò–∑–≤–ª–∏—á–∞ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ –æ—Ç –æ–ø—Ä–æ—Å—Ç–µ–Ω–∏—è solver"""
        routes = []
        total_distance = 0
        
        all_serviced_customer_indices = set()
        
        for vehicle_id in range(data['num_vehicles']):
            if not routing.IsVehicleUsed(solution, vehicle_id):
                continue
                
            route_customers = []
            route_distance = 0
            
            # –ù–∞–º–∏—Ä–∞–º–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –Ω–∞ –ø—Ä–µ–≤–æ–∑–Ω–æ—Ç–æ —Å—Ä–µ–¥—Å—Ç–≤–æ
            vehicle_config = self._get_vehicle_config_for_id(vehicle_id)
            
            index = routing.Start(vehicle_id)
            while not routing.IsEnd(index):
                node_index = manager.IndexToNode(index)
                
                # –ê–∫–æ –Ω–µ –µ –¥–µ–ø–æ (–∏–Ω–¥–µ–∫—Å 0), –¥–æ–±–∞–≤—è–º–µ –∫–ª–∏–µ–Ω—Ç–∞
                if node_index != 0:
                    customer_index = node_index - 1  # -1 –∑–∞—â–æ—Ç–æ –¥–µ–ø–æ –µ –∏–Ω–¥–µ–∫—Å 0
                    if 0 <= customer_index < len(self.customers):
                        customer = self.customers[customer_index]
                        route_customers.append(customer)
                        all_serviced_customer_indices.add(customer_index)
                
                previous_index = index
                index = solution.Value(routing.NextVar(index))
                
                # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ
                route_distance += routing.GetArcCostForVehicle(
                    previous_index, index, vehicle_id
                )
            
            if route_customers:
                # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–µ–∞–ª–Ω–æ—Ç–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∏
                route_distance_km = route_distance / 1000
                
                # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –≤—Ä–µ–º–µ—Ç–æ (–ø—ä—Ç—É–≤–∞–Ω–µ + –æ–±—Å–ª—É–∂–≤–∞–Ω–µ)
                route_time_minutes = (route_distance / 40000) * 60  # 40 –∫–º/—á —Å—Ä–µ–¥–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç
                route_time_minutes += len(route_customers) * vehicle_config.service_time_minutes
                
                route = Route(
                    vehicle_type=vehicle_config.vehicle_type,
                    vehicle_id=vehicle_id,
                    customers=route_customers,
                    depot_location=self.unique_depots[0],  # –û—Å–Ω–æ–≤–Ω–æ—Ç–æ –¥–µ–ø–æ
                    total_distance_km=route_distance_km,
                    total_time_minutes=route_time_minutes,
                    total_volume=sum(c.volume for c in route_customers),
                    is_feasible=True
                )
                
                routes.append(route)
                total_distance += route_distance
        
        # –ù–∞–º–∏—Ä–∞–º–µ –ø—Ä–æ–ø—É—Å–Ω–∞—Ç–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∏
        all_customer_indices = set(range(len(self.customers)))
        dropped_customer_indices = all_customer_indices - all_serviced_customer_indices
        dropped_customers = [self.customers[i] for i in dropped_customer_indices]
        
        if dropped_customers:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–Ω–∞—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∏: {len(dropped_customers)}")
        
        # –ù–û–í–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–ù–û–°–¢: –§–∏–Ω–∞–ª–µ–Ω —Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ –æ—Ç –¥–µ–ø–æ—Ç–æ
        if self.config.enable_final_depot_reconfiguration:
            logger.info("üîÑ –ü—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ —Ñ–∏–Ω–∞–ª–Ω–∞ —Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ –æ—Ç –¥–µ–ø–æ—Ç–æ (–æ–ø—Ä–æ—Å—Ç–µ–Ω solver)...")
            routes = self._reconfigure_routes_from_depot(routes)
        else:
            logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ –Ω–∞ —Ñ–∏–Ω–∞–ª–Ω–∞ —Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∏–∑–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞)")
        
        total_served_volume = sum(r.total_volume for r in routes)
        
        return CVRPSolution(
            routes=routes,
            dropped_customers=dropped_customers,
            total_distance_km=total_distance / 1000,
            total_time_minutes=sum(r.total_time_minutes for r in routes),
            total_vehicles_used=len(routes),
            fitness_score=float(solution.ObjectiveValue()),
            is_feasible=True,
            total_served_volume=total_served_volume
        )


class CVRPSolver:
    """–ì–ª–∞–≤–µ–Ω –∫–ª–∞—Å –∑–∞ —Ä–µ—à–∞–≤–∞–Ω–µ –Ω–∞ CVRP - –æ–ø—Ä–æ—Å—Ç–µ–Ω–∞ –≤–µ—Ä—Å–∏—è."""
    
    def __init__(self, config: Optional[CVRPConfig] = None):
        self.config = config or get_config().cvrp
    
    def solve(self, 
              allocation: WarehouseAllocation, 
              depot_location: Tuple[float, float],
              distance_matrix: DistanceMatrix) -> CVRPSolution:
        
        enabled_vehicles = get_config().vehicles or []
        
        unique_depots = {depot_location}
        for vehicle_config in enabled_vehicles:
            if vehicle_config.enabled and vehicle_config.start_location:
                unique_depots.add(vehicle_config.start_location)
        
        solver = ORToolsSolver(
            self.config, enabled_vehicles, allocation.vehicle_customers, 
            distance_matrix, sorted(list(unique_depots)), allocation.center_zone_customers,
            get_config().locations
        )
        
        # –ò–∑–±–∏—Ä–∞–º–µ –∫–æ–π solver –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ
        if self.config.use_simple_solver:
            logger.info("üîß –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –æ–ø—Ä–æ—Å—Ç–µ–Ω solver (—Å–∞–º–æ capacity constraints)")
            return solver.solve_simple()
        else:
            logger.info("üîß –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –ø—ä–ª–µ–Ω solver (–≤—Å–∏—á–∫–∏ constraints)")
            return solver.solve()
    
    def close(self):
        pass


# –£–¥–æ–±–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
def solve_cvrp(allocation: WarehouseAllocation, 
               depot_location: Tuple[float, float], 
               distance_matrix: DistanceMatrix) -> CVRPSolution:
    """–£–¥–æ–±–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Ä–µ—à–∞–≤–∞–Ω–µ –Ω–∞ CVRP"""
    solver = CVRPSolver()
    # close() –≤–µ—á–µ –Ω–µ –µ –Ω—É–∂–µ–Ω, —Ç—ä–π –∫–∞—Ç–æ –Ω—è–º–∞ OSRM –∫–ª–∏–µ–Ω—Ç
    return solver.solve(allocation, depot_location, distance_matrix) 