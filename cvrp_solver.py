"""
CVRP Solver - –æ—Å–Ω–æ–≤–µ–Ω –º–æ–¥—É–ª –∑–∞ —Ä–µ—à–∞–≤–∞–Ω–µ –Ω–∞ Vehicle Routing Problem
–ò–∑–ø–æ–ª–∑–≤–∞ OR-Tools –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
"""

import random
import math
import time
import threading
from typing import List, Dict, Tuple, Optional, Set
from dataclasses import dataclass
import logging
from tqdm import tqdm

# OR-Tools –∏–º–ø–æ—Ä—Ç–∏
try:
    from ortools.constraint_solver import routing_enums_pb2
    from ortools.constraint_solver import pywrapcp
    ORTOOLS_AVAILABLE = True
except ImportError:
    ORTOOLS_AVAILABLE = False
    logging.warning("OR-Tools –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω. –©–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ –æ–ø—Ä–æ—Å—Ç–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç—ä–º.")

from config import get_config, CVRPConfig, VehicleConfig, VehicleType
from input_handler import Customer
from osrm_client import DistanceMatrix, OSRMClient, get_distance_matrix_from_central_cache
from warehouse_manager import WarehouseAllocation

logger = logging.getLogger(__name__)


class ORToolsProgressTracker:
    """–ö–ª–∞—Å –∑–∞ —Å–ª–µ–¥–µ–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞ –Ω–∞ OR-Tools –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"""
    
    def __init__(self, time_limit_seconds: int, num_customers: int):
        self.time_limit_seconds = time_limit_seconds
        self.num_customers = num_customers
        self.start_time = None
        self.best_solution_value = float('inf')
        self.solution_count = 0
        self.progress_bar = None
        self.running = False
        self.progress_thread = None
        
    def start_tracking(self):
        """–°—Ç–∞—Ä—Ç–∏—Ä–∞ —Å–ª–µ–¥–µ–Ω–µ—Ç–æ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞"""
        self.start_time = time.time()
        self.running = True
        self.solution_count = 0
        
        # –°—ä–∑–¥–∞–≤–∞–º–µ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
        self.progress_bar = tqdm(
            total=self.time_limit_seconds,
            desc=f"üîÑ OR-Tools –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è ({self.num_customers} –∫–ª–∏–µ–Ω—Ç–∞)",
            unit="s",
            bar_format="{l_bar}{bar}| {n:.0f}/{total:.0f}s [{elapsed}<{remaining}, {postfix}]",
            dynamic_ncols=True
        )
        
        # –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ thread –∑–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞
        self.progress_thread = threading.Thread(target=self._update_progress)
        self.progress_thread.daemon = True
        self.progress_thread.start()
        
    def update_solution(self, solution_value: float):
        """–û–±–Ω–æ–≤—è–≤–∞ –Ω–∞–π-–¥–æ–±—Ä–æ—Ç–æ —Ä–µ—à–µ–Ω–∏–µ"""
        if solution_value < self.best_solution_value:
            self.best_solution_value = solution_value
            self.solution_count += 1
            
            # –û–±–Ω–æ–≤—è–≤–∞–º–µ postfix –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞
            if self.progress_bar:
                improvement_percent = ((self.best_solution_value / self.best_solution_value * 100) 
                                     if self.best_solution_value > 0 else 0)
                self.progress_bar.set_postfix({
                    '—Ä–µ—à–µ–Ω–∏—è': self.solution_count,
                    '–Ω–∞–π-–¥–æ–±—Ä–æ': f'{self.best_solution_value/1000:.1f}–∫–º'
                })
    
    def _update_progress(self):
        """–û–±–Ω–æ–≤—è–≤–∞ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä–∞ –≤ –æ—Ç–¥–µ–ª–µ–Ω thread"""
        while self.running and self.progress_bar:
            if self.start_time:
                elapsed = time.time() - self.start_time
                if elapsed <= self.time_limit_seconds:
                    self.progress_bar.n = min(elapsed, self.time_limit_seconds)
                    self.progress_bar.refresh()
                else:
                    self.progress_bar.n = self.time_limit_seconds
                    self.progress_bar.refresh()
                    break
            time.sleep(0.5)  # –û–±–Ω–æ–≤—è–≤–∞–º–µ –Ω–∞ –≤—Å–µ–∫–∏ 0.5 —Å–µ–∫—É–Ω–¥–∏
    
    def stop_tracking(self):
        """–°–ø–∏—Ä–∞ —Å–ª–µ–¥–µ–Ω–µ—Ç–æ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞"""
        self.running = False
        if self.progress_bar:
            # –î–æ–≤—ä—Ä—à–≤–∞–º–µ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä–∞
            elapsed = time.time() - self.start_time if self.start_time else 0
            self.progress_bar.n = min(elapsed, self.time_limit_seconds)
            
            # –§–∏–Ω–∞–ª–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ
            final_msg = f"‚úÖ –ó–∞–≤—ä—Ä—à–µ–Ω–æ - {self.solution_count} —Ä–µ—à–µ–Ω–∏—è –∑–∞ {elapsed:.1f}s"
            if self.best_solution_value != float('inf'):
                final_msg += f" | –ù–∞–π-–¥–æ–±—Ä–æ: {self.best_solution_value/1000:.1f}–∫–º"
            
            self.progress_bar.set_description(final_msg)
            self.progress_bar.refresh()
            self.progress_bar.close()
            
        if self.progress_thread and self.progress_thread.is_alive():
            self.progress_thread.join(timeout=1.0)


@dataclass
class Route:
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–≤–∞ –º–∞—Ä—à—Ä—É—Ç –∑–∞ –µ–¥–Ω–æ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ"""
    vehicle_type: VehicleType
    vehicle_id: int
    customers: List[Customer]
    depot_location: Tuple[float, float]
    total_distance_km: float = 0.0
    total_time_minutes: float = 0.0
    total_volume: float = 0.0
    is_feasible: bool = True


@dataclass
class CVRPSolution:
    """–¶—è–ª–æ—Å—Ç–Ω–æ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ CVRP –ø—Ä–æ–±–ª–µ–º–∞"""
    routes: List[Route]
    total_distance_km: float
    total_time_minutes: float
    total_vehicles_used: int
    fitness_score: float
    is_feasible: bool


class RouteBuilder:
    """–ö–ª–∞—Å –∑–∞ –ø–æ—Å—Ç—Ä–æ—è–≤–∞–Ω–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏"""
    
    def __init__(self, vehicle_configs: List[VehicleConfig], distance_matrix: DistanceMatrix):
        self.vehicle_configs = vehicle_configs
        self.distance_matrix = distance_matrix
        self.locations = distance_matrix.locations  # [depot, customer1, customer2, ...]
    
    def build_route(self, vehicle_type: VehicleType, vehicle_id: int, 
                   customer_indices: List[int], depot_location: Tuple[float, float]) -> Route:
        """–ü–æ—Å—Ç—Ä–æ—è–≤–∞ –º–∞—Ä—à—Ä—É—Ç –∑–∞ –¥–∞–¥–µ–Ω–æ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ"""
        vehicle_config = self._get_vehicle_config(vehicle_type)
        customers = [self._get_customer_by_index(idx) for idx in customer_indices]
        
        route = Route(
            vehicle_type=vehicle_type,
            vehicle_id=vehicle_id,
            customers=customers,
            depot_location=depot_location
        )
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –æ–±–µ–º
        route.total_volume = sum(c.volume for c in customers)
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ
        if customer_indices:
            route.total_distance_km, route.total_time_minutes = self._calculate_route_metrics(customer_indices)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        route.is_feasible = self._validate_route(route, vehicle_config)
        
        return route
    
    def _get_vehicle_config(self, vehicle_type: VehicleType) -> VehicleConfig:
        """–ù–∞–º–∏—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –∑–∞ –¥–∞–¥–µ–Ω–∏—è —Ç–∏–ø –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ"""
        for config in self.vehicle_configs:
            if config.vehicle_type == vehicle_type:
                return config
        raise ValueError(f"–ù—è–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ –æ—Ç —Ç–∏–ø {vehicle_type}")
    
    def _get_customer_by_index(self, index: int) -> Customer:
        """–í—Ä—ä—â–∞ –∫–ª–∏–µ–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞ (–∏–Ω–¥–µ–∫—Å 0 –µ –¥–µ–ø–æ—Ç–æ)"""
        # –¢–æ–≤–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞ —á–µ –∏–º–∞–º–µ –¥–æ—Å—Ç—ä–ø –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∏
        # –í —Ä–µ–∞–ª–Ω–∞—Ç–∞ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è —Ç—Ä—è–±–≤–∞ –¥–∞ –ø—Ä–µ–¥–∞–≤–∞–º–µ —Å–ø–∏—Å—ä–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–∏
        return Customer(
            id=f"customer_{index}",
            name=f"Customer {index}",
            coordinates=self.locations[index],
            volume=0.0,  # —â–µ —Å–µ –ø–æ–ø—ä–ª–Ω–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
            original_gps_data=""
        )
    
    def _calculate_route_metrics(self, customer_indices: List[int]) -> Tuple[float, float]:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ –æ–±—â–æ—Ç–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ –∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞"""
        if not customer_indices:
            return 0.0, 0.0
        
        total_distance = 0.0
        total_time = 0.0
        
        # –û—Ç –¥–µ–ø–æ –¥–æ –ø—ä—Ä–≤–∏—è –∫–ª–∏–µ–Ω—Ç
        current_index = 0  # –¥–µ–ø–æ
        for next_index in customer_indices:
            distance = self.distance_matrix.distances[current_index][next_index]
            duration = self.distance_matrix.durations[current_index][next_index]
            
            total_distance += distance
            total_time += duration
            current_index = next_index
        
        # –û—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—è –∫–ª–∏–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –¥–µ–ø–æ—Ç–æ
        distance = self.distance_matrix.distances[current_index][0]
        duration = self.distance_matrix.durations[current_index][0]
        total_distance += distance
        total_time += duration
        
        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –æ–±—Å–ª—É–∂–≤–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ
        service_time = len(customer_indices) * 15 * 60  # 15 –º–∏–Ω—É—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∏ –∑–∞ –≤—Å–µ–∫–∏ –∫–ª–∏–µ–Ω—Ç
        total_time += service_time
        
        return total_distance / 1000, total_time / 60  # –≤ –∫–º –∏ –º–∏–Ω—É—Ç–∏
    
    def _validate_route(self, route: Route, vehicle_config: VehicleConfig) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä–∞ –¥–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç—ä—Ç –µ –¥–æ–ø—É—Å—Ç–∏–º"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞
        if route.total_volume > vehicle_config.capacity:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ
        if route.total_time_minutes > vehicle_config.max_time_hours * 60:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ (–∞–∫–æ –∏–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
        if vehicle_config.max_distance_km and route.total_distance_km > vehicle_config.max_distance_km:
            return False
        
        return True


class ORToolsSolver:
    """OR-Tools CVRP —Ä–µ—à–∞—Ç–µ–ª"""
    
    def __init__(self, config: CVRPConfig, vehicle_configs: List[VehicleConfig], 
                 customers: List[Customer], distance_matrix: DistanceMatrix):
        self.config = config
        self.vehicle_configs = vehicle_configs
        self.customers = customers
        self.distance_matrix = distance_matrix
        self.depot = 0  # –¥–µ–ø–æ—Ç–æ –µ –≤–∏–Ω–∞–≥–∏ –∏–Ω–¥–µ–∫—Å 0
        self.progress_tracker = ORToolsProgressTracker(
            time_limit_seconds=config.time_limit_seconds,
            num_customers=len(customers)
        )
    
    def _get_angle_to_depot(self, lat, lon):
        """–ò–∑—á–∏—Å–ª—è–≤–∞ —ä–≥—ä–ª–∞ –º–µ–∂–¥—É —Ç–æ—á–∫–∞ –∏ –¥–µ–ø–æ—Ç–æ —Å–ø—Ä—è–º–æ —Å–µ–≤–µ—Ä"""
        depot_lat, depot_lon = self.distance_matrix.locations[0]
        dx = lon - depot_lon
        dy = lat - depot_lat
        angle = math.degrees(math.atan2(dx, dy))
        # –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–º–µ –¥–æ 0-360
        return (angle + 360) % 360
    
    def _are_points_in_same_sector(self, from_node, to_node):
        """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –¥–≤–µ —Ç–æ—á–∫–∏ —Å–∞ –≤ –µ–¥–∏–Ω –∏ —Å—ä—â —Å–µ–∫—Ç–æ—Ä —Å–ø—Ä—è–º–æ –¥–µ–ø–æ—Ç–æ"""
        if from_node == 0 or to_node == 0:  # –∞–∫–æ –µ–¥–Ω–∞ –æ—Ç —Ç–æ—á–∫–∏—Ç–µ –µ –¥–µ–ø–æ
            return True
            
        from_lat, from_lon = self.distance_matrix.locations[from_node]
        to_lat, to_lon = self.distance_matrix.locations[to_node]
        
        from_angle = self._get_angle_to_depot(from_lat, from_lon)
        to_angle = self._get_angle_to_depot(to_lat, to_lon)
        
        # –î–µ—Ñ–∏–Ω–∏—Ä–∞–º–µ —Å–µ–∫—Ç–æ—Ä–∏ –æ—Ç –ø–æ 45 –≥—Ä–∞–¥—É—Å–∞
        SECTOR_SIZE = 45
        from_sector = int(from_angle / SECTOR_SIZE)
        to_sector = int(to_angle / SECTOR_SIZE)
        
        # –¢–æ—á–∫–∏—Ç–µ —Å–∞ –≤ –µ–¥–∏–Ω —Å–µ–∫—Ç–æ—Ä –∏–ª–∏ —Å—ä—Å–µ–¥–Ω–∏ —Å–µ–∫—Ç–æ—Ä–∏
        return abs(from_sector - to_sector) <= 1 or abs(from_sector - to_sector) == 7
    
    def _distance_callback_wrapper(self, manager):
        """Wrapper –∑–∞ distance callback —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞"""
        def distance_callback(from_index, to_index):
            from_node = manager.IndexToNode(from_index)
            to_node = manager.IndexToNode(to_index)
            
            base_distance = self.distance_matrix.distances[from_node][to_node]
            
            # –ê–∫–æ —Ç–æ—á–∫–∏—Ç–µ –Ω–µ —Å–∞ –≤ –µ–¥–∏–Ω –∏ —Å—ä—â –∏–ª–∏ —Å—ä—Å–µ–¥–µ–Ω —Å–µ–∫—Ç–æ—Ä,
            # –¥–æ–±–∞–≤—è–º–µ –≥–æ–ª—è–º–∞ penalty
            if not self._are_points_in_same_sector(from_node, to_node):
                # –£–≤–µ–ª–∏—á–∞–≤–∞–º–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª–Ω–æ
                return int(base_distance * 3)
            
            # –ó–∞ —Ç–æ—á–∫–∏ –≤ –µ–¥–∏–Ω –∏ —Å—ä—â —Å–µ–∫—Ç–æ—Ä, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Ä–µ–∞–ª–Ω–æ—Ç–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ
            return int(base_distance)
        
    def solve(self) -> CVRPSolution:
        """–†–µ—à–∞–≤–∞ CVRP –ø—Ä–æ–±–ª–µ–º–∞ —Å OR-Tools"""
        if not ORTOOLS_AVAILABLE:
            logger.error("‚ùå OR-Tools –ù–ï –ï –ù–ê–õ–ò–ß–ï–ù! –ò–∑–ø–æ–ª–∑–≤–∞–º backup –∞–ª–≥–æ—Ä–∏—Ç—ä–º")
            logger.error("   –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–π—Ç–µ OR-Tools —Å: pip install ortools")
            return self._fallback_solution()
        
        logger.info("‚úÖ OR-Tools –µ –Ω–∞–ª–∏—á–µ–Ω, –∑–∞–ø–æ—á–≤–∞–º —Ä–µ—à–∞–≤–∞–Ω–µ –Ω–∞ CVRP")
        
        try:
            # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∞
            manager = pywrapcp.RoutingIndexManager(
                len(self.distance_matrix.locations),
                self._get_total_vehicles(),
                self.depot
            )
            routing = pywrapcp.RoutingModel(manager)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ callback –∑–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è - –æ–ø—Ä–æ—Å—Ç–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç
            def distance_callback(from_index, to_index):
                from_node = manager.IndexToNode(from_index)
                to_node = manager.IndexToNode(to_index)
                return int(self.distance_matrix.distances[from_node][to_node])
            
            transit_callback_index = routing.RegisterTransitCallback(distance_callback)
            
            # –ó–∞–¥–∞–≤–∞–º–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –∫–∞—Ç–æ cost function
            routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)
            
            # –î–æ–±–∞–≤—è–º–µ capacity constraints - –æ–ø—Ä–æ—Å—Ç–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç
            def demand_callback(from_index):
                from_node = manager.IndexToNode(from_index)
                if from_node == 0:  # –¥–µ–ø–æ
                    return 0
                customer = self.customers[from_node - 1]  # -1 –∑–∞—â–æ—Ç–æ –¥–µ–ø–æ—Ç–æ –µ 0
                return int(customer.volume)
            
            demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)
            
            vehicle_capacities = []
            for vehicle_config in self.vehicle_configs:
                if vehicle_config.enabled:
                    for _ in range(vehicle_config.count):
                        vehicle_capacities.append(int(vehicle_config.capacity))
            
            routing.AddDimensionWithVehicleCapacity(
                demand_callback_index,
                0,  # –Ω—É–ª–µ–≤ slack
                vehicle_capacities,  # –º–∞–∫—Å–∏–º–∞–ª–µ–Ω –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç –∑–∞ –≤—Å—è–∫–æ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ
                True,  # –∑–∞–ø–æ—á–≤–∞–º–µ –æ—Ç 0
                "Capacity"
            )
            
            # –ü–æ–¥–æ–±—Ä–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ
            search_parameters = pywrapcp.DefaultRoutingSearchParameters()
            search_parameters.first_solution_strategy = (
                routing_enums_pb2.FirstSolutionStrategy.AUTOMATIC
            )
            search_parameters.local_search_metaheuristic = (
                routing_enums_pb2.LocalSearchMetaheuristic.AUTOMATIC
            )
            search_parameters.time_limit.seconds = 1
            
            # –†–µ—à–∞–≤–∞–Ω–µ
            solution = routing.SolveWithParameters(search_parameters)
            
            if solution:
                result = self._extract_solution(manager, routing, solution)
                logger.info("‚úÖ OR-Tools –Ω–∞–º–µ—Ä–∏ —Ä–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                return result
            else:
                logger.error("‚ùå OR-Tools –ù–ï –ù–ê–ú–ï–†–ò –†–ï–®–ï–ù–ò–ï! –ò–∑–ø–æ–ª–∑–≤–∞–º backup –∞–ª–≥–æ—Ä–∏—Ç—ä–º")
                logger.error(f"   –ü—Ä–æ–±–ª–µ–º: {len(self.customers)} –∫–ª–∏–µ–Ω—Ç–∞, {self._get_total_vehicles()} –∞–≤—Ç–æ–±—É—Å–∞")
                return self._fallback_solution()
                
        except Exception as e:
            logger.error(f"‚ùå –ì–†–ï–®–ö–ê –í OR-TOOLS! –ò–∑–ø–æ–ª–∑–≤–∞–º backup –∞–ª–≥–æ—Ä–∏—Ç—ä–º")
            logger.error(f"   Exception: {type(e).__name__}: {e}")
            return self._fallback_solution()
    
    def _get_total_vehicles(self) -> int:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ –æ–±—â–∏—è –±—Ä–æ–π –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"""
        return sum(vehicle.count for vehicle in self.vehicle_configs if vehicle.enabled)
    
    def _extract_solution(self, manager, routing, solution) -> CVRPSolution:
        """–ò–∑–≤–ª–∏—á–∞ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ –æ—Ç OR-Tools"""
        routes = []
        total_distance = 0
        total_time = 0
        
        for vehicle_id in range(routing.vehicles()):
            route_customers = []
            route_distance = 0
            route_time = 0
            
            index = routing.Start(vehicle_id)
            while not routing.IsEnd(index):
                node_index = manager.IndexToNode(index)
                if node_index != 0:  # –Ω–µ –µ –¥–µ–ø–æ
                    customer = self.customers[node_index - 1]  # -1 –∑–∞—â–æ—Ç–æ –¥–µ–ø–æ—Ç–æ –µ 0
                    route_customers.append(customer)
                
                previous_index = index
                index = solution.Value(routing.NextVar(index))
                
                # –í–∑–µ–º–∞–º–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–Ω–∏—Ç–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –æ—Ç –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞
                from_node = manager.IndexToNode(previous_index)
                to_node = manager.IndexToNode(index)
                actual_distance = self.distance_matrix.distances[from_node][to_node]
                actual_time = self.distance_matrix.durations[from_node][to_node]
                
                route_distance += actual_distance
                route_time += actual_time
            
            if route_customers:  # —Å–∞–º–æ –∞–∫–æ –∏–º–∞ –∫–ª–∏–µ–Ω—Ç–∏ –≤ –º–∞—Ä—à—Ä—É—Ç–∞
                # –ù–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–∏–ø–∞ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ –∑–∞ —Ç–æ–∑–∏ vehicle_id
                vehicle_config = self._get_vehicle_config_for_id(vehicle_id)
                
                # –î–æ–±–∞–≤—è–º–µ service time –∑–∞ –≤—Å–µ–∫–∏ –∫–ª–∏–µ–Ω—Ç (15 –º–∏–Ω—É—Ç–∏)
                total_service_time = len(route_customers) * 15 * 60  # –≤ —Å–µ–∫—É–Ω–¥–∏
                
                route = Route(
                    vehicle_type=vehicle_config.vehicle_type,
                    vehicle_id=vehicle_id,
                    customers=route_customers,
                    depot_location=self.distance_matrix.locations[0],
                    total_distance_km=route_distance / 1000,  # –æ—Ç –º–µ—Ç—Ä–∏ –≤ –∫–º
                    total_time_minutes=(route_time + total_service_time) / 60,  # –≤ –º–∏–Ω—É—Ç–∏
                    total_volume=sum(c.volume for c in route_customers),
                    is_feasible=True
                )
                routes.append(route)
                total_distance += route_distance
                total_time += route_time + total_service_time
        
        cvrp_solution = CVRPSolution(
            routes=routes,
            total_distance_km=total_distance / 1000,
            total_time_minutes=total_time / 60,
            total_vehicles_used=len(routes),
            fitness_score=total_distance / 1000,  # –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –∫–∞—Ç–æ fitness
            is_feasible=True
        )
        
        # –§–∏–Ω–∞–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –ø—Ä–æ–≥—Ä–µ—Å tracker-–∞  
        if hasattr(self, 'progress_tracker'):
            self.progress_tracker.best_solution_value = total_distance
            
        logger.info(f"OR-Tools –Ω–∞–º–µ—Ä–∏ —Ä–µ—à–µ–Ω–∏–µ —Å {len(routes)} –º–∞—Ä—à—Ä—É—Ç–∞")
        logger.info(f"–û–±—â–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ: {cvrp_solution.total_distance_km:.2f} –∫–º")
        
        return cvrp_solution
    
    def _get_vehicle_config_for_id(self, vehicle_id: int) -> VehicleConfig:
        """–ù–∞–º–∏—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –∑–∞ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ –ø–æ ID"""
        current_id = 0
        for vehicle_config in self.vehicle_configs:
            if not vehicle_config.enabled:
                continue
            if current_id <= vehicle_id < current_id + vehicle_config.count:
                return vehicle_config
            current_id += vehicle_config.count
        
        # Fallback –∫—ä–º –ø—ä—Ä–≤–æ—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ
        for vehicle_config in self.vehicle_configs:
            if vehicle_config.enabled:
                return vehicle_config
        
        raise ValueError("–ù—è–º–∞ –≤–∫–ª—é—á–µ–Ω–∏ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
    
    def _fallback_solution(self) -> CVRPSolution:
        """–ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–µ–Ω fallback –∞–ª–≥–æ—Ä–∏—Ç—ä–º –∞–∫–æ OR-Tools –Ω–µ —Ä–∞–±–æ—Ç–∏"""
        logger.warning("üîÑ –ò–ó–ü–û–õ–ó–í–ê–ú BACKUP –ê–õ–ì–û–†–ò–¢–™–ú –≤–º–µ—Å—Ç–æ OR-Tools")
        logger.warning("   –¢–æ–≤–∞ –ù–ï –µ –æ–ø—Ç–∏–º–∞–ª–Ω–æ - –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –∑–∞—â–æ OR-Tools –Ω–µ —Ä–∞–±–æ—Ç–∏!")
        
        routes = []
        current_customers = self.customers.copy()
        vehicle_id = 0
        
        # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ –ø–æ –æ–±–µ–º (–º–∞–ª–∫–∏ –ø—ä—Ä–≤–æ –∑–∞ –ø–æ-–¥–æ–±—Ä–æ –∑–∞–ø—ä–ª–≤–∞–Ω–µ)
        current_customers.sort(key=lambda c: c.volume)
        
        for vehicle_config in self.vehicle_configs:
            if not vehicle_config.enabled:
                continue
                
            for _ in range(vehicle_config.count):
                if not current_customers:
                    break
                    
                # –ó–∞–ø—ä–ª–≤–∞–º–µ –∞–≤—Ç–æ–±—É—Å–∞ —Å–ø–æ—Ä–µ–¥ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞ –º—É
                route_customers = []
                current_volume = 0.0
                remaining_customers = []
                
                for customer in current_customers:
                    if current_volume + customer.volume <= vehicle_config.capacity:
                        route_customers.append(customer)
                        current_volume += customer.volume
                    else:
                        remaining_customers.append(customer)
                
                current_customers = remaining_customers
                
                if route_customers:
                    route = Route(
                        vehicle_type=vehicle_config.vehicle_type,
                        vehicle_id=vehicle_id,
                        customers=route_customers,
                        depot_location=self.distance_matrix.locations[0],
                        total_volume=current_volume,
                        total_distance_km=100.0,  # –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–æ
                        total_time_minutes=120.0,  # –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–æ
                        is_feasible=True
                    )
                    routes.append(route)
                    logger.info(f"–ê–≤—Ç–æ–±—É—Å {vehicle_id} ({vehicle_config.vehicle_type.value}): "
                              f"{len(route_customers)} –∫–ª–∏–µ–Ω—Ç–∞, {current_volume:.1f}/{vehicle_config.capacity} —Å—Ç.")
                    vehicle_id += 1
        
        # –ê–∫–æ —Å–∞ –æ—Å—Ç–∞–Ω–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–≤–∞–º–µ
        if current_customers:
            logger.warning(f"–û—Å—Ç–∞–Ω–∞—Ö–∞ {len(current_customers)} –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - "
                         f"–æ–±—â –æ–±–µ–º {sum(c.volume for c in current_customers):.1f} —Å—Ç.")
        
        return CVRPSolution(
            routes=routes,
            total_distance_km=sum(r.total_distance_km for r in routes),
            total_time_minutes=sum(r.total_time_minutes for r in routes),
            total_vehicles_used=len(routes),
            fitness_score=sum(r.total_distance_km for r in routes),
            is_feasible=True
        )


class CVRPSolver:
    """–ì–ª–∞–≤–µ–Ω –∫–ª–∞—Å –∑–∞ —Ä–µ—à–∞–≤–∞–Ω–µ –Ω–∞ CVRP"""
    
    def __init__(self, config: Optional[CVRPConfig] = None):
        self.config = config or get_config().cvrp
        self.osrm_client = OSRMClient()
    
    def solve(self, allocation: WarehouseAllocation, depot_location: Tuple[float, float]) -> CVRPSolution:
        """–†–µ—à–∞–≤–∞ CVRP –∑–∞ –¥–∞–¥–µ–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∏"""
        logger.info("–ó–∞–ø–æ—á–≤–∞–º —Ä–µ—à–∞–≤–∞–Ω–µ –Ω–∞ CVRP –ø—Ä–æ–±–ª–µ–º–∞")
        
        customers = allocation.vehicle_customers
        if not customers:
            logger.warning("–ù—è–º–∞ –∫–ª–∏–µ–Ω—Ç–∏ –∑–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
            return CVRPSolution([], 0, 0, 0, 0, True)
        
        # –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è - –ü–™–†–í–û –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∏—è –∫–µ—à
        locations = [depot_location] + [c.coordinates for c in customers]
        
        logger.info("üîç –¢—ä—Ä—Å—è –º–∞—Ç—Ä–∏—Ü–∞ —Å —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∏—è –∫–µ—à...")
        distance_matrix = get_distance_matrix_from_central_cache(locations)
        
        if distance_matrix is None:
            logger.info("üíæ –ù—è–º–∞ –¥–∞–Ω–Ω–∏ –≤ –∫–µ—à–∞ - –ø—Ä–∞–≤—è –Ω–æ–≤–∞ OSRM –∑–∞—è–≤–∫–∞")
            distance_matrix = self.osrm_client.get_distance_matrix(locations)
        else:
            logger.info("‚úÖ –ò–∑–ø–æ–ª–∑–≤–∞–º –º–∞—Ç—Ä–∏—Ü–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∏—è –∫–µ—à - –±–µ–∑ OSRM –∑–∞—è–≤–∫–∏!")
        
        # –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏—Ç–µ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
        from config import config_manager
        enabled_vehicles = config_manager.get_enabled_vehicles()
        
        # –†–µ—à–∞–≤–∞–Ω–µ —Å OR-Tools
        if self.config.algorithm == "or_tools":
            solver = ORToolsSolver(self.config, enabled_vehicles, customers, distance_matrix)
        else:
            logger.warning(f"–ù–µ–ø–æ–¥–¥—ä—Ä–∂–∞–Ω –∞–ª–≥–æ—Ä–∏—Ç—ä–º: {self.config.algorithm}, –∏–∑–ø–æ–ª–∑–≤–∞–º OR-Tools")
            solver = ORToolsSolver(self.config, enabled_vehicles, customers, distance_matrix)
        
        solution = solver.solve()
        
        logger.info(f"CVRP —Ä–µ—à–µ–Ω: {solution.total_vehicles_used} –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
        
        return solution
    
    def close(self):
        """–ó–∞—Ç–≤–∞—Ä—è —Ä–µ—Å—É—Ä—Å–∏—Ç–µ"""
        self.osrm_client.close()


# –£–¥–æ–±–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
def solve_cvrp(allocation: WarehouseAllocation, depot_location: Tuple[float, float]) -> CVRPSolution:
    """–£–¥–æ–±–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Ä–µ—à–∞–≤–∞–Ω–µ –Ω–∞ CVRP"""
    solver = CVRPSolver()
    try:
        return solver.solve(allocation, depot_location)
    finally:
        solver.close() 