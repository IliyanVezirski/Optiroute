#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–æ –≤—Å–∏—á–∫–∏ –∑–∞—è–≤–∫–∏ –æ—Ç–∏–≤–∞—Ç –≤ —Å–∫–ª–∞–¥–∞
"""

from config import get_config
from input_handler import InputHandler
from warehouse_manager import WarehouseManager

def main():
    print("=== –ü–†–û–í–ï–†–ö–ê –ù–ê –†–ê–ó–ü–†–ï–î–ï–õ–ï–ù–ò–ï–¢–û ===")
    
    # –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
    config = get_config()
    print(f"\n1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ê –ê–í–¢–û–ë–£–°–ò–¢–ï:")
    
    total_capacity = 0
    if config.vehicles:
        for i, vehicle in enumerate(config.vehicles):
            if vehicle.enabled:
                vehicle_capacity = vehicle.capacity * vehicle.count
                total_capacity += vehicle_capacity
                print(f"   {vehicle.vehicle_type.value}: {vehicle.count} –±—Ä. x {vehicle.capacity} —Å—Ç. = {vehicle_capacity} —Å—Ç.")
            else:
                print(f"   {vehicle.vehicle_type.value}: –ò–ó–ö–õ–Æ–ß–ï–ù")
    
    print(f"\n   –û–ë–© –ö–ê–ü–ê–¶–ò–¢–ï–¢: {total_capacity} —Å—Ç–æ—Ç–∏–Ω–∫–∏")
    
    # –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
    try:
        print(f"\n2. –ó–ê–†–ï–ñ–î–ê–ù–ï –ù–ê –î–ê–ù–ù–ò:")
        input_handler = InputHandler()
        input_data = input_handler.load_data()
        print(f"   –û–±—â–æ –∫–ª–∏–µ–Ω—Ç–∏: {len(input_data.customers)}")
        print(f"   –û–±—â –æ–±–µ–º: {input_data.total_volume:.1f} —Å—Ç–æ—Ç–∏–Ω–∫–∏")
        print(f"   –°—ä–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±–µ–º/–∫–∞–ø–∞—Ü–∏—Ç–µ—Ç: {input_data.total_volume/total_capacity:.1%}")
        
        # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø—ä—Ä–≤–∏—Ç–µ 10 –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –æ–±–µ–º
        sorted_customers = sorted(input_data.customers, key=lambda c: c.volume, reverse=True)
        print(f"\n   –ù–∞–π-–≥–æ–ª–µ–º–∏ 10 –∫–ª–∏–µ–Ω—Ç–∞:")
        for i, customer in enumerate(sorted_customers[:10]):
            print(f"     {i+1}. –ö–ª–∏–µ–Ω—Ç {customer.id}: {customer.volume:.1f} —Å—Ç.")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–ª–æ–∫–∞—Ü–∏—è—Ç–∞
        print(f"\n3. –†–ê–ó–ü–†–ï–î–ï–õ–ï–ù–ò–ï:")
        warehouse_manager = WarehouseManager()
        allocation = warehouse_manager.allocate_customers(input_data)
        
        print(f"   üöõ –ó–∞ –∞–≤—Ç–æ–±—É—Å–∏: {len(allocation.vehicle_customers)} –∫–ª–∏–µ–Ω—Ç–∞ ({allocation.total_vehicle_volume:.1f} —Å—Ç.)")
        print(f"   üè≠ –ó–∞ —Å–∫–ª–∞–¥: {len(allocation.warehouse_customers)} –∫–ª–∏–µ–Ω—Ç–∞ ({allocation.warehouse_volume:.1f} —Å—Ç.)")
        print(f"   üìä –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ: {allocation.capacity_utilization:.1%}")
        
        # –ê–∫–æ –≤—Å–∏—á–∫–∏ —Å–∞ –≤ —Å–∫–ª–∞–¥–∞, –ø–æ–∫–∞–∂–∏ –∑–∞—â–æ
        if len(allocation.vehicle_customers) == 0:
            print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú: –í—Å–∏—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∏ —Å–∞ –≤ —Å–∫–ª–∞–¥–∞!")
            print(f"   –í—ä–∑–º–æ–∂–Ω–∏ –ø—Ä–∏—á–∏–Ω–∏:")
            print(f"   - –û–±—â–∏—è—Ç –æ–±–µ–º ({input_data.total_volume:.1f}) > –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞ ({total_capacity})")
            print(f"   - –ì—Ä–µ—à–∫–∞ –≤ –ª–æ–≥–∏–∫–∞—Ç–∞ –Ω–∞ –∞–ª–æ–∫–∞—Ü–∏—è")
            print(f"   - –ê–≤—Ç–æ–±—É—Å–∏—Ç–µ —Å–∞ –∏–∑–∫–ª—é—á–µ–Ω–∏")
        
        elif len(allocation.warehouse_customers) == 0:
            print(f"\n‚úÖ –í—Å–∏—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∏ —Å–∞ –∑–∞ –∞–≤—Ç–æ–±—É—Å–∏")
        
        else:
            print(f"\n‚úÖ –ù–æ—Ä–º–∞–ª–Ω–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
            
        # –î–µ—Ç–∞–π–ª–∏ –∑–∞ warehouse –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        print(f"\n4. WAREHOUSE –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        print(f"   enable_warehouse: {config.warehouse.enable_warehouse}")
        print(f"   move_largest_to_warehouse: {config.warehouse.move_largest_to_warehouse}")
        print(f"   sort_by_volume: {config.warehouse.sort_by_volume}")
        
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 