"""
–ú–æ–¥—É–ª –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∏–∑—Ö–æ–¥–Ω–∏ –¥–∞–Ω–Ω–∏
–°—ä–∑–¥–∞–≤–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞, Excel —Ñ–∞–π–ª–æ–≤–µ –∏ —á–∞—Ä—Ç–æ–≤–µ –∑–∞ –∞–Ω–∞–ª–∏–∑
"""

import folium
import pandas as pd
import requests
import json
from typing import List, Dict, Tuple, Optional
import os
import logging
from config import get_config, OutputConfig
from cvrp_solver import CVRPSolution, Route
from warehouse_manager import WarehouseAllocation
from input_handler import Customer
from osrm_client import get_distance_matrix_from_central_cache

# OpenPyXL imports –∑–∞ Excel —Å—Ç–∏–ª–æ–≤–µ
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ —Ç–∏–ø–æ–≤–µ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
VEHICLE_SETTINGS = {
    'internal_bus': {
        'color': 'blue',
        'icon': 'bus',
        'prefix': 'fa',
        'name': '–í—ä—Ç—Ä–µ—à–µ–Ω –∞–≤—Ç–æ–±—É—Å'
    },
    'center_bus': {
        'color': 'red', 
        'icon': 'building',
        'prefix': 'fa',
        'name': '–¶–µ–Ω—Ç—Ä–∞–ª–µ–Ω –∞–≤—Ç–æ–±—É—Å'
    },
    'external_bus': {
        'color': 'red',
        'icon': 'truck',
        'prefix': 'fa', 
        'name': '–í—ä–Ω—à–µ–Ω –∞–≤—Ç–æ–±—É—Å'
    }
}

# –¶–≤–µ—Ç–æ–≤–µ –∑–∞ –≤—Å–µ–∫–∏ –æ—Ç–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–±—É—Å
BUS_COLORS = [
    '#FF0000',  # –ß–µ—Ä–≤–µ–Ω
    '#00FF00',  # –ó–µ–ª–µ–Ω  
    '#0000FF',  # –°–∏–Ω
    '#FFFF00',  # –ñ—ä–ª—Ç
    '#FF00FF',  # –ú–∞–≥–µ–Ω—Ç–∞
    '#00FFFF',  # –¶–∏–∞–Ω
    '#FFA500',  # –û—Ä–∞–Ω–∂–µ–≤
    '#800080',  # –õ–∏–ª–∞–≤
    '#008000',  # –¢—ä–º–Ω–æ –∑–µ–ª–µ–Ω
    '#000080',  # –¢—ä–º–Ω–æ —Å–∏–Ω
    '#800000',  # –ë–æ—Ä–¥–æ
    '#808000',  # –ú–∞—Å–ª–∏–Ω–µ–Ω
    '#FF69B4',  # –†–æ–∑–æ–≤
    '#32CD32',  # –õ–∞–π–º –∑–µ–ª–µ–Ω
    '#8A2BE2',  # –°–∏–Ω—å–æ –≤–∏–æ–ª–µ—Ç–æ–≤
    '#FF4500',  # –ß–µ—Ä–≤–µ–Ω–æ –æ—Ä–∞–Ω–∂–µ–≤
    '#2E8B57',  # –ú–æ—Ä—Å–∫–æ –∑–µ–ª–µ–Ω
    '#4682B4',  # –°—Ç–æ–º–∞–Ω–µ–Ω–æ —Å–∏–Ω
    '#D2691E',  # –®–æ–∫–æ–ª–∞–¥–æ–≤
    '#DC143C'   # –¢—ä–º–Ω–æ —á–µ—Ä–≤–µ–Ω
]


class InteractiveMapGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞"""
    
    def __init__(self, config: OutputConfig):
        self.config = config
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞
        self.central_matrix = get_distance_matrix_from_central_cache([])
        self.use_osrm_routing = self.central_matrix is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ OSRM –µ –¥–æ—Å—Ç—ä–ø–µ–Ω
        try:
            import requests
            from config import get_config
            osrm_config = get_config().osrm
            test_url = f"{osrm_config.base_url.rstrip('/')}/route/v1/driving/23.3,42.7;23.3,42.7"
            response = requests.get(test_url, timeout=5)
            if response.status_code == 200:
                logger.info("‚úÖ OSRM —Å—ä—Ä–≤—ä—Ä –µ –¥–æ—Å—Ç—ä–ø–µ–Ω - —â–µ –∏–∑–ø–æ–ª–∑–≤–∞–º —Ä–µ–∞–ª–Ω–∏ –º–∞—Ä—à—Ä—É—Ç–∏")
                self.use_osrm_routing = True
            else:
                logger.warning("‚ö†Ô∏è OSRM —Å—ä—Ä–≤—ä—Ä –Ω–µ –æ—Ç–≥–æ–≤–∞—Ä—è - —â–µ –∏–∑–ø–æ–ª–∑–≤–∞–º –ø—Ä–∞–≤–∏ –ª–∏–Ω–∏–∏")
                self.use_osrm_routing = False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –º–æ–≥–∞ –¥–∞ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å OSRM —Å—ä—Ä–≤—ä—Ä–∞: {e}")
            logger.warning("   –©–µ –∏–∑–ø–æ–ª–∑–≤–∞–º –ø—Ä–∞–≤–∏ –ª–∏–Ω–∏–∏ –∑–∞ –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ")
            self.use_osrm_routing = False
    
    def create_map(self, solution: CVRPSolution, warehouse_allocation: WarehouseAllocation,
                  depot_location: Tuple[float, float]) -> folium.Map:
        """–°—ä–∑–¥–∞–≤–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞ —Å –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ"""
        logger.info("–°—ä–∑–¥–∞–≤–∞–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞")
        
        # –ü–æ–∫–∞–∑–≤–∞–º–µ OSRM —Å—Ç–∞—Ç—É—Å–∞
        if self.use_osrm_routing:
            logger.info("üõ£Ô∏è –ò–∑–ø–æ–ª–∑–≤–∞–º OSRM Route API –∑–∞ —Ä–µ–∞–ª–Ω–∏ –º–∞—Ä—à—Ä—É—Ç–∏")
        else:
            logger.warning("üìê –ò–∑–ø–æ–ª–∑–≤–∞–º –ø—Ä–∞–≤–∏ –ª–∏–Ω–∏–∏ (OSRM –Ω–µ–¥–æ—Å—Ç—ä–ø–µ–Ω)")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ç–∞
        route_map = folium.Map(
            location=depot_location,
            zoom_start=self.config.map_zoom_level,
            tiles='OpenStreetMap'
        )
        
        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –¥–µ–ø–æ—Ç–æ
        self._add_depot_marker(route_map, depot_location)
        
        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞
        from config import get_config
        center_location = get_config().locations.center_location
        center_zone_radius = get_config().locations.center_zone_radius_km
        if get_config().locations.enable_center_zone_priority:
            self._add_center_zone_circle(route_map, center_location, center_zone_radius)
        
        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ —Å OSRM –≥–µ–æ–º–µ—Ç—Ä–∏—è
        if self.config.show_route_colors:
            self._add_routes_to_map(route_map, solution.routes, depot_location)
        
        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –ª–µ–≥–µ–Ω–¥–∞
        self._add_legend(route_map, solution.routes)
        
        return route_map
    
    def _add_depot_marker(self, route_map: folium.Map, depot_location: Tuple[float, float]):
        """–î–æ–±–∞–≤—è –º–∞—Ä–∫–µ—Ä –∑–∞ –¥–µ–ø–æ—Ç–æ"""
        folium.Marker(
            depot_location,
            popup="<b>–î–µ–ø–æ/–°—Ç–∞—Ä—Ç–æ–≤–∞ —Ç–æ—á–∫–∞</b>",
            tooltip="–î–µ–ø–æ",
            icon=folium.Icon(color='black', icon='home', prefix='fa')
        ).add_to(route_map)
    
    def _add_center_zone_circle(self, route_map: folium.Map, center_location: Tuple[float, float], radius_km: float):
        """–î–æ–±–∞–≤—è –∫—Ä—ä–≥ –∑–∞ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞"""
        folium.Circle(
            location=center_location,
            radius=radius_km * 1000,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–º–µ –≤ –º–µ—Ç—Ä–∏
            color='red',
            fill=True,
            fillColor='red',
            fillOpacity=0.1,
            popup=f"<b>–¶–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞</b><br>–†–∞–¥–∏—É—Å: {radius_km} –∫–º",
            tooltip="–¶–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞"
        ).add_to(route_map)
        
        # –î–æ–±–∞–≤—è–º–µ –º–∞—Ä–∫–µ—Ä –∑–∞ —Ü–µ–Ω—Ç—ä—Ä–∞
        folium.Marker(
            location=center_location,
            popup=f"<b>–¶–µ–Ω—Ç—ä—Ä</b><br>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {center_location[0]:.6f}, {center_location[1]:.6f}<br>–†–∞–¥–∏—É—Å –∑–æ–Ω–∞: {radius_km} –∫–º",
            icon=folium.Icon(color='red', icon='star'),
            tooltip="–¶–µ–Ω—Ç—ä—Ä"
        ).add_to(route_map)
    
    def _get_osrm_route_geometry(self, start_coords: Tuple[float, float],
                                end_coords: Tuple[float, float]) -> List[Tuple[float, float]]:
        """–ü–æ–ª—É—á–∞–≤–∞ —Ä–µ–∞–ª–Ω–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç OSRM Route API"""
        try:
            import requests
            from config import get_config
            
            # OSRM Route API –∑–∞—è–≤–∫–∞ –∑–∞ –ø—ä–ª–Ω–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—è
            osrm_config = get_config().osrm
            base_url = osrm_config.base_url.rstrip('/')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏—Ç–µ –∑–∞ OSRM (lon,lat —Ñ–æ—Ä–º–∞—Ç)
            start_lon, start_lat = start_coords[1], start_coords[0]
            end_lon, end_lat = end_coords[1], end_coords[0]
            
            route_url = f"{base_url}/route/v1/driving/{start_lon:.6f},{start_lat:.6f};{end_lon:.6f},{end_lat:.6f}?geometries=geojson&overview=full&steps=false"
            
            response = requests.get(route_url, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            if data['code'] == 'Ok' and data['routes']:
                route = data['routes'][0]
                coordinates = route['geometry']['coordinates']
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–º–µ –æ—Ç [lon,lat] –∫—ä–º [lat,lon] –∑–∞ Folium
                geometry = [(coord[1], coord[0]) for coord in coordinates]
                
                logger.debug(f"‚úÖ OSRM –≥–µ–æ–º–µ—Ç—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {len(geometry)} —Ç–æ—á–∫–∏")
                return geometry
            else:
                logger.warning(f"OSRM Route API –≥—Ä–µ—à–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –≥—Ä–µ—à–∫–∞')}")
            return [start_coords, end_coords]
            
        except Exception as e:
            logger.warning(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ OSRM Route API –∑–∞—è–≤–∫–∞: {e}")
            # Fallback –∫—ä–º –ø—Ä–∞–≤–∞ –ª–∏–Ω–∏—è
            return [start_coords, end_coords]
    
    def _get_full_route_geometry(self, waypoints: List[Tuple[float, float]]) -> List[Tuple[float, float]]:
        """–ü–æ–ª—É—á–∞–≤–∞ –ø—ä–ª–Ω–∞—Ç–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—è –∑–∞ –º–∞—Ä—à—Ä—É—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–æ—á–∫–∏ –æ—Ç OSRM.
        –ê–∫–æ –∏–º–∞ —Ç–≤—ä—Ä–¥–µ –º–Ω–æ–≥–æ —Ç–æ—á–∫–∏, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ fallback –∑–∞ –ø–æ-–±—ä—Ä–∑–∞ —Ä–∞–±–æ—Ç–∞.
        """
        if len(waypoints) < 2:
            return waypoints

        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ê–∫–æ –º–∞—Ä—à—Ä—É—Ç—ä—Ç –∏–º–∞ —Ç–≤—ä—Ä–¥–µ –º–Ω–æ–≥–æ —Ç–æ—á–∫–∏, –Ω–µ —Ç—ä—Ä—Å–∏–º –ø—ä–ª–Ω–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—è,
        # –∞ —á–µ—Ä—Ç–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç–∏, –∑–∞ –¥–∞ –Ω–µ –ø—Ä–µ—Ç–æ–≤–∞—Ä–≤–∞–º–µ OSRM –∏ –¥–∞ —É—Å–∫–æ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å–∞.
        MAX_WAYPOINTS_FOR_FULL_GEOMETRY = 15
        if len(waypoints) > MAX_WAYPOINTS_FOR_FULL_GEOMETRY:
            logger.info(f"üåÄ –ú–∞—Ä—à—Ä—É—Ç—ä—Ç –∏–º–∞ {len(waypoints)} —Ç–æ—á–∫–∏ (> {MAX_WAYPOINTS_FOR_FULL_GEOMETRY}). "
                        f"–ò–∑–ø–æ–ª–∑–≤–∞–º –æ–ø—Ä–æ—Å—Ç–µ–Ω–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—è (—Å–µ–≥–º–µ–Ω—Ç–∏) –∑–∞ –ø–æ-–±—ä—Ä–∑–∞ —Ä–∞–±–æ—Ç–∞.")
            full_geometry = []
            for i in range(len(waypoints) - 1):
                # –ó–∞ –≤—Å–µ–∫–∏ —Å–µ–≥–º–µ–Ω—Ç –≤–∑–∏–º–∞–º–µ –≥–µ–æ–º–µ—Ç—Ä–∏—è—Ç–∞ (–∏–ª–∏ –ø—Ä–∞–≤–∞ –ª–∏–Ω–∏—è –ø—Ä–∏ –≥—Ä–µ—à–∫–∞)
                segment_geometry = self._get_osrm_route_geometry(waypoints[i], waypoints[i+1])
                if i > 0:
                    # –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –ø—ä—Ä–≤–∞—Ç–∞ —Ç–æ—á–∫–∞, –∑–∞ –¥–∞ –Ω—è–º–∞ –¥—É–±–ª–∏—Ä–∞–Ω–µ
                    segment_geometry = segment_geometry[1:]
                full_geometry.extend(segment_geometry)
            return full_geometry

        try:
            import requests
            from config import get_config
            
            # OSRM Route API –∑–∞—è–≤–∫–∞ –∑–∞ —Ü–µ–ª–∏—è –º–∞—Ä—à—Ä—É—Ç
            osrm_config = get_config().osrm
            base_url = osrm_config.base_url.rstrip('/')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–∞ OSRM (lon,lat —Ñ–æ—Ä–º–∞—Ç)
            coords_str = ';'.join([f"{lon:.6f},{lat:.6f}" for lat, lon in waypoints])
            
            route_url = f"{base_url}/route/v1/driving/{coords_str}?geometries=geojson&overview=full&steps=false"
            
            response = requests.get(route_url, timeout=15)
            response.raise_for_status()
            
            data = response.json()
            
            if data['code'] == 'Ok' and data['routes']:
                route = data['routes'][0]
                coordinates = route['geometry']['coordinates']
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–º–µ –æ—Ç [lon,lat] –∫—ä–º [lat,lon] –∑–∞ Folium
                geometry = [(coord[1], coord[0]) for coord in coordinates]
                
                logger.info(f"‚úÖ OSRM –º–∞—Ä—à—Ä—É—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {len(geometry)} —Ç–æ—á–∫–∏ –∑–∞ {len(waypoints)} waypoints")
                return geometry
            else:
                logger.warning(f"OSRM Route API –≥—Ä–µ—à–∫–∞ –∑–∞ –ø—ä–ª–µ–Ω –º–∞—Ä—à—Ä—É—Ç: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –≥—Ä–µ—à–∫–∞')}")
                return waypoints
                
        except Exception as e:
            logger.warning(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ OSRM Route API –∑–∞—è–≤–∫–∞ –∑–∞ –ø—ä–ª–µ–Ω –º–∞—Ä—à—Ä—É—Ç: {e}")
            # Fallback –∫—ä–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ—Å—Ç –æ—Ç –ø—Ä–∞–≤–∏ –ª–∏–Ω–∏–∏
            full_geometry = []
            for i in range(len(waypoints) - 1):
                segment = self._get_osrm_route_geometry(waypoints[i], waypoints[i + 1])
                if i == 0:
                    full_geometry.extend(segment)
                else:
                    full_geometry.extend(segment[1:])  # –ü—Ä–æ–ø—É—Å–∫–∞–º–µ –¥—É–±–ª–∏—Ä–∞–Ω–∞—Ç–∞ —Ç–æ—á–∫–∞
            
            return full_geometry if full_geometry else waypoints
    
    def _add_routes_to_map(self, route_map: folium.Map, routes: List[Route], depot_location: Tuple[float, float]):
        """–î–æ–±–∞–≤—è –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ç–∞ —Å OSRM –≥–µ–æ–º–µ—Ç—Ä–∏—è –∏ —Ñ–∏–ª—Ç—ä—Ä –∑–∞ –±—É—Å–æ–≤–µ—Ç–µ"""
        # –°—ä–∑–¥–∞–≤–∞–º–µ FeatureGroup –∑–∞ –≤—Å–µ–∫–∏ –∞–≤—Ç–æ–±—É—Å
        bus_layers = {}
        
        for route_idx, route in enumerate(routes):
            vehicle_settings = VEHICLE_SETTINGS.get(route.vehicle_type.value, {
                'color': 'gray', 
                'icon': 'circle',
                'prefix': 'fa',
                'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
            })
            
            # –í—Å–µ–∫–∏ –∞–≤—Ç–æ–±—É—Å –ø–æ–ª—É—á–∞–≤–∞ —É–Ω–∏–∫–∞–ª–µ–Ω —Ü–≤—è—Ç
            bus_color = BUS_COLORS[route_idx % len(BUS_COLORS)]
            bus_id = f"bus_{route_idx + 1}"
            
            # –°—ä–∑–¥–∞–≤–∞–º–µ FeatureGroup –∑–∞ —Ç–æ–∑–∏ –∞–≤—Ç–æ–±—É—Å
            bus_layer = folium.FeatureGroup(name=f"üöå –ê–≤—Ç–æ–±—É—Å {route_idx + 1} ({len(route.customers)} –∫–ª–∏–µ–Ω—Ç–∞)")
            bus_layers[bus_id] = bus_layer
            
            # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ç–µ –º–∞—Ä–∫–µ—Ä–∏ —Å –Ω–æ–º–µ—Ä–∞—Ü–∏—è
            for client_idx, customer in enumerate(route.customers):
                if customer.coordinates:
                    # –°—ä–∑–¥–∞–≤–∞–º–µ –Ω–æ–º–µ—Ä–∏—Ä–∞–Ω –º–∞—Ä–∫–µ—Ä
                    client_number = client_idx + 1
                    
                    # HTML –∑–∞ –Ω–æ–º–µ—Ä–∏—Ä–∞–Ω–æ –ø–∏–Ω—á–µ —Å —É–Ω–∏–∫–∞–ª–µ–Ω —Ü–≤—è—Ç –Ω–∞ –∞–≤—Ç–æ–±—É—Å–∞
                    icon_html = f'''
                    <div style="
                        background-color: {bus_color};
                        border: 3px solid white;
                        border-radius: 50%;
                        width: 30px;
                        height: 30px;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        font-weight: bold;
                        font-size: 14px;
                        color: white;
                        text-shadow: 1px 1px 1px rgba(0,0,0,0.7);
                    ">{client_number}</div>
                    '''
                    
                    popup_text = f"""
                    <div style="font-family: Arial, sans-serif;">
                        <h4 style="margin: 0; color: {bus_color};">
                            –ê–≤—Ç–æ–±—É—Å {route_idx + 1} - {vehicle_settings['name']}
                        </h4>
                        <hr style="margin: 5px 0;">
                        <b>–ö–ª–∏–µ–Ω—Ç:</b> {customer.name}<br>
                        <b>ID:</b> {customer.id}<br>
                        <b>–†–µ–¥ –≤ –º–∞—Ä—à—Ä—É—Ç–∞:</b> #{client_number}<br>
                        <b>–û–±–µ–º:</b> {customer.volume:.2f} —Å—Ç.<br>
                        <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏:</b> {customer.coordinates[0]:.6f}, {customer.coordinates[1]:.6f}
                    </div>
                    """
                    
                    # –î–æ–±–∞–≤—è–º–µ –Ω–æ–º–µ—Ä–∏—Ä–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä –≤ —Å–ª–æ—è –Ω–∞ –∞–≤—Ç–æ–±—É—Å–∞
                    marker = folium.Marker(
                        customer.coordinates,
                        popup=folium.Popup(popup_text, max_width=300),
                        tooltip=f"#{client_number}: {customer.name}",
                        icon=folium.DivIcon(
                            html=icon_html,
                            icon_size=(30, 30),
                            icon_anchor=(15, 15),
                            popup_anchor=(0, -15)
                        )
                    )
                    marker.add_to(bus_layer)
            
            # –°—ä–∑–¥–∞–≤–∞–º–µ –ø—ä–ª–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç: –¥–µ–ø–æ -> –∫–ª–∏–µ–Ω—Ç–∏ -> –¥–µ–ø–æ
            if route.customers and self.use_osrm_routing:
                logger.info(f"üõ£Ô∏è –ü–æ–ª—É—á–∞–≤–∞–º OSRM –º–∞—Ä—à—Ä—É—Ç –∑–∞ –ê–≤—Ç–æ–±—É—Å {route_idx + 1} —Å {len(route.customers)} –∫–ª–∏–µ–Ω—Ç–∞")
                
                # –ü–æ–¥–≥–æ—Ç–≤—è–º–µ –≤—Å–∏—á–∫–∏ waypoints
                waypoints = [depot_location]
                for customer in route.customers:
                    if customer.coordinates:
                        waypoints.append(customer.coordinates)
                waypoints.append(depot_location)  # –í—Ä—ä—â–∞–Ω–µ –≤ –¥–µ–ø–æ—Ç–æ
                
                # –ü–æ–ª—É—á–∞–≤–∞–º–µ —Ä–µ–∞–ª–Ω–∞—Ç–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—è –æ—Ç OSRM
                try:
                    route_geometry = self._get_full_route_geometry(waypoints)
                    
                    if len(route_geometry) > 2:
                        # –°—ä–∑–¥–∞–≤–∞–º–µ popup —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞
                        popup_text = f"""
                        <div style="font-family: Arial, sans-serif;">
                            <h4 style="margin: 0; color: {bus_color};">
                                üöå –ê–≤—Ç–æ–±—É—Å {route_idx + 1} - {vehicle_settings['name']}
                            </h4>
                            <hr style="margin: 5px 0;">
                            <b>OSRM –º–∞—Ä—à—Ä—É—Ç:</b> ‚úÖ<br>
                            <b>–ö–ª–∏–µ–Ω—Ç–∏:</b> {len(route.customers)}<br>
                            <b>–†–∞–∑—Å—Ç–æ—è–Ω–∏–µ:</b> {route.total_distance_km:.1f} –∫–º<br>
                            <b>–í—Ä–µ–º–µ:</b> {route.total_time_minutes:.0f} –º–∏–Ω<br>
                            <b>–û–±–µ–º:</b> {route.total_volume:.1f} —Å—Ç.<br>
                            <b>–ì–µ–æ–º–µ—Ç—Ä–∏—è:</b> {len(route_geometry)} —Ç–æ—á–∫–∏
                        </div>
                        """
                        
                        # –°—ä–∑–¥–∞–≤–∞–º–µ –ª–∏–Ω–∏—è—Ç–∞ –≤ —Å–ª–æ—è –Ω–∞ –∞–≤—Ç–æ–±—É—Å–∞
                        polyline = folium.PolyLine(
                            route_geometry,
                            color=bus_color,
                            weight=4,
                            opacity=0.8,
                            popup=folium.Popup(popup_text, max_width=300)
                        )
                        polyline.add_to(bus_layer)
                        logger.info(f"‚úÖ OSRM –º–∞—Ä—à—Ä—É—Ç –¥–æ–±–∞–≤–µ–Ω –∑–∞ –ê–≤—Ç–æ–±—É—Å {route_idx + 1}: {len(route_geometry)} —Ç–æ—á–∫–∏")
                    else:
                        # Fallback –∫—ä–º –ø—Ä–∞–≤–∏ –ª–∏–Ω–∏–∏
                        popup_text = f"""
                        <div style="font-family: Arial, sans-serif;">
                            <h4 style="margin: 0; color: {bus_color};">
                                üöå –ê–≤—Ç–æ–±—É—Å {route_idx + 1} - {vehicle_settings['name']}
                            </h4>
                            <hr style="margin: 5px 0;">
                            <b>OSRM –º–∞—Ä—à—Ä—É—Ç:</b> ‚ö†Ô∏è (–ø—Ä–∞–≤–∏ –ª–∏–Ω–∏–∏)<br>
                            <b>–ö–ª–∏–µ–Ω—Ç–∏:</b> {len(route.customers)}<br>
                            <b>–†–∞–∑—Å—Ç–æ—è–Ω–∏–µ:</b> {route.total_distance_km:.1f} –∫–º<br>
                            <b>–í—Ä–µ–º–µ:</b> {route.total_time_minutes:.0f} –º–∏–Ω<br>
                            <b>–û–±–µ–º:</b> {route.total_volume:.1f} —Å—Ç.
                        </div>
                        """
                        
                        polyline = folium.PolyLine(
                            waypoints,
                            color=bus_color,
                            weight=3,
                            opacity=0.6,
                            popup=folium.Popup(popup_text, max_width=300),
                            dashArray='5, 5'  # –ü—É–Ω–∫—Ç–∏—Ä–∞–Ω–∞ –ª–∏–Ω–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ —á–µ –Ω–µ –µ OSRM
                        )
                        polyline.add_to(bus_layer)
                        logger.warning(f"‚ö†Ô∏è –ò–∑–ø–æ–ª–∑–≤–∞–º –ø—Ä–∞–≤–∏ –ª–∏–Ω–∏–∏ –∑–∞ –ê–≤—Ç–æ–±—É—Å {route_idx + 1}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ OSRM –º–∞—Ä—à—Ä—É—Ç –∑–∞ –ê–≤—Ç–æ–±—É—Å {route_idx + 1}: {e}")
                    # Fallback –∫—ä–º –ø—Ä–∞–≤–∏ –ª–∏–Ω–∏–∏
                    waypoints = [depot_location]
                    for customer in route.customers:
                        if customer.coordinates:
                            waypoints.append(customer.coordinates)
                    waypoints.append(depot_location)
                    
                    popup_text = f"""
                    <div style="font-family: Arial, sans-serif;">
                        <h4 style="margin: 0; color: {bus_color};">
                            üöå –ê–≤—Ç–æ–±—É—Å {route_idx + 1} - {vehicle_settings['name']}
                        </h4>
                        <hr style="margin: 5px 0;">
                        <b>OSRM –º–∞—Ä—à—Ä—É—Ç:</b> ‚ùå (fallback)<br>
                        <b>–ö–ª–∏–µ–Ω—Ç–∏:</b> {len(route.customers)}<br>
                        <b>–†–∞–∑—Å—Ç–æ—è–Ω–∏–µ:</b> {route.total_distance_km:.1f} –∫–º<br>
                        <b>–í—Ä–µ–º–µ:</b> {route.total_time_minutes:.0f} –º–∏–Ω<br>
                        <b>–û–±–µ–º:</b> {route.total_volume:.1f} —Å—Ç.
                    </div>
                    """
                    
                    polyline = folium.PolyLine(
                        waypoints,
                        color=bus_color,
                        weight=3,
                        opacity=0.6,
                        popup=folium.Popup(popup_text, max_width=300),
                        dashArray='5, 5'
                    )
                    polyline.add_to(bus_layer)
            
            elif route.customers:
                # Fallback –∫—ä–º –ø—Ä–∞–≤–∏ –ª–∏–Ω–∏–∏ –∞–∫–æ OSRM –µ –∏–∑–∫–ª—é—á–µ–Ω
                waypoints = [depot_location]
                for customer in route.customers:
                    if customer.coordinates:
                        waypoints.append(customer.coordinates)
                waypoints.append(depot_location)
                
                polyline = folium.PolyLine(
                    waypoints,
                    color=bus_color,
                    weight=3,
                    opacity=0.8,
                    popup=f"üöå –ê–≤—Ç–æ–±—É—Å {route_idx + 1} - {vehicle_settings['name']}"
                )
                polyline.add_to(bus_layer)
        
        # –î–æ–±–∞–≤—è–º–µ –≤—Å–∏—á–∫–∏ —Å–ª–æ–µ–≤–µ –Ω–∞ –∞–≤—Ç–æ–±—É—Å–∏—Ç–µ –∫—ä–º –∫–∞—Ä—Ç–∞—Ç–∞
        for bus_layer in bus_layers.values():
            bus_layer.add_to(route_map)
        
        # –î–æ–±–∞–≤—è–º–µ LayerControl –∑–∞ —Ñ–∏–ª—Ç—ä—Ä
        folium.LayerControl(
            position='topright',
            collapsed=False,
            overlay=True,
            control=True
                ).add_to(route_map)
    
    def _add_legend(self, route_map: folium.Map, routes: List[Route]):
        """–î–æ–±–∞–≤—è –ª–µ–≥–µ–Ω–¥–∞ –Ω–∞ –∫–∞—Ä—Ç–∞—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ"""
        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_distance = sum(route.total_distance_km for route in routes)
        total_time = sum(route.total_time_minutes for route in routes)
        total_volume = sum(route.total_volume for route in routes)
        osrm_routes = sum(1 for route in routes if self.use_osrm_routing)
        
        legend_html = f'''
        <div style="position: fixed; 
                    top: 10px; left: 10px; width: 280px; height: auto; 
                    background-color: white; border:2px solid grey; z-index:9999; 
                    font-size:14px; padding: 10px; border-radius: 5px;
                    box-shadow: 0 0 15px rgba(0,0,0,0.2);">
        <h4 style="margin-top:0; margin-bottom:10px; text-align: center;">üó∫Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
        '''
        
        # –î–æ–±–∞–≤—è–º–µ –¥–µ–ø–æ
        legend_html += '''
        <p style="margin: 5px 0;">
            <i class="fa fa-home" style="color: black; margin-right: 8px;"></i>
            –î–µ–ø–æ
        </p>
        '''
        
        # –î–æ–±–∞–≤—è–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ñ–∏–ª—Ç—ä—Ä–∞
        legend_html += '''
        <hr style="margin: 10px 0;">
        <p style="margin: 5px 0; font-weight: bold;">üöå –§–∏–ª—Ç—ä—Ä –Ω–∞ –∞–≤—Ç–æ–±—É—Å–∏:</p>
        <p style="margin: 5px 0; font-size: 12px; color: #666;">
            –ò–∑–ø–æ–ª–∑–≤–∞–π –∫–æ–Ω—Ç—Ä–æ–ª–∞ –≤ –≥–æ—Ä–Ω–∏—è –¥–µ—Å–µ–Ω —ä–≥—ä–ª –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ/—Å–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ –æ—Ç–¥–µ–ª–Ω–∏ –∞–≤—Ç–æ–±—É—Å–∏
            </p>
            '''
        
        # –î–æ–±–∞–≤—è–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ OSRM –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ
        osrm_status = "üõ£Ô∏è OSRM –º–∞—Ä—à—Ä—É—Ç–∏" if self.use_osrm_routing else "üìê –ü—Ä–∞–≤–∏ –ª–∏–Ω–∏–∏"
        
        legend_html += f'''
        <hr style="margin: 10px 0;">
        <p style="margin: 5px 0; font-size: 12px; color: #666;">
            –ß–∏—Å–ª–∞—Ç–∞ –ø–æ–∫–∞–∑–≤–∞—Ç —Ä–µ–¥–∞ –Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ<br>
            {osrm_status}
        </p>
        '''
        
        # –î–æ–±–∞–≤—è–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        legend_html += f'''
        <hr style="margin: 10px 0;">
        <p style="margin: 5px 0; font-size: 12px; font-weight: bold;">
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
        </p>
        <p style="margin: 3px 0; font-size: 11px; color: #555;">
            ‚Ä¢ –û–±—â–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ: {total_distance:.1f} –∫–º<br>
            ‚Ä¢ –û–±—â–æ –≤—Ä–µ–º–µ: {total_time:.0f} –º–∏–Ω<br>
            ‚Ä¢ –û–±—â –æ–±–µ–º: {total_volume:.1f} —Å—Ç.<br>
            ‚Ä¢ OSRM –º–∞—Ä—à—Ä—É—Ç–∏: {osrm_routes}/{len(routes)}
        </p>
        </div>
        '''
        
        # –î–æ–±–∞–≤—è–º–µ –ª–µ–≥–µ–Ω–¥–∞—Ç–∞ –∫—ä–º –∫–∞—Ä—Ç–∞—Ç–∞
        legend_element = folium.Element(legend_html)
        route_map.get_root().add_child(legend_element)
    
    def save_map(self, route_map: folium.Map, file_path: Optional[str] = None) -> str:
        """–ó–∞–ø–∏—Å–≤–∞ –∫–∞—Ä—Ç–∞—Ç–∞ –≤—ä–≤ —Ñ–∞–π–ª"""
        file_path = file_path or self.config.map_output_file
        
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        route_map.save(file_path)
        
        logger.info(f"–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ {file_path}")
        return file_path


class ExcelExporter:
    """–ï–∫—Å–ø–æ—Ä—Ç—ä—Ä –Ω–∞ Excel —Ñ–∞–π–ª–æ–≤–µ"""
    
    def __init__(self, config: OutputConfig):
        self.config = config
    
    def export_all_to_single_excel(self, solution: CVRPSolution, warehouse_customers: List[Customer]) -> str:
        """–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞ –≤—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏ –≤ –µ–¥–∏–Ω Excel —Ñ–∞–π–ª —Å –æ—Ç–¥–µ–ª–Ω–∏ sheets"""
        from openpyxl import Workbook
        from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
        
        # –°—ä–∑–¥–∞–≤–∞–º–µ –æ—Å–Ω–æ–≤–Ω–∏—è —Ñ–∞–π–ª
        file_path = os.path.join(self.config.excel_output_dir, "cvrp_report.xlsx")
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        wb = Workbook()
        
        # –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ default sheet
        if wb.active:
            wb.remove(wb.active)
        
        # 1. SHEET: –ú–∞—Ä—à—Ä—É—Ç–∏ (Vehicle Routes)
        if solution.routes:
            self._create_routes_sheet(wb, solution)
        
        # 2. SHEET: –ù–µ–æ–±—Å–ª—É–∂–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏ (Unserved Customers)
        if warehouse_customers:
            self._create_unserved_sheet(wb, warehouse_customers)
        
        # 3. SHEET: –û–±–æ–±—â–µ–Ω–∏–µ (Summary)
        self._create_summary_sheet(wb, solution, warehouse_customers)
        
        # 4. SHEET: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞–≤—Ç–æ–±—É—Å–∏ (Vehicle Statistics)
        if solution.routes:
            self._create_vehicle_stats_sheet(wb, solution)
        
        # –ó–∞–ø–∏—Å–≤–∞–º–µ —Ñ–∞–π–ª–∞
        wb.save(file_path)
        logger.info(f"–û–±—â Excel –æ—Ç—á–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ {file_path}")
        return file_path
    
    def _create_routes_sheet(self, wb, solution: CVRPSolution):
        """–°—ä–∑–¥–∞–≤–∞ sheet —Å –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ"""
        ws = wb.create_sheet("–ú–∞—Ä—à—Ä—É—Ç–∏")
        
        # –ó–∞–≥–ª–∞–≤–Ω–∏ —Ä–µ–¥–æ–≤–µ
        headers = [
            '–ú–∞—Ä—à—Ä—É—Ç', '–ü—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ', '–†–µ–¥ –≤ –º–∞—Ä—à—Ä—É—Ç–∞', 
            'ID –∫–ª–∏–µ–Ω—Ç', '–ò–º–µ –∫–ª–∏–µ–Ω—Ç', '–û–±–µ–º (—Å—Ç.)', 'GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏',
            '–†–∞–∑—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—ä—Ä–∞ (–∫–º)', '–î–µ–ø–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞ —Ç–æ—á–∫–∞',
            '–†–∞–∑—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ø—Ä–µ–¥–∏—à–µ–Ω (–∫–º)', '–ù–∞–∫–æ–ø–ª–µ–Ω–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ (–∫–º)',
            '–í—Ä–µ–º–µ –æ—Ç –ø—Ä–µ–¥–∏—à–µ–Ω (–º–∏–Ω)', '–ù–∞–∫–æ–ø–ª–µ–Ω–æ –≤—Ä–µ–º–µ (–º–∏–Ω)'
        ]
        
        # –°—Ç–∏–ª–æ–≤–µ –∑–∞ –∑–∞–≥–ª–∞–≤–Ω–∏—è —Ä–µ–¥
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")
        
        # –î–æ–±–∞–≤—è–º–µ –∑–∞–≥–ª–∞–≤–Ω–∏—è —Ä–µ–¥
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
        
        # –î–∞–Ω–Ω–∏ –∑–∞ –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ
        row = 2
        center_location = get_config().locations.center_location
        
        for i, route in enumerate(solution.routes):
            vehicle_name = VEHICLE_SETTINGS.get(route.vehicle_type.value, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
            
            # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∞—Ç–∞ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ
            cumulative_distance = 0
            cumulative_time = 0
            previous_customer_coords = route.depot_location  # –ó–∞–ø–æ—á–≤–∞–º–µ –æ—Ç –¥–µ–ø–æ—Ç–æ
            
            for j, customer in enumerate(route.customers):
                # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –¥–æ —Ü–µ–Ω—Ç—ä—Ä–∞
                distance_to_center = self._calculate_distance_to_center(customer.coordinates, center_location) if customer.coordinates else 0.0
                
                # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –æ—Ç –ø—Ä–µ–¥–∏—à–Ω–∏—è –∫–ª–∏–µ–Ω—Ç
                distance_from_previous = self._calculate_distance_between_points(
                    previous_customer_coords, customer.coordinates
                ) if customer.coordinates else 0.0
                cumulative_distance += distance_from_previous
                
                # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –≤—Ä–µ–º–µ—Ç–æ –æ—Ç –ø—Ä–µ–¥–∏—à–Ω–∏—è –∫–ª–∏–µ–Ω—Ç (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–æ)
                time_from_previous = self._calculate_time_between_points(
                    previous_customer_coords, customer.coordinates
                ) if customer.coordinates else 0.0
                cumulative_time += time_from_previous
                
                # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—ä—Ç –µ –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞
                center_zone_radius = get_config().locations.center_zone_radius_km
                is_in_center_zone = distance_to_center <= center_zone_radius
                
                data = [
                    i + 1,  # –ú–∞—Ä—à—Ä—É—Ç
                    vehicle_name,  # –ü—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ
                    j + 1,  # –†–µ–¥ –≤ –º–∞—Ä—à—Ä—É—Ç–∞
                    customer.id,  # ID –∫–ª–∏–µ–Ω—Ç
                    customer.name,  # –ò–º–µ –∫–ª–∏–µ–Ω—Ç
                    customer.volume,  # –û–±–µ–º
                    customer.original_gps_data,  # GPS
                    round(distance_to_center, 2),  # –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—ä—Ä–∞
                    f"{route.depot_location[0]:.6f}, {route.depot_location[1]:.6f}",  # –î–µ–ø–æ
                    round(distance_from_previous, 2),  # –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ø—Ä–µ–¥–∏—à–µ–Ω
                    round(cumulative_distance, 2),  # –ù–∞–∫–æ–ø–ª–µ–Ω–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ
                    round(time_from_previous, 1),  # –í—Ä–µ–º–µ –æ—Ç –ø—Ä–µ–¥–∏—à–µ–Ω
                    round(cumulative_time, 1),  # –ù–∞–∫–æ–ø–ª–µ–Ω–æ –≤—Ä–µ–º–µ
                    "–î–ê" if is_in_center_zone else "–ù–ï"  # –í —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞
                ]
                
                for col, value in enumerate(data, 1):
                    ws.cell(row=row, column=col, value=value)
                
                row += 1
                previous_customer_coords = customer.coordinates
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–∞–∑—à–∏—Ä—è–≤–∞–Ω–µ –Ω–∞ –∫–æ–ª–æ–Ω–∏—Ç–µ
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column_letter].width = adjusted_width
    
    def _create_unserved_sheet(self, wb, warehouse_customers: List[Customer]):
        """–°—ä–∑–¥–∞–≤–∞ sheet —Å –Ω–µ–æ–±—Å–ª—É–∂–µ–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∏"""
        ws = wb.create_sheet("–ù–µ–æ–±—Å–ª—É–∂–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏")
        
        headers = [
            'ID', '–ò–º–µ', '–û–±–µ–º (—Å—Ç.)', 'GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏', 
            'Latitude', 'Longitude', '–†–∞–∑—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—ä—Ä–∞ (–∫–º)'
        ]
        
        # –°—Ç–∏–ª–æ–≤–µ –∑–∞ –∑–∞–≥–ª–∞–≤–Ω–∏—è —Ä–µ–¥
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="C5504B", end_color="C5504B", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")
        
        # –î–æ–±–∞–≤—è–º–µ –∑–∞–≥–ª–∞–≤–Ω–∏—è —Ä–µ–¥
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
        
        # –î–∞–Ω–Ω–∏
        center_location = get_config().locations.center_location
        row = 2
        
        for customer in warehouse_customers:
            distance_to_center = self._calculate_distance_to_center(customer.coordinates, center_location)
            
            data = [
                customer.id,
                customer.name,
                customer.volume,
                customer.original_gps_data,
                customer.coordinates[0] if customer.coordinates else '',
                customer.coordinates[1] if customer.coordinates else '',
                round(distance_to_center, 2)
            ]
            
            for col, value in enumerate(data, 1):
                ws.cell(row=row, column=col, value=value)
            
            row += 1
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–∞–∑—à–∏—Ä—è–≤–∞–Ω–µ –Ω–∞ –∫–æ–ª–æ–Ω–∏—Ç–µ
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column_letter].width = adjusted_width
    
    def _create_summary_sheet(self, wb, solution: CVRPSolution, warehouse_customers: List[Customer]):
        """–°—ä–∑–¥–∞–≤–∞ sheet —Å –æ–±–æ–±—â–µ–Ω–∏–µ"""
        ws = wb.create_sheet("–û–±–æ–±—â–µ–Ω–∏–µ")
        
        # –°—Ç–∏–ª–æ–≤–µ
        title_font = Font(bold=True, size=14)
        header_font = Font(bold=True)
        header_fill = PatternFill(start_color="D9E1F2", end_color="D9E1F2", fill_type="solid")
        
        # –ó–∞–≥–ª–∞–≤–∏–µ
        ws['A1'] = "CVRP –û–¢–ß–ï–¢ - –û–ë–û–ë–©–ï–ù–ò–ï"
        ws['A1'].font = title_font
        
        # –û—Å–Ω–æ–≤–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        row = 3
        stats = [
            ("–û–±—â–æ –∫–ª–∏–µ–Ω—Ç–∏", len(solution.routes) + len(warehouse_customers)),
            ("–û–±—Å–ª—É–∂–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏", sum(len(route.customers) for route in solution.routes)),
            ("–ù–µ–æ–±—Å–ª—É–∂–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏", len(warehouse_customers)),
            ("–ë—Ä–æ–π –º–∞—Ä—à—Ä—É—Ç–∏", len(solution.routes)),
            ("–û–±—â–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ (–∫–º)", round(solution.total_distance_km, 2)),
            ("–û–±—â–æ –≤—Ä–µ–º–µ (–º–∏–Ω)", round(solution.total_time_minutes, 2)),
            ("–û–±—â –æ–±–µ–º (—Å—Ç.)", round(sum(route.total_volume for route in solution.routes), 2))
        ]
        
        for stat_name, stat_value in stats:
            ws[f'A{row}'] = stat_name
            ws[f'A{row}'].font = header_font
            ws[f'B{row}'] = stat_value
            row += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø –∞–≤—Ç–æ–±—É—Å
        row += 2
        ws[f'A{row}'] = "–°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û –¢–ò–ü –ê–í–¢–û–ë–£–°"
        ws[f'A{row}'].font = title_font
        row += 1
        
        vehicle_stats = {}
        for route in solution.routes:
            vehicle_type = route.vehicle_type.value
            if vehicle_type not in vehicle_stats:
                vehicle_stats[vehicle_type] = {
                    'count': 0, 'distance': 0, 'volume': 0, 'customers': 0
                }
            vehicle_stats[vehicle_type]['count'] += 1
            vehicle_stats[vehicle_type]['distance'] += route.total_distance_km
            vehicle_stats[vehicle_type]['volume'] += route.total_volume
            vehicle_stats[vehicle_type]['customers'] += len(route.customers)
        
        # –ó–∞–≥–ª–∞–≤–Ω–∏ —Ä–µ–¥–æ–≤–µ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        headers = ['–¢–∏–ø –∞–≤—Ç–æ–±—É—Å', '–ë—Ä–æ–π –º–∞—Ä—à—Ä—É—Ç–∏', '–û–±—â–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ (–∫–º)', '–û–±—â –æ–±–µ–º (—Å—Ç.)', '–û–±—â–æ –∫–ª–∏–µ–Ω—Ç–∏']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col, value=header)
            cell.font = header_font
            cell.fill = header_fill
        row += 1
        
        # –î–∞–Ω–Ω–∏ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for vehicle_type, stats in vehicle_stats.items():
            vehicle_name = VEHICLE_SETTINGS.get(vehicle_type, {}).get('name', vehicle_type)
            data = [
                vehicle_name,
                stats['count'],
                round(stats['distance'], 2),
                round(stats['volume'], 2),
                stats['customers']
            ]
            for col, value in enumerate(data, 1):
                ws.cell(row=row, column=col, value=value)
            row += 1
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–∞–∑—à–∏—Ä—è–≤–∞–Ω–µ –Ω–∞ –∫–æ–ª–æ–Ω–∏—Ç–µ
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column_letter].width = adjusted_width
    
    def _create_vehicle_stats_sheet(self, wb, solution: CVRPSolution):
        """–°—ä–∑–¥–∞–≤–∞ sheet —Å—ä—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Ç–¥–µ–ª–Ω–∏ –∞–≤—Ç–æ–±—É—Å–∏"""
        ws = wb.create_sheet("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞–≤—Ç–æ–±—É—Å–∏")
        
        headers = [
            '–ú–∞—Ä—à—Ä—É—Ç', '–¢–∏–ø –∞–≤—Ç–æ–±—É—Å', '–ë—Ä–æ–π –∫–ª–∏–µ–Ω—Ç–∏', '–û–±—â –æ–±–µ–º (—Å—Ç.)',
            '–†–∞–∑—Å—Ç–æ—è–Ω–∏–µ (–∫–º)', '–í—Ä–µ–º–µ (–º–∏–Ω)', '–ö–∞–ø–∞—Ü–∏—Ç–µ—Ç –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ (%)',
            '–°—Ä–µ–¥–Ω–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—ä—Ä–∞ (–∫–º)', '–î–µ–ø–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞ —Ç–æ—á–∫–∞'
        ]
        
        # –°—Ç–∏–ª–æ–≤–µ –∑–∞ –∑–∞–≥–ª–∞–≤–Ω–∏—è —Ä–µ–¥
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="70AD47", end_color="70AD47", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")
        
        # –î–æ–±–∞–≤—è–º–µ –∑–∞–≥–ª–∞–≤–Ω–∏—è —Ä–µ–¥
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
        
        # –î–∞–Ω–Ω–∏
        center_location = get_config().locations.center_location
        row = 2
        
        for i, route in enumerate(solution.routes):
            vehicle_name = VEHICLE_SETTINGS.get(route.vehicle_type.value, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
            
            # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Å—Ä–µ–¥–Ω–æ—Ç–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—ä—Ä–∞
            distances_to_center = []
            for customer in route.customers:
                distance = self._calculate_distance_to_center(customer.coordinates, center_location)
                distances_to_center.append(distance)
            avg_distance_to_center = sum(distances_to_center) / len(distances_to_center) if distances_to_center else 0
            
            # –ö–∞–ø–∞—Ü–∏—Ç–µ—Ç –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ (—Ç—Ä—è–±–≤–∞ –¥–∞ –≤–∑–µ–º–µ–º capacity –æ—Ç config)
            vehicle_config = self._get_vehicle_config(route.vehicle_type)
            capacity_usage = 0
            if vehicle_config and vehicle_config.capacity > 0:
                capacity_usage = (route.total_volume / vehicle_config.capacity * 100)
            
            data = [
                i + 1,  # –ú–∞—Ä—à—Ä—É—Ç
                vehicle_name,  # –¢–∏–ø –∞–≤—Ç–æ–±—É—Å
                len(route.customers),  # –ë—Ä–æ–π –∫–ª–∏–µ–Ω—Ç–∏
                round(route.total_volume, 2),  # –û–±—â –æ–±–µ–º
                round(route.total_distance_km, 2),  # –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ
                round(route.total_time_minutes, 2),  # –í—Ä–µ–º–µ
                round(capacity_usage, 1),  # –ö–∞–ø–∞—Ü–∏—Ç–µ—Ç –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ
                round(avg_distance_to_center, 2),  # –°—Ä–µ–¥–Ω–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—ä—Ä–∞
                f"{route.depot_location[0]:.6f}, {route.depot_location[1]:.6f}"  # –î–µ–ø–æ
            ]
            
            for col, value in enumerate(data, 1):
                ws.cell(row=row, column=col, value=value)
            
            row += 1
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–∞–∑—à–∏—Ä—è–≤–∞–Ω–µ –Ω–∞ –∫–æ–ª–æ–Ω–∏—Ç–µ
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column_letter].width = adjusted_width
    
    def _calculate_distance_to_center(self, coordinates: Optional[Tuple[float, float]], center_location: Tuple[float, float]) -> float:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –¥–æ —Ü–µ–Ω—Ç—ä—Ä–∞ –≤ –∫–º"""
        if not coordinates or not center_location:
            return 0.0
        
        from math import radians, sin, cos, sqrt, atan2
        R = 6371  # Earth radius in km
        
        lat1, lon1 = radians(coordinates[0]), radians(coordinates[1])
        lat2, lon2 = radians(center_location[0]), radians(center_location[1])
        
        dlat = lat2 - lat1
        dlon = lon2 - lon1
        
        a = sin(dlat/2)**2 + cos(lat1)*cos(lat2)*sin(dlon/2)**2
        c = 2 * atan2(sqrt(a), sqrt(1-a))
        
        return R * c
    
    def _calculate_distance_between_points(self, point1: Optional[Tuple[float, float]], point2: Optional[Tuple[float, float]]) -> float:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –º–µ–∂–¥—É –¥–≤–µ —Ç–æ—á–∫–∏ –≤ –∫–º"""
        if not point1 or not point2:
            return 0.0
        
        from math import radians, sin, cos, sqrt, atan2
        R = 6371  # Earth radius in km
        
        lat1, lon1 = radians(point1[0]), radians(point1[1])
        lat2, lon2 = radians(point2[0]), radians(point2[1])
        
        dlat = lat2 - lat1
        dlon = lon2 - lon1
        
        a = sin(dlat/2)**2 + cos(lat1)*cos(lat2)*sin(dlon/2)**2
        c = 2 * atan2(sqrt(a), sqrt(1-a))
        
        return R * c
    
    def _calculate_time_between_points(self, point1: Optional[Tuple[float, float]], point2: Optional[Tuple[float, float]]) -> float:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –ø—ä—Ç—É–≤–∞–Ω–µ –º–µ–∂–¥—É –¥–≤–µ —Ç–æ—á–∫–∏ –≤ –º–∏–Ω—É—Ç–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–æ)"""
        if not point1 or not point2:
            return 0.0
        
        distance_km = self._calculate_distance_between_points(point1, point2)
        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–æ –≤—Ä–µ–º–µ –∑–∞ –ø—ä—Ç—É–≤–∞–Ω–µ: 2 –º–∏–Ω—É—Ç–∏ –Ω–∞ –∫–º (–≥—Ä–∞–¥—Å–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç)
        # –¢–æ–≤–∞ –≤–∫–ª—é—á–≤–∞ —Å–ø–∏—Ä–∞—á–∫–∏, —Å–≤–µ—Ç–æ—Ñ–∞—Ä–∏, –∑–∞–¥—Ä—ä—Å—Ç–≤–∞–Ω–∏—è –∏ —Ç.–Ω.
        return distance_km * 2

    def _get_vehicle_config(self, vehicle_type):
        """–í—Ä—ä—â–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –∑–∞ –¥–∞–¥–µ–Ω —Ç–∏–ø –ø—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ"""
        from config import get_config
        vehicle_configs = get_config().vehicles
        
        if vehicle_configs:
            for config in vehicle_configs:
                if config.vehicle_type == vehicle_type:
                    return config
        return None
    
    def export_warehouse_orders(self, warehouse_customers: List[Customer]) -> str:
        """–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞ –∑–∞—è–≤–∫–∏—Ç–µ –≤ —Å–∫–ª–∞–¥–∞ (–∑–∞ —Å—ä–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç)"""
        if not warehouse_customers:
            logger.info("–ù—è–º–∞ –∑–∞—è–≤–∫–∏ –∑–∞ –µ–∫—Å–ø–æ—Ä—Ç –≤ —Å–∫–ª–∞–¥–∞")
            return ""
        
        file_path = os.path.join(self.config.excel_output_dir, self.config.warehouse_excel_file)
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        data = []
        for customer in warehouse_customers:
            data.append({
                'ID': customer.id,
                '–ò–º–µ': customer.name,
                '–û–±–µ–º (—Å—Ç.)': customer.volume,
                'GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏': customer.original_gps_data,
                'Latitude': customer.coordinates[0] if customer.coordinates else '',
                'Longitude': customer.coordinates[1] if customer.coordinates else ''
            })
        
        df = pd.DataFrame(data)
        df.to_excel(file_path, index=False)
        
        logger.info(f"–°–∫–ª–∞–¥–æ–≤–∏ –∑–∞—è–≤–∫–∏ –µ–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –≤ {file_path}")
        return file_path
    
    def export_vehicle_routes(self, solution: CVRPSolution) -> str:
        """–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ –Ω–∞ –ø—Ä–µ–≤–æ–∑–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ (–∑–∞ —Å—ä–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç)"""
        file_path = os.path.join(self.config.excel_output_dir, self.config.routes_excel_file)
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        
        data = []
        for i, route in enumerate(solution.routes):
            vehicle_name = VEHICLE_SETTINGS.get(route.vehicle_type.value, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
            for j, customer in enumerate(route.customers):
                data.append({
                    '–ú–∞—Ä—à—Ä—É—Ç': i + 1,
                    '–ü—Ä–µ–≤–æ–∑–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ': vehicle_name,
                    '–†–µ–¥ –≤ –º–∞—Ä—à—Ä—É—Ç–∞': j + 1,
                    'ID –∫–ª–∏–µ–Ω—Ç': customer.id,
                    '–ò–º–µ –∫–ª–∏–µ–Ω—Ç': customer.name,
                    '–û–±–µ–º (—Å—Ç.)': customer.volume,
                    'GPS': customer.original_gps_data
                })
        
        df = pd.DataFrame(data)
        df.to_excel(file_path, index=False, engine='openpyxl')
        
        logger.info(f"–ú–∞—Ä—à—Ä—É—Ç–∏ –µ–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –≤ {file_path}")
        return file_path


class OutputHandler:
    """–ì–ª–∞–≤–µ–Ω –∫–ª–∞—Å –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∏–∑—Ö–æ–¥–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏"""
    
    def __init__(self, config: Optional[OutputConfig] = None):
        self.config = config or get_config().output
        self.excel_exporter = ExcelExporter(self.config)
    
    def generate_all_outputs(self, solution: CVRPSolution, 
                           warehouse_allocation: WarehouseAllocation,
                           depot_location: Tuple[float, float]) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ –≤—Å–∏—á–∫–∏ –∏–∑—Ö–æ–¥–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ –∏ –≤—Ä—ä—â–∞ —Ä–µ—á–Ω–∏–∫ —Å –ø—ä—Ç–∏—â–∞—Ç–∞ –¥–æ —Ç—è—Ö"""
        logger.info("–ó–∞–ø–æ—á–≤–∞–º –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –∏–∑—Ö–æ–¥–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ")
        output_files = {}

        # 1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞
        if self.config.enable_interactive_map:
            map_gen = InteractiveMapGenerator(self.config)
            route_map = map_gen.create_map(solution, warehouse_allocation, depot_location)
            map_file = map_gen.save_map(route_map)
            output_files['map'] = map_file
        
        # 2. –û–±–µ–¥–∏–Ω—è–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –Ω–µ–æ–±—Å–ª—É–∂–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏
        all_unserviced_customers = warehouse_allocation.warehouse_customers + solution.dropped_customers
        
        # 3. –ï–∫—Å–ø–æ—Ä—Ç –≤ –µ–¥–∏–Ω –æ–±—â Excel —Ñ–∞–π–ª —Å –æ—Ç–¥–µ–ª–Ω–∏ sheets
        if solution.routes or all_unserviced_customers:
            excel_file = self.excel_exporter.export_all_to_single_excel(solution, all_unserviced_customers)
            if excel_file:
                output_files['excel_report'] = excel_file
        
        logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ {len(output_files)} –∏–∑—Ö–æ–¥–Ω–∏ —Ñ–∞–π–ª–∞")
        return output_files


# –£–¥–æ–±–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
def generate_outputs(solution: CVRPSolution, warehouse_allocation: WarehouseAllocation,
                   depot_location: Tuple[float, float]) -> Dict[str, str]:
    """–£–¥–æ–±–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –∏–∑—Ö–æ–¥–∏"""
    handler = OutputHandler()
    return handler.generate_all_outputs(solution, warehouse_allocation, depot_location) 