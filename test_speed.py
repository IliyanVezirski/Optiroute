#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—Ç–∞ –Ω–∞ –Ω–æ–≤–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω OSRM –ø–æ–¥—Ö–æ–¥
"""

import time
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from osrm_client import create_osrm_client

def test_speed_optimization():
    """–¢–µ—Å—Ç–≤–∞ —Å–∫–æ—Ä–æ—Å—Ç—Ç–∞ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–∏—è –ø–æ–¥—Ö–æ–¥"""
    
    print("üöÄ –¢–ï–°–¢ –ù–ê –°–ö–û–†–û–°–¢–¢–ê –ù–ê OSRM –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò–¢–ï")
    print("=" * 60)
    
    client = create_osrm_client()
    
    # –¢–µ—Å—Ç 1: –ú–∞–ª–∫–∏ –¥–∞–Ω–Ω–∏ (10 –ª–æ–∫–∞—Ü–∏–∏ = 90 –∑–∞—è–≤–∫–∏)
    print("1Ô∏è‚É£ –¢–ï–°–¢: 10 –ª–æ–∫–∞—Ü–∏–∏ (90 –∑–∞—è–≤–∫–∏)")
    locations_10 = [
        (42.6977, 23.3219),  # –°–æ—Ñ–∏—è —Ü–µ–Ω—Ç—ä—Ä
        (42.7001, 23.3240),  # –±–ª–∏–∑–æ –¥–æ —Ü–µ–Ω—Ç—ä—Ä–∞
        (42.6950, 23.3190),  # —é–∂–Ω–æ –æ—Ç —Ü–µ–Ω—Ç—ä—Ä–∞
        (42.7020, 23.3280),  # —Å–µ–≤–µ—Ä–Ω–æ –æ—Ç —Ü–µ–Ω—Ç—ä—Ä–∞
        (42.6930, 23.3160),  # —é–≥–æ–∑–∞–ø–∞–¥–Ω–æ
        (42.6980, 23.3300),  # —Å–µ–≤–µ—Ä–æ–∏–∑—Ç–æ—á–Ω–æ
        (42.6920, 23.3130),  # —é–≥–æ–∑–∞–ø–∞–¥–Ω–æ 2
        (42.7040, 23.3200),  # —Å–µ–≤–µ—Ä–æ–∑–∞–ø–∞–¥–Ω–æ
        (42.6900, 23.3250),  # —é–∂–Ω–æ 2
        (42.7000, 23.3150)   # —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–æ 2
    ]
    
    start_time = time.time()
    matrix_10 = client.get_distance_matrix(locations_10)
    duration_10 = time.time() - start_time
    speed_10 = 90 / duration_10  # –∑–∞—è–≤–∫–∏/—Å–µ–∫
    
    print(f"‚úÖ 10 –ª–æ–∫–∞—Ü–∏–∏ –∑–∞–≤—ä—Ä—à–∏ –∑–∞ {duration_10:.2f}s")
    print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç: {speed_10:.1f} –∑–∞—è–≤–∫–∏/—Å–µ–∫")
    print(f"üìä –†–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏: {matrix_10.distances[0][1]:.0f}–º")
    print()
    
    # –¢–µ—Å—Ç 2: –°—Ä–µ–¥–Ω–∏ –¥–∞–Ω–Ω–∏ (20 –ª–æ–∫–∞—Ü–∏–∏ = 380 –∑–∞—è–≤–∫–∏) 
    print("2Ô∏è‚É£ –¢–ï–°–¢: 20 –ª–æ–∫–∞—Ü–∏–∏ (380 –∑–∞—è–≤–∫–∏)")
    locations_20 = locations_10 + [
        (42.6960, 23.3320),
        (42.6940, 23.3110),
        (42.7060, 23.3180),
        (42.6880, 23.3270),
        (42.7020, 23.3130),
        (42.6990, 23.3340),
        (42.6910, 23.3090),
        (42.7080, 23.3160),
        (42.6860, 23.3290),
        (42.7040, 23.3110)
    ]
    
    start_time = time.time()
    matrix_20 = client.get_distance_matrix(locations_20)
    duration_20 = time.time() - start_time
    speed_20 = 380 / duration_20  # –∑–∞—è–≤–∫–∏/—Å–µ–∫
    
    print(f"‚úÖ 20 –ª–æ–∫–∞—Ü–∏–∏ –∑–∞–≤—ä—Ä—à–∏ –∑–∞ {duration_20:.2f}s")
    print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç: {speed_20:.1f} –∑–∞—è–≤–∫–∏/—Å–µ–∫")
    print(f"üìä –†–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏: {matrix_20.distances[0][5]:.0f}–º")
    print()
    
    # –ü—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞ 273 –ª–æ–∫–∞—Ü–∏–∏
    estimated_requests_273 = 273 * 272  # 74,256 –∑–∞—è–≤–∫–∏
    estimated_time_273 = estimated_requests_273 / speed_20 / 60  # –≤ –º–∏–Ω—É—Ç–∏
    
    print("üìà –†–ï–ó–£–õ–¢–ê–¢–ò –ò –ü–†–û–ì–ù–û–ó–ò:")
    print(f"   üî¢ 10 –ª–æ–∫–∞—Ü–∏–∏: {speed_10:.1f} –∑–∞—è–≤–∫–∏/—Å–µ–∫")
    print(f"   üî¢ 20 –ª–æ–∫–∞—Ü–∏–∏: {speed_20:.1f} –∑–∞—è–≤–∫–∏/—Å–µ–∫") 
    print(f"   üìä –°—Ä–µ–¥–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç: {(speed_10 + speed_20)/2:.1f} –∑–∞—è–≤–∫–∏/—Å–µ–∫")
    print()
    print(f"üéØ –ü–†–û–ì–ù–û–ó–ê –ó–ê 273 –õ–û–ö–ê–¶–ò–ò:")
    print(f"   üìä –û–±—â–æ –∑–∞—è–≤–∫–∏: {estimated_requests_273:,}")
    print(f"   ‚è±Ô∏è –û—á–∞–∫–≤–∞–Ω–æ –≤—Ä–µ–º–µ: {estimated_time_273:.1f} –º–∏–Ω—É—Ç–∏")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–∏—à–Ω–∞—Ç–∞ –≤–µ—Ä—Å–∏—è
    old_speed = 25  # –∑–∞—è–≤–∫–∏/—Å–µ–∫ –æ—Ç –ø—Ä–µ–¥–∏—à–Ω–∏—è —Ç–µ—Å—Ç
    improvement = speed_20 / old_speed
    old_time_273 = estimated_requests_273 / old_speed / 60
    
    print()
    print(f"üöÄ –ü–û–î–û–ë–†–ï–ù–ò–ï –°–ü–†–Ø–ú–û –°–¢–ê–†–ò–Ø –ü–û–î–•–û–î:")
    print(f"   üìà –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {improvement:.1f}x –ø–æ-–±—ä—Ä–∑")
    print(f"   ‚è∞ –°—Ç–∞—Ä –ø–æ–¥—Ö–æ–¥: {old_time_273:.1f} –º–∏–Ω—É—Ç–∏")
    print(f"   ‚ö° –ù–æ–≤ –ø–æ–¥—Ö–æ–¥: {estimated_time_273:.1f} –º–∏–Ω—É—Ç–∏")
    print(f"   üíæ –°–ø–µ—Å—Ç–µ–Ω–æ –≤—Ä–µ–º–µ: {old_time_273 - estimated_time_273:.1f} –º–∏–Ω—É—Ç–∏")
    
    client.close()

if __name__ == "__main__":
    test_speed_optimization() 