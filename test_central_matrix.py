"""
–¢–µ—Å—Ç –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞ –∑–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–∞ –∫–∞–∫ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ –≤–º–µ—Å—Ç–æ OSRM –∑–∞—è–≤–∫–∏
"""

import logging
import time
from osrm_client import (
    build_and_save_central_matrix, 
    get_central_matrix_info, 
    get_distance_matrix_from_central_cache
)
from input_handler import InputHandler
from cvrp_solver import CVRPSolver
from warehouse_manager import WarehouseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –ª–æ–≥–∏—Ä–∞–Ω–µ—Ç–æ
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)


def test_central_matrix_info():
    """–¢–µ—Å—Ç–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –∑–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞"""
    logger.info("="*60)
    logger.info("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –ó–ê –¶–ï–ù–¢–†–ê–õ–ù–ê–¢–ê –ú–ê–¢–†–ò–¶–ê")
    logger.info("="*60)
    
    info = get_central_matrix_info()
    
    if info['exists']:
        logger.info(f"‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ –ù–ê–õ–ò–ß–ù–ê:")
        logger.info(f"   üìä –õ–æ–∫–∞—Ü–∏–∏: {info['locations_count']}")
        logger.info(f"   üìç –î–µ–ø–æ: {info['depot_location']}")
        logger.info(f"   üíæ –ö–µ—à –∑–∞–ø–∏—Å–∏: {info['cache_entries']}")
        logger.info(f"   üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª: {info['cache_file_size']/1024/1024:.1f} MB")
    else:
        logger.info(f"‚ùå –¶–µ–Ω—Ç—Ä–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ –ù–ï –µ –Ω–∞–ª–∏—á–Ω–∞")
        logger.info(f"   üíæ –ö–µ—à –∑–∞–ø–∏—Å–∏: {info.get('cache_entries', 0)}")
        if 'error' in info:
            logger.error(f"   ‚ö†Ô∏è –ì—Ä–µ—à–∫–∞: {info['error']}")


def test_build_central_matrix():
    """–¢–µ—Å—Ç–≤–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ—Ç–æ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞"""
    logger.info("="*60) 
    logger.info("–°–™–ó–î–ê–í–ê–ù–ï –ù–ê –¶–ï–ù–¢–†–ê–õ–ù–ê –ú–ê–¢–†–ò–¶–ê")
    logger.info("="*60)
    
    start_time = time.time()
    success = build_and_save_central_matrix()
    end_time = time.time()
    
    if success:
        logger.info(f"‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–∞ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥–∏")
    else:
        logger.error(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞")
    
    return success


def test_cvrp_with_central_matrix():
    """–¢–µ—Å—Ç–≤–∞ CVRP —Å –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞"""
    logger.info("="*60)
    logger.info("CVRP –° –¶–ï–ù–¢–†–ê–õ–ù–ê –ú–ê–¢–†–ò–¶–ê")
    logger.info("="*60)
    
    try:
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
        handler = InputHandler()
        input_data = handler.load_data()
        
        # –†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        warehouse_manager = WarehouseManager()
        allocation = warehouse_manager.allocate_customers(input_data)
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç–∏ –∑–∞ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞: {len(allocation.vehicle_customers)}")
        
        # CVRP —Ä–µ—à–µ–Ω–∏–µ
        solver = CVRPSolver()
        start_time = time.time()
        
        solution = solver.solve(allocation, input_data.depot_location)
        
        end_time = time.time()
        
        logger.info(f"‚úÖ CVRP —Ä–µ—à–µ–Ω –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥–∏")
        logger.info(f"   üöõ –ü—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞: {solution.total_vehicles_used}")
        logger.info(f"   üìè –û–±—â–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ: {solution.total_distance_km:.2f} –∫–º")
        logger.info(f"   ‚è±Ô∏è –û–±—â–æ –≤—Ä–µ–º–µ: {solution.total_time_minutes:.1f} –º–∏–Ω—É—Ç–∏")
        
        solver.close()
        
    except Exception as e:
        logger.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç –Ω–∞ CVRP: {e}")


def test_speed_comparison():
    """–°—Ä–∞–≤–Ω—è–≤–∞ —Å–∫–æ—Ä–æ—Å—Ç—Ç–∞ —Å –∏ –±–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞"""
    logger.info("="*60)
    logger.info("–¢–ï–°–¢ –ù–ê –°–ö–û–†–û–°–¢: –ö–ï–®–ê —Å—Ä–µ—â—É OSRM –ó–ê–Ø–í–ö–ò")
    logger.info("="*60)
    
    try:
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –º–∞–ª–∫–∞ —á–∞—Å—Ç –æ—Ç –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ —Ç–µ—Å—Ç
        handler = InputHandler()
        input_data = handler.load_data()
        
        # –í–∑–∏–º–∞–º–µ –ø—ä—Ä–≤–∏—Ç–µ 20 –∫–ª–∏–µ–Ω—Ç–∞
        test_customers = input_data.customers[:20]
        depot = input_data.depot_location
        locations = [depot] + [c.coordinates for c in test_customers]
        
        logger.info(f"–¢–µ—Å—Ç–≤–∞–º —Å {len(locations)} –ª–æ–∫–∞—Ü–∏–∏...")
        
        # –¢–µ—Å—Ç 1: –û—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∏—è –∫–µ—à
        logger.info("üèÅ –¢–µ—Å—Ç 1: –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∏—è –∫–µ—à")
        start_time = time.time()
        matrix_from_cache = get_distance_matrix_from_central_cache(locations)
        cache_time = time.time() - start_time
        
        if matrix_from_cache:
            logger.info(f"‚úÖ –ö–µ—à: {cache_time:.4f} —Å–µ–∫—É–Ω–¥–∏")
        else:
            logger.info(f"‚ùå –ù—è–º–∞ –¥–∞–Ω–Ω–∏ –≤ –∫–µ—à–∞")
        
        # –¢–µ—Å—Ç 2: –î–∏—Ä–µ–∫—Ç–Ω–∞ OSRM –∑–∞—è–≤–∫–∞
        logger.info("üèÅ –¢–µ—Å—Ç 2: –î–∏—Ä–µ–∫—Ç–Ω–∞ OSRM –∑–∞—è–≤–∫–∞")
        from osrm_client import OSRMClient
        client = OSRMClient()
        
        start_time = time.time()
        matrix_from_osrm = client.get_distance_matrix(locations)
        osrm_time = time.time() - start_time
        client.close()
        
        logger.info(f"‚úÖ OSRM: {osrm_time:.4f} —Å–µ–∫—É–Ω–¥–∏")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        if matrix_from_cache and cache_time > 0:
            speedup = osrm_time / cache_time
            logger.info(f"üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x –ø–æ-–±—ä—Ä–∑–æ —Å –∫–µ—à–∞!")
        
    except Exception as e:
        logger.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ"""
    logger.info("üöÄ –ó–ê–ü–û–ß–í–ê–ú –¢–ï–°–¢–û–í–ï –ù–ê –¶–ï–ù–¢–†–ê–õ–ù–ê–¢–ê –ú–ê–¢–†–ò–¶–ê")
    
    # –¢–µ—Å—Ç 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    test_central_matrix_info()
    
    # –¢–µ—Å—Ç 2: –°—ä–∑–¥–∞–≤–∞–Ω–µ (–∞–∫–æ –Ω—è–º–∞)
    info = get_central_matrix_info()
    if not info['exists']:
        logger.info("\nüíæ –ù—è–º–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ - —Å—ä–∑–¥–∞–≤–∞–º —è...")
        test_build_central_matrix()
    
    # –¢–µ—Å—Ç 3: CVRP —Å —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞
    test_cvrp_with_central_matrix()
    
    # –¢–µ—Å—Ç 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç
    test_speed_comparison()
    
    logger.info("="*60)
    logger.info("‚úÖ –í–°–ò–ß–ö–ò –¢–ï–°–¢–û–í–ï –ó–ê–í–™–†–®–ï–ù–ò")
    logger.info("="*60)


if __name__ == "__main__":
    main()
 