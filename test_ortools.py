"""
–¢–µ—Å—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ OR-Tools –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ç–∞
"""

def test_ortools_import():
    """–¢–µ—Å—Ç–≤–∞ –¥–∞–ª–∏ OR-Tools –º–æ–∂–µ –¥–∞ —Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞"""
    try:
        from ortools.constraint_solver import routing_enums_pb2
        from ortools.constraint_solver import pywrapcp
        print("‚úÖ OR-Tools –µ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω –∏ –º–æ–∂–µ –¥–∞ —Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞")
        return True
    except ImportError as e:
        print(f"‚ùå OR-Tools –Ω–µ –º–æ–∂–µ –¥–∞ —Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞: {e}")
        print("üí° –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–π—Ç–µ OR-Tools —Å: pip install ortools")
        return False

def test_config():
    """–¢–µ—Å—Ç–≤–∞ –Ω–æ–≤–∞—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    try:
        from config import get_config
        config = get_config()
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞—Ä–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –ê–ª–≥–æ—Ä–∏—Ç—ä–º: {config.cvrp.algorithm}")
        print(f"‚è±Ô∏è –í—Ä–µ–º–µ –ª–∏–º–∏—Ç: {config.cvrp.time_limit_seconds} —Å–µ–∫—É–Ω–¥–∏")
        print(f"üéØ –ü—ä—Ä–≤–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {config.cvrp.first_solution_strategy}")
        print(f"üîç –õ–æ–∫–∞–ª–Ω–æ —Ç—ä—Ä—Å–µ–Ω–µ: {config.cvrp.local_search_metaheuristic}")
        
        return True
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞: {e}")
        return False

def test_cvrp_solver_import():
    """–¢–µ—Å—Ç–≤–∞ –¥–∞–ª–∏ CVRP solver –º–æ–∂–µ –¥–∞ —Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞"""
    try:
        from cvrp_solver import CVRPSolver, ORToolsSolver
        print("‚úÖ CVRP Solver –∏ OR-Tools Solver –º–æ–≥–∞—Ç –¥–∞ —Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞—Ç")
        return True
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ CVRP solver: {e}")
        return False

def test_simple_solve():
    """–¢–µ—Å—Ç–≤–∞ –æ–ø—Ä–æ—Å—Ç–µ–Ω–æ —Ä–µ—à–∞–≤–∞–Ω–µ –Ω–∞ CVRP"""
    try:
        from cvrp_solver import CVRPSolver
        from warehouse_manager import WarehouseAllocation
        from input_handler import Customer
        
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω–∏ –¥–∞–Ω–Ω–∏
        customers = [
            Customer("C1", "Client 1", (42.7, 23.3), 50, "42.7, 23.3"),
            Customer("C2", "Client 2", (42.71, 23.31), 30, "42.71, 23.31"),
            Customer("C3", "Client 3", (42.69, 23.29), 40, "42.69, 23.29")
        ]
        
        allocation = WarehouseAllocation(
            vehicle_customers=customers,
            warehouse_customers=[],
            total_vehicle_capacity=1000,
            total_vehicle_volume=120,
            warehouse_volume=0,
            capacity_utilization=0.12
        )
        
        depot_location = (42.695785029219415, 23.23165887245312)
        
        solver = CVRPSolver()
        solution = solver.solve(allocation, depot_location)
        solver.close()
        
        print(f"‚úÖ CVRP —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
        print(f"üöõ –ò–∑–ø–æ–ª–∑–≤–∞–Ω–∏ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞: {solution.total_vehicles_used}")
        print(f"üìè –û–±—â–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ: {solution.total_distance_km:.2f} –∫–º")
        print(f"‚è∞ –û–±—â–æ –≤—Ä–µ–º–µ: {solution.total_time_minutes:.1f} –º–∏–Ω—É—Ç–∏")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ CVRP —Ä–µ—à–∞–≤–∞–Ω–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–°—Ç–∞—Ä—Ç–∏—Ä–∞ –≤—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ"""
    print("üß™ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ OR-Tools –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    print("=" * 50)
    
    tests = [
        ("OR-Tools –∏–º–ø–æ—Ä—Ç", test_ortools_import),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("CVRP Solver –∏–º–ø–æ—Ä—Ç", test_cvrp_solver_import),
        ("–û–ø—Ä–æ—Å—Ç–µ–Ω–æ —Ä–µ—à–∞–≤–∞–Ω–µ", test_simple_solve)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîπ –¢–µ—Å—Ç: {test_name}")
        print("-" * 30)
        
        if test_func():
            passed += 1
        else:
            print("‚ö†Ô∏è –¢–µ—Å—Ç—ä—Ç –Ω–µ –ø—Ä–µ–º–∏–Ω–∞")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—Ç–∞—Ç–∏: {passed}/{total} —Ç–µ—Å—Ç–æ–≤–µ –ø—Ä–µ–º–∏–Ω–∞—Ö–∞")
    
    if passed == total:
        print("üéâ –í—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø—Ä–µ–º–∏–Ω–∞—Ö–∞! OR-Tools –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ç–∞ —Ä–∞–±–æ—Ç–∏ –ø—Ä–∞–≤–∏–ª–Ω–æ.")
    else:
        print("‚ö†Ô∏è –ù—è–∫–æ–∏ —Ç–µ—Å—Ç–æ–≤–µ –Ω–µ –ø—Ä–µ–º–∏–Ω–∞—Ö–∞. –ú–æ–ª—è –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –∏–Ω—Å—Ç–∞–ª–∞—Ü–∏—è—Ç–∞.")

if __name__ == "__main__":
    main() 