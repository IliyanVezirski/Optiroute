"""
Debug —Å–∫—Ä–∏–ø—Ç –∑–∞ –ø—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ –Ω–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ —Å–∫–ª–∞–¥/OR-Tools
"""

from input_handler import InputHandler
from warehouse_manager import WarehouseManager
from config import get_config

def debug_allocation():
    """–ü—Ä–æ—Å–ª–µ–¥—è–≤–∞ –¥–µ—Ç–∞–π–ª–Ω–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏"""
    print("üîç DEBUG –ù–ê –†–ê–ó–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–ö–õ–ê–î/OR-TOOLS")
    print("=" * 60)
    
    # –ó–∞—Ä–µ–∂–¥–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
    input_handler = InputHandler()
    input_data = input_handler.load_data("data/input.xlsx")
    
    print(f"üìä –í–•–û–î–ù–ò –î–ê–ù–ù–ò:")
    print(f"   –û–±—â–æ –∫–ª–∏–µ–Ω—Ç–∏: {len(input_data.customers)}")
    print(f"   –û–±—â –æ–±–µ–º: {input_data.total_volume:.2f} —Å—Ç.")
    
    # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–≤–æ–∑–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
    config = get_config()
    total_capacity = 0
    print(f"\nüöõ –ö–ê–ü–ê–¶–ò–¢–ï–¢ –ù–ê –ü–†–ï–í–û–ó–ù–ò –°–†–ï–î–°–¢–í–ê:")
    
    if config.vehicles:
        for vehicle in config.vehicles:
            if vehicle.enabled:
                vehicle_capacity = vehicle.capacity * vehicle.count
                total_capacity += vehicle_capacity
                print(f"   {vehicle.vehicle_type.value}: {vehicle.count} √ó {vehicle.capacity} = {vehicle_capacity} —Å—Ç.")
    
    print(f"   üìä –û–ë–©–û –ö–ê–ü–ê–¶–ò–¢–ï–¢: {total_capacity} —Å—Ç.")
    print(f"   üìà –°—ä–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±–µ–º/–∫–∞–ø–∞—Ü–∏—Ç–µ—Ç: {input_data.total_volume/total_capacity:.1%}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ –ª–æ–≥–∏–∫–∞—Ç–∞
    warehouse_manager = WarehouseManager()
    
    # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ
    sorted_customers = sorted(input_data.customers, key=lambda c: c.volume)
    print(f"\nüìã –°–û–†–¢–ò–†–ê–ù–ò –ö–õ–ò–ï–ù–¢–ò –ü–û –û–ë–ï–ú (–º–∞–ª—ä–∫ ‚Üí –≥–æ–ª—è–º):")
    for i, customer in enumerate(sorted_customers[:10]):  # –ø–æ–∫–∞–∑–≤–∞–º–µ –ø—ä—Ä–≤–∏—Ç–µ 10
        print(f"   {i+1:2}. {customer.id}: {customer.volume:.1f} —Å—Ç.")
    if len(sorted_customers) > 10:
        print(f"   ... –∏ –æ—â–µ {len(sorted_customers)-10} –∫–ª–∏–µ–Ω—Ç–∞")
    
    # –ü—Ä–æ—Å–ª–µ–¥—è–≤–∞–º–µ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ —Å—Ç—ä–ø–∫–∞ –ø–æ —Å—Ç—ä–ø–∫–∞
    print(f"\nüîÑ –ü–†–û–¶–ï–° –ù–ê –†–ê–ó–ü–†–ï–î–ï–õ–ï–ù–ò–ï:")
    vehicle_customers = []
    warehouse_customers = []
    current_volume = 0.0
    
    for i, customer in enumerate(sorted_customers):
        will_fit = (current_volume + customer.volume <= total_capacity)
        
        if will_fit:
            vehicle_customers.append(customer)
            current_volume += customer.volume
            destination = "–ü–†–ï–í–û–ó–ù–ò –°–†–ï–î–°–¢–í–ê"
        else:
            warehouse_customers.append(customer)
            destination = "–°–ö–õ–ê–î"
        
        if i < 20 or not will_fit:  # –ø–æ–∫–∞–∑–≤–∞–º–µ –ø—ä—Ä–≤–∏—Ç–µ 20 + –≤—Å–∏—á–∫–∏ –∫–æ–∏—Ç–æ –æ—Ç–∏–≤–∞—Ç –≤ —Å–∫–ª–∞–¥–∞
            print(f"   {i+1:3}. {customer.id}: {customer.volume:6.1f} —Å—Ç. ‚Üí {destination}")
            print(f"        –û–±–µ–º –¥–æ –º–æ–º–µ–Ω—Ç–∞: {current_volume:6.1f}/{total_capacity} —Å—Ç.")
            
            if not will_fit:
                print(f"        ‚ö†Ô∏è –ù–∞–¥–≤–∏—à–µ–Ω –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç —Å {customer.volume:.1f} —Å—Ç.")
    
    # –§–∏–Ω–∞–ª–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç
    warehouse_volume = sum(c.volume for c in warehouse_customers)
    
    print(f"\nüìä –§–ò–ù–ê–õ–ï–ù –†–ï–ó–£–õ–¢–ê–¢:")
    print(f"   üöõ –ó–ê –ü–†–ï–í–û–ó–ù–ò –°–†–ï–î–°–¢–í–ê:")
    print(f"       –ö–ª–∏–µ–Ω—Ç–∏: {len(vehicle_customers)}")
    print(f"       –û–±–µ–º: {current_volume:.2f} —Å—Ç.")
    print(f"       –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ: {current_volume/total_capacity:.1%}")
    
    print(f"   üè≠ –ó–ê –°–ö–õ–ê–î:")
    print(f"       –ö–ª–∏–µ–Ω—Ç–∏: {len(warehouse_customers)}")
    print(f"       –û–±–µ–º: {warehouse_volume:.2f} —Å—Ç.")
    
    print(f"\n‚ùó –ü–†–û–ë–õ–ï–ú –í –õ–û–ì–ò–ö–ê–¢–ê:")
    if len(warehouse_customers) > 0:
        print(f"   –ò–º–∞ {len(warehouse_customers)} –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–∫–ª–∞–¥–∞")
        print(f"   OR-Tools —â–µ –æ–±—Ä–∞–±–æ—Ç–≤–∞ —Å–∞–º–æ {len(vehicle_customers)} –∫–ª–∏–µ–Ω—Ç–∞")
        print(f"   –û—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ {len(warehouse_customers)} –∫–ª–∏–µ–Ω—Ç–∞ –Ω—è–º–∞ –¥–∞ –±—ä–¥–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–∏!")
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞
        available_space = total_capacity - current_volume
        print(f"\nüîß –í–™–ó–ú–û–ñ–ù–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:")
        print(f"   –°–≤–æ–±–æ–¥–Ω–æ –º—è—Å—Ç–æ: {available_space:.2f} —Å—Ç.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∫–æ–∏ –∫–ª–∏–µ–Ω—Ç–∏ –æ—Ç —Å–∫–ª–∞–¥–∞ –º–æ–≥–∞—Ç –¥–∞ –≤–ª—è–∑–∞—Ç
        can_move = []
        for customer in warehouse_customers:
            if customer.volume <= available_space:
                can_move.append(customer)
        
        if can_move:
            print(f"   –ú–æ–≥–∞—Ç –¥–∞ —Å–µ –ø—Ä–µ–º–µ—Å—Ç—è—Ç –æ—Ç —Å–∫–ª–∞–¥–∞: {len(can_move)} –∫–ª–∏–µ–Ω—Ç–∞")
            for customer in can_move[:5]:
                print(f"     - {customer.id}: {customer.volume:.1f} —Å—Ç.")
    else:
        print(f"   ‚úÖ –í—Å–∏—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∏ –æ—Ç–∏–≤–∞—Ç –≤ OR-Tools –∑–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")

def test_optimized_allocation():
    """–¢–µ—Å—Ç–≤–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–∞—Ç–∞ –ª–æ–≥–∏–∫–∞"""
    print(f"\nüß™ –¢–ï–°–¢ –ù–ê –û–ü–¢–ò–ú–ò–ó–ò–†–ê–ù–ê–¢–ê –õ–û–ì–ò–ö–ê:")
    print("=" * 50)
    
    input_handler = InputHandler()
    input_data = input_handler.load_data("data/input.xlsx")
    
    warehouse_manager = WarehouseManager()
    allocation = warehouse_manager.allocate_customers(input_data)
    
    print(f"üìä –ü–†–ï–î–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:")
    print(f"   –ü—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞: {len(allocation.vehicle_customers)} –∫–ª–∏–µ–Ω—Ç–∞")
    print(f"   –°–∫–ª–∞–¥: {len(allocation.warehouse_customers)} –∫–ª–∏–µ–Ω—Ç–∞")
    
    optimized_allocation = warehouse_manager.optimize_allocation(allocation)
    
    print(f"üìä –°–õ–ï–î –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:")
    print(f"   –ü—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞: {len(optimized_allocation.vehicle_customers)} –∫–ª–∏–µ–Ω—Ç–∞")
    print(f"   –°–∫–ª–∞–¥: {len(optimized_allocation.warehouse_customers)} –∫–ª–∏–µ–Ω—Ç–∞")
    
    improvement = len(optimized_allocation.vehicle_customers) - len(allocation.vehicle_customers)
    if improvement > 0:
        print(f"   ‚úÖ –ü–æ–¥–æ–±—Ä–µ–Ω–∏–µ: +{improvement} –∫–ª–∏–µ–Ω—Ç–∞ –∫—ä–º OR-Tools")
    else:
        print(f"   ‚ÑπÔ∏è –ë–µ–∑ –ø—Ä–æ–º—è–Ω–∞ –≤ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ")

if __name__ == "__main__":
    debug_allocation()
    test_optimized_allocation() 