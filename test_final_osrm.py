#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–∞ –Ω–æ–≤–∞—Ç–∞ chunking —Å–∏—Å—Ç–µ–º–∞ —Å route API –∑–∞—è–≤–∫–∏
–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ chunking —Ä–∞–±–æ—Ç–∏ –ø—Ä–∞–≤–∏–ª–Ω–æ —Å—ä—Å –∑–∞—è–≤–∫–∏ –¥–æ 100 –ª–æ–∫–∞—Ü–∏–∏ –º–∞–∫—Å–∏–º—É–º
"""

import sys
import os
import traceback
from typing import List, Tuple
import time

# –î–æ–±–∞–≤—è–º–µ —Ä–æ–¥–∏—Ç–µ–ª—Å–∫–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤ Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

from input_handler import load_customer_data, Customer
from config import get_config
from osrm_client import create_osrm_client, OSRMClient

def test_route_chunking():
    """–¢–µ—Å—Ç–≤–∞ –Ω–æ–≤–∞—Ç–∞ chunking —Å–∏—Å—Ç–µ–º–∞ —Å route API"""
    print("üß™ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ chunking —Å route API –∑–∞—è–≤–∫–∏")
    print("=" * 60)
    
    try:
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        config = get_config()
        print(f"üìä Chunk size –æ—Ç config: {config.osrm.chunk_size}")
        
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –∫–ª–∏–µ–Ω—Ç–∏
        print("\nüìÇ –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏ –¥–∞–Ω–Ω–∏...")
        customers = load_customer_data()
        depot_location = config.locations.depot_location
        
        print(f"‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–∏ {len(customers)} –∫–ª–∏–µ–Ω—Ç–∞")
        print(f"üè≠ Depot: {depot_location}")
        
        # –ü–æ–¥–≥–æ—Ç–≤—è–º–µ –ª–æ–∫–∞—Ü–∏–∏ –∑–∞ —Ç–µ—Å—Ç
        all_locations = [depot_location] + [customer.gps_location for customer in customers]
        n_total = len(all_locations)
        
        print(f"\nüåç –û–±—â–æ –ª–æ–∫–∞—Ü–∏–∏ –∑–∞ —Ç–µ—Å—Ç: {n_total}")
        
        # –¢–µ—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω–∏ —Ä–∞–∑–º–µ—Ä–∏
        test_sizes = [5, 15, 35, 50, 100]
        if n_total > 100:
            test_sizes.append(min(n_total, 150))
        
        # –°—ä–∑–¥–∞–≤–∞–º–µ OSRM –∫–ª–∏–µ–Ω—Ç
        osrm_client = create_osrm_client()
        
        for test_size in test_sizes:
            if test_size > n_total:
                continue
                
            print(f"\nüß© –¢–µ—Å—Ç —Å {test_size} –ª–æ–∫–∞—Ü–∏–∏:")
            print("-" * 40)
            
            test_locations = all_locations[:test_size]
            
            try:
                matrix = osrm_client.get_distance_matrix(test_locations)
                
                print(f"‚úÖ Matrix —É—Å–ø–µ—à–µ–Ω: {len(matrix.distances)}x{len(matrix.distances[0])}")
                print(f"   –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ 0->1: {matrix.distances[0][1]:.1f}–º")
                print(f"   –í—Ä–µ–º–µ 0->1: {matrix.durations[0][1]:.1f}—Å")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞
                if len(matrix.distances) != test_size:
                    print(f"‚ùå –ì—Ä–µ—à–µ–Ω —Ä–∞–∑–º–µ—Ä –Ω–∞ matrix: {len(matrix.distances)} != {test_size}")
                elif len(matrix.distances[0]) != test_size:
                    print(f"‚ùå –ì—Ä–µ—à–µ–Ω —Ä–∞–∑–º–µ—Ä –Ω–∞ —Ä–µ–¥–æ–≤–µ: {len(matrix.distances[0])} != {test_size}")
                else:
                    print("‚úÖ Matrix –∏–º–∞ –ø—Ä–∞–≤–∏–ª–µ–Ω —Ä–∞–∑–º–µ—Ä")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–∞ (—Ç—Ä—è–±–≤–∞ –¥–∞ –µ 0)
                    diagonal_ok = all(matrix.distances[i][i] == 0.0 for i in range(test_size))
                    if diagonal_ok:
                        print("‚úÖ –î–∏–∞–≥–æ–Ω–∞–ª—ä—Ç –µ –ø—Ä–∞–≤–∏–ª–µ–Ω (0.0)")
                    else:
                        print("‚ùå –î–∏–∞–≥–æ–Ω–∞–ª—ä—Ç –Ω–µ –µ –ø—Ä–∞–≤–∏–ª–µ–Ω")
                        
            except Exception as e:
                print(f"‚ùå –ì—Ä–µ—à–∫–∞: {e}")
                print(f"   Type: {type(e).__name__}")
                traceback.print_exc()
        
        # –ó–∞—Ç–≤–∞—Ä—è–º–µ –∫–ª–∏–µ–Ω—Ç–∞
        osrm_client.close()
        
        print("\n" + "=" * 60)
        print("üéØ –¢–µ—Å—Ç –Ω–∞ chunking –∑–∞–≤—ä—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
        traceback.print_exc()

def test_chunk_efficiency():
    """–¢–µ—Å—Ç–≤–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ chunk —Ä–∞–∑–º–µ—Ä–∏"""
    print("\nüöÄ –¢–µ—Å—Ç –Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç –Ω–∞ chunks")
    print("=" * 60)
    
    try:
        config = get_config()
        customers = load_customer_data()
        depot_location = config.locations.depot_location
        
        # –û–≥—Ä–∞–Ω–∏—á–∞–≤–∞–º–µ –¥–æ —Ä–∞–∑—É–º–µ–Ω —Ä–∞–∑–º–µ—Ä –∑–∞ —Ç–µ—Å—Ç
        max_locations = min(80, len(customers) + 1)
        test_locations = [depot_location] + [customer.gps_location for customer in customers[:max_locations-1]]
        
        print(f"üåç –¢–µ—Å—Ç–≤–∞–º —Å {len(test_locations)} –ª–æ–∫–∞—Ü–∏–∏")
        
        # –†–∞–∑–ª–∏—á–Ω–∏ chunk —Ä–∞–∑–º–µ—Ä–∏
        chunk_sizes = [20, 50, 80, 100]
        
        for chunk_size in chunk_sizes:
            if chunk_size >= len(test_locations):
                continue
                
            print(f"\nüß© Chunk size: {chunk_size}")
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–º–µ–Ω—è–º–µ chunk_size
            original_chunk_size = config.osrm.chunk_size
            config.osrm.chunk_size = chunk_size
            
            try:
                start_time = time.time()
                
                osrm_client = create_osrm_client()
                matrix = osrm_client.get_distance_matrix(test_locations)
                
                end_time = time.time()
                duration = end_time - start_time
                
                print(f"   ‚è±Ô∏è –í—Ä–µ–º–µ: {duration:.2f}—Å")
                print(f"   ‚úÖ Matrix: {len(matrix.distances)}x{len(matrix.distances[0])}")
                
                osrm_client.close()
                
            except Exception as e:
                print(f"   ‚ùå –ì—Ä–µ—à–∫–∞: {e}")
            finally:
                # –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è chunk_size
                config.osrm.chunk_size = original_chunk_size
        
        print("\nüéØ –¢–µ—Å—Ç –Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç –∑–∞–≤—ä—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
        traceback.print_exc()

def test_route_api_only():
    """–¢–µ—Å—Ç–≤–∞ –Ω–æ–≤–∏—è –ø–æ–¥—Ö–æ–¥ —Å–∞–º–æ —Å Route API –∑–∞—è–≤–∫–∏"""
    
    client = create_osrm_client()
    
    # –¢–µ—Å—Ç —Å –º–Ω–æ–≥–æ –º–∞–ª–∫–∏ –¥–∞–Ω–Ω–∏ (5 –ª–æ–∫–∞—Ü–∏–∏)
    print("üß™ –¢–µ—Å—Ç 1: 5 –ª–æ–∫–∞—Ü–∏–∏ (24 Route API –∑–∞—è–≤–∫–∏)")
    locations_5 = [
        (42.6977, 23.3219),  # –°–æ—Ñ–∏—è —Ü–µ–Ω—Ç—ä—Ä
        (42.7001, 23.3240),  # –±–ª–∏–∑–æ –¥–æ —Ü–µ–Ω—Ç—ä—Ä–∞
        (42.6950, 23.3190),  # —é–∂–Ω–æ –æ—Ç —Ü–µ–Ω—Ç—ä—Ä–∞
        (42.7020, 23.3280),  # —Å–µ–≤–µ—Ä–Ω–æ –æ—Ç —Ü–µ–Ω—Ç—ä—Ä–∞
        (42.6930, 23.3160)   # —é–≥–æ–∑–∞–ø–∞–¥–Ω–æ
    ]
    
    start_time = time.time()
    matrix_5 = client.get_distance_matrix(locations_5)
    end_time = time.time()
    
    print(f"‚úÖ 5 –ª–æ–∫–∞—Ü–∏–∏ –∑–∞–≤—ä—Ä—à–∏ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥–∏")
    print(f"üìä –ü—ä—Ä–≤–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ: {matrix_5.distances[0][1]:.0f}–º")
    print(f"üìä –ü—ä—Ä–≤–æ –≤—Ä–µ–º–µ: {matrix_5.durations[0][1]:.0f}—Å")
    print()
    
    # –¢–µ—Å—Ç —Å –º–∞–ª–∫–∏ –¥–∞–Ω–Ω–∏ (10 –ª–æ–∫–∞—Ü–∏–∏) 
    print("üß™ –¢–µ—Å—Ç 2: 10 –ª–æ–∫–∞—Ü–∏–∏ (90 Route API –∑–∞—è–≤–∫–∏)")
    locations_10 = locations_5 + [
        (42.6980, 23.3300),
        (42.6920, 23.3130),
        (42.7040, 23.3200),
        (42.6900, 23.3250),
        (42.7000, 23.3150)
    ]
    
    start_time = time.time()
    matrix_10 = client.get_distance_matrix(locations_10)
    end_time = time.time()
    
    print(f"‚úÖ 10 –ª–æ–∫–∞—Ü–∏–∏ –∑–∞–≤—ä—Ä—à–∏ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥–∏")
    print(f"üìä –†–µ–∞–ª–Ω–∏ OSRM –¥–∞–Ω–Ω–∏ –±–µ–∑ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏")
    print()
    
    # –ü–æ–∫–∞–∑–≤–∞–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
    print(f"   üî¢ 5 –ª–æ–∫–∞—Ü–∏–∏: 24 –∑–∞—è–≤–∫–∏ –∑–∞ {(end_time - start_time):.1f}—Å")
    print(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç: ~{24/(end_time - start_time):.1f} –∑–∞—è–≤–∫–∏/—Å–µ–∫")
    print(f"   üìä 100% —Ä–µ–∞–ª–Ω–∏ OSRM –¥–∞–Ω–Ω–∏")
    
    client.close()

if __name__ == "__main__":
    print("üß™ OSRM Route Chunking Test")
    print("üîÑ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∞—Ç–∞ chunking —Å–∏—Å—Ç–µ–º–∞ —Å route API")
    print()
    
    test_route_chunking()
    test_chunk_efficiency()
    test_route_api_only()
    
    print("\nüèÅ –í—Å–∏—á–∫–∏ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤—ä—Ä—à–µ–Ω–∏!") 