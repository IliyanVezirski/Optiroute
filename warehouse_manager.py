"""
–ú–æ–¥—É–ª –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–æ–≤–∞ –ª–æ–≥–∏–∫–∞ –≤ CVRP
–£–ø—Ä–∞–≤–ª—è–≤–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ –Ω–∞ –∑–∞—è–≤–∫–∏ –º–µ–∂–¥—É –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —Å–∫–ª–∞–¥
"""

from typing import List, Tuple, Dict, Optional, Any
from dataclasses import dataclass
import logging
from config import get_config, WarehouseConfig, VehicleConfig
from input_handler import Customer, InputData

logger = logging.getLogger(__name__)


@dataclass
class WarehouseAllocation:
    """–†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —Å–∫–ª–∞–¥"""
    vehicle_customers: List[Customer]  # –∫–ª–∏–µ–Ω—Ç–∏ –∑–∞ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
    warehouse_customers: List[Customer]  # –∫–ª–∏–µ–Ω—Ç–∏ –∑–∞ —Å–∫–ª–∞–¥
    total_vehicle_capacity: int
    total_vehicle_volume: float
    warehouse_volume: float
    capacity_utilization: float


class WarehouseManager:
    """–ú–µ–Ω–∏–¥–∂—ä—Ä –∑–∞ —Å–∫–ª–∞–¥–æ–≤–∞ –ª–æ–≥–∏–∫–∞"""
    
    def __init__(self, config: Optional[WarehouseConfig] = None):
        self.config = config or get_config().warehouse
        self.vehicle_configs = get_config().vehicles
    
    def allocate_customers(self, input_data: InputData) -> WarehouseAllocation:
        """–†–∞–∑–ø—Ä–µ–¥–µ–ª—è –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ –º–µ–∂–¥—É –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —Å–∫–ª–∞–¥"""
        logger.info("–ó–∞–ø–æ—á–≤–∞–º —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏")
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –æ–±—â–∏—è –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç
        total_capacity = self._calculate_total_vehicle_capacity()
        
        # –°–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ
        sorted_customers = self._sort_customers(input_data.customers)
        
        # –†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - –í–ò–ù–ê–ì–ò –∏–∑–ø–æ–ª–∑–≤–∞–º–µ warehouse –ª–æ–≥–∏–∫–∞—Ç–∞ –∑–∞ 80% –ø—Ä–∞–≤–∏–ª–æ
        if self.config.enable_warehouse:
            return self._allocate_with_warehouse(sorted_customers, total_capacity)
        else:
            # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –æ–±–µ–º–∞ —Å–∞–º–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ –∑–∞ –∞–≤—Ç–æ–±—É—Å–∏
            vehicle_volume = sum(c.volume for c in sorted_customers)
            return WarehouseAllocation(
                vehicle_customers=sorted_customers,
                warehouse_customers=[],
                total_vehicle_capacity=total_capacity,
                total_vehicle_volume=vehicle_volume,
                warehouse_volume=0.0,
                capacity_utilization=vehicle_volume / total_capacity if total_capacity > 0 else 0
            )
    
    def _calculate_total_vehicle_capacity(self) -> int:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ –æ–±—â–∏—è –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç –Ω–∞ –≤—Å–∏—á–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"""
        total_capacity = 0
        
        if self.vehicle_configs:
            for vehicle in self.vehicle_configs:
                if vehicle.enabled:
                    total_capacity += vehicle.capacity * vehicle.count
        
        return total_capacity
    
    def _sort_customers(self, customers: List[Customer]) -> List[Customer]:
        """–°–æ—Ä—Ç–∏—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ —Å–ø–æ—Ä–µ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞"""
        if self.config.sort_by_volume:
            return sorted(customers, key=lambda c: c.volume)
        else:
            return customers.copy()
    
    def _allocate_with_warehouse(self, customers: List[Customer], 
                               total_capacity: int) -> WarehouseAllocation:
        """–†–∞–∑–ø—Ä–µ–¥–µ–ª—è –∫–ª–∏–µ–Ω—Ç–∏ —Å –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ —Å–∫–ª–∞–¥ (–Ω–∞–π-–≥–æ–ª–µ–º–∏—Ç–µ –≤ —Å–∫–ª–∞–¥–∞)"""
        
        # –ù–û–í–ê –õ–û–ì–ò–ö–ê: –ù–∞–π-–≥–æ–ª–µ–º–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∏ –æ—Ç–∏–≤–∞—Ç –≤ —Å–∫–ª–∞–¥–∞
        vehicle_customers, warehouse_customers = self._allocate_largest_to_warehouse(customers, total_capacity)
        
        current_volume = sum(c.volume for c in vehicle_customers)
        warehouse_volume = sum(c.volume for c in warehouse_customers)
        
        logger.info(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {len(vehicle_customers)} –∑–∞ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞, "
                   f"{len(warehouse_customers)} –∑–∞ —Å–∫–ª–∞–¥")
        logger.info(f"–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞: {current_volume}/{total_capacity} ({current_volume/total_capacity:.1%})")
        
        return WarehouseAllocation(
            vehicle_customers=vehicle_customers,
            warehouse_customers=warehouse_customers,
            total_vehicle_capacity=total_capacity,
            total_vehicle_volume=current_volume,
            warehouse_volume=warehouse_volume,
            capacity_utilization=current_volume / total_capacity if total_capacity > 0 else 0
        )
    
    def _knapsack_allocation(self, customers: List[Customer], capacity: int) -> Optional[Tuple[List[Customer], List[Customer]]]:
        """–ò–∑–ø–æ–ª–∑–≤–∞ knapsack-–ø–æ–¥–æ–±–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç—ä–º –∑–∞ –æ–ø—Ç–∏–º–∞–ª–Ω–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"""
        try:
            n = len(customers)
            if n == 0:
                return [], []
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ –≤ —Ü–µ–ª–∏ —á–∏—Å–ª–∞ –∑–∞ knapsack –∞–ª–≥–æ—Ä–∏—Ç—ä–º–∞ 
            volumes = [int(c.volume * 10) for c in customers]  # —É–º–Ω–æ–∂–∞–≤–∞–º–µ –ø–æ 10 –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç
            capacity_int = int(capacity * 10)
            
            # –û–ø—Ä–æ—Å—Ç–µ–Ω greedy knapsack –∞–ª–≥–æ—Ä–∏—Ç—ä–º
            # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç (–æ–±–µ–º/1 - –º–∞–ª–∫–æ –ø–æ-–≥–æ–ª—è–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞ –ø–æ-–≥–æ–ª–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∏)
            indexed_customers = [(i, customers[i], volumes[i]) for i in range(n)]
            indexed_customers.sort(key=lambda x: x[2], reverse=True)  # –≥–æ–ª–µ–º–∏ –ø—ä—Ä–≤–æ –∑–∞ –ø–æ-–¥–æ–±—Ä–æ –∑–∞–ø—ä–ª–≤–∞–Ω–µ
            
            selected = []
            current_capacity = 0
            
            # Greedily –¥–æ–±–∞–≤—è–º–µ –∫–ª–∏–µ–Ω—Ç–∏
            for idx, customer, volume in indexed_customers:
                if current_capacity + volume <= capacity_int:
                    selected.append(idx)
                    current_capacity += volume
            
            # –†–∞–∑–¥–µ–ª—è–º–µ –Ω–∞ vehicle –∏ warehouse –∫–ª–∏–µ–Ω—Ç–∏
            vehicle_customers = [customers[i] for i in selected]
            warehouse_customers = [customers[i] for i in range(n) if i not in selected]
            
            return vehicle_customers, warehouse_customers
            
        except Exception as e:
            logger.error(f"–ì—Ä–µ—à–∫–∞ –≤ knapsack –∞–ª–≥–æ—Ä–∏—Ç—ä–º: {e}")
            return None
    
    def _simple_allocation(self, customers: List[Customer], total_capacity: int) -> Tuple[List[Customer], List[Customer]]:
        """–ü—Ä–æ—Å—Ç–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (fallback)"""
        vehicle_customers = []
        warehouse_customers = []
        current_volume = 0.0
        
        for customer in customers:
            if current_volume + customer.volume <= total_capacity:
                vehicle_customers.append(customer)
                current_volume += customer.volume
            else:
                warehouse_customers.append(customer)
        
        return vehicle_customers, warehouse_customers
    
    def _allocate_largest_to_warehouse(self, customers: List[Customer], total_capacity: int) -> Tuple[List[Customer], List[Customer]]:
        """–†–∞–∑–ø—Ä–µ–¥–µ–ª—è –∫–ª–∏–µ–Ω—Ç–∏ –æ–ø—Ç–∏–º–∞–ª–Ω–æ –∑–∞ OR-Tools —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ warehouse –∑–∞ –≥–æ–ª–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∏"""
        logger.info("–ó–∞–ø–æ—á–≤–∞–º —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –ø–æ–¥–æ–±—Ä–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ OR-Tools")
        
        # –ù–∞–º–∏—Ä–∞–º–µ –º–∞–∫—Å–∏–º–∞–ª–Ω–∏—è –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç –Ω–∞ –µ–¥–∏–Ω –∞–≤—Ç–æ–±—É—Å
        max_single_vehicle_capacity = 0
        if self.vehicle_configs:
            max_single_vehicle_capacity = max(v.capacity for v in self.vehicle_configs if v.enabled)
        
        logger.info(f"üöõ –ú–∞–∫—Å–∏–º–∞–ª–µ–Ω –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç –Ω–∞ –∞–≤—Ç–æ–±—É—Å: {max_single_vehicle_capacity} —Å—Ç.")
        
        # –°–¢–™–ü–ö–ê 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–µ—Ö–≤—ä—Ä–ª—è–º–µ –∑–∞—è–≤–∫–∏ –Ω–∞–¥ X% –æ—Ç –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞ –≤ —Å–∫–ª–∞–¥–∞
        volume_threshold = max_single_vehicle_capacity * self.config.large_request_threshold
        warehouse_customers = []
        suitable_for_vehicles = []
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º –∑–∞ –∑–∞—è–≤–∫–∏ –Ω–∞–¥ {volume_threshold:.1f} —Å—Ç. ({self.config.large_request_threshold*100:.0f}% –æ—Ç {max_single_vehicle_capacity} —Å—Ç.)")
        
        for customer in customers:
            if customer.volume > volume_threshold:
                warehouse_customers.append(customer)
                logger.info(f"üì¶ {customer.name} ({customer.volume:.1f} —Å—Ç.) ‚Üí –°–ö–õ–ê–î (–Ω–∞–¥ {self.config.large_request_threshold*100:.0f}% –æ—Ç –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞)")
            else:
                suitable_for_vehicles.append(customer)
        
        # –°–¢–™–ü–ö–ê 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–µ—Ö–≤—ä—Ä–ª—è–º–µ –∫–ª–∏–µ–Ω—Ç–∏ –Ω–∞–¥ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞ –≤ —Å–∫–ª–∞–¥–∞
        customers_over_capacity = [c for c in suitable_for_vehicles if c.volume > max_single_vehicle_capacity]
        suitable_for_vehicles = [c for c in suitable_for_vehicles if c.volume <= max_single_vehicle_capacity]
        
        for customer in customers_over_capacity:
            warehouse_customers.append(customer)
            logger.info(f"üì¶ {customer.name} ({customer.volume:.1f} —Å—Ç.) ‚Üí –°–ö–õ–ê–î (–Ω–∞–¥ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞)")
        
        # –°–¢–™–ü–ö–ê 3: –û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞ OR-Tools (target_utilization)
        target_capacity = int(total_capacity * self.config.ortools_target_utilization)
        logger.info(f"üéØ –¶–µ–ª–µ–≤–∏ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç –∑–∞ OR-Tools: {target_capacity} —Å—Ç. ({self.config.ortools_target_utilization*100:.0f}% –æ—Ç {total_capacity})")
        
        # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∏ –æ—Ç –º–∞–ª—ä–∫ –∫—ä–º –≥–æ–ª—è–º –∑–∞ –ø–æ-–¥–æ–±—Ä–æ –∑–∞–ø—ä–ª–≤–∞–Ω–µ
        suitable_for_vehicles.sort(key=lambda c: c.volume)
        
        vehicle_customers = []
        current_volume = 0.0
        
        for customer in suitable_for_vehicles:
            if current_volume + customer.volume <= target_capacity:
                vehicle_customers.append(customer)
                current_volume += customer.volume
                logger.debug(f"–ö–ª–∏–µ–Ω—Ç {customer.id} ({customer.volume:.1f} —Å—Ç.) ‚Üí –ê–í–¢–û–ë–£–°–ò")
            else:
                warehouse_customers.append(customer)
                logger.debug(f"–ö–ª–∏–µ–Ω—Ç {customer.id} ({customer.volume:.1f} —Å—Ç.) ‚Üí –°–ö–õ–ê–î")
        
        # –§–∏–Ω–∞–ª–Ω–∏ –∏–∑—á–∏—Å–ª–µ–Ω–∏—è
        vehicle_volume = sum(c.volume for c in vehicle_customers)
        warehouse_volume = sum(c.volume for c in warehouse_customers)
        actual_utilization = vehicle_volume / total_capacity
        
        # –õ–æ–≥–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
        logger.info(f"–†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ:")
        logger.info(f"  üöõ –ê–≤—Ç–æ–±—É—Å–∏: {len(vehicle_customers)} –∫–ª–∏–µ–Ω—Ç–∞ ({vehicle_volume:.1f} —Å—Ç.)")
        logger.info(f"  üè≠ –°–∫–ª–∞–¥: {len(warehouse_customers)} –∫–ª–∏–µ–Ω—Ç–∞ ({warehouse_volume:.1f} —Å—Ç.)")
        logger.info(f"  üìä –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç: {actual_utilization:.1%} (—Ü–µ–ª: {self.config.ortools_target_utilization*100:.0f}%)")
        logger.info(f"  ü§ñ OR-Tools –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç: {'‚úÖ –ì–æ—Ç–æ–≤' if actual_utilization <= self.config.ortools_target_utilization else '‚ö†Ô∏è –†–∏—Å–∫–æ–≤–∞–Ω'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç
        total_input_volume = sum(c.volume for c in customers)
        total_output_volume = vehicle_volume + warehouse_volume
        if abs(total_input_volume - total_output_volume) > 0.1:
            logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ: Input {total_input_volume:.1f} != Output {total_output_volume:.1f}")
        
        return vehicle_customers, warehouse_customers
    
    def optimize_allocation(self, allocation: WarehouseAllocation) -> WarehouseAllocation:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ (–∞–∫–æ –µ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞ OR-Tools)"""
        if not allocation.warehouse_customers:
            return allocation
        
        # –í–ê–ñ–ù–û: –ù–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–º–µ –∞–∫–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ –µ –≤–µ—á–µ –æ–ø—Ç–∏–º–∞–ª–Ω–æ –∑–∞ OR-Tools
        if allocation.capacity_utilization > self.config.ortools_safe_utilization:
            logger.info(f"üîí –°–ø–∏—Ä–∞–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è—Ç–∞: –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ—Ç–æ –µ {allocation.capacity_utilization:.1%} (–Ω–∞–¥ {self.config.ortools_safe_utilization*100:.0f}% –≥—Ä–∞–Ω–∏—Ü–∞)")
            logger.info("ü§ñ –ó–∞–ø–∞–∑–≤–∞–º —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ –æ–ø—Ç–∏–º–∞–ª–Ω–æ –∑–∞ OR-Tools")
            return allocation
        
        logger.info("–û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–º —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ...")
        
        # –û–ø–∏—Ç–≤–∞–º–µ –¥–∞ –ø—Ä–µ–º–µ—Å—Ç–∏–º –Ω—è–∫–æ–∏ –∫–ª–∏–µ–Ω—Ç–∏ –æ—Ç —Å–∫–ª–∞–¥–∞ –≤ –ø—Ä–µ–≤–æ–∑–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
        # –∞–∫–æ –∏–º–∞ –Ω–∞–ª–∏—á–Ω–æ –º—è—Å—Ç–æ –ò –Ω–µ –Ω–∞–¥–≤–∏—à–∞–≤–∞–º–µ 75% –≥—Ä–∞–Ω–∏—Ü–∞
        available_capacity = allocation.total_vehicle_capacity - allocation.total_vehicle_volume
        
        if available_capacity <= 0:
            return allocation
        
        # –ú–∞–∫—Å–∏–º–∞–ª–µ–Ω –¥–æ–ø—É—Å—Ç–∏–º –æ–±–µ–º –∑–∞ OR-Tools —Å—Ç–∞–±–∏–ª–Ω–æ—Å—Ç (safe_utilization)
        max_safe_volume = allocation.total_vehicle_capacity * self.config.ortools_safe_utilization
        remaining_safe_capacity = max_safe_volume - allocation.total_vehicle_volume
        
        if remaining_safe_capacity <= 0:
            logger.info(f"üîí –ù—è–º–∞ –±–µ–∑–æ–ø–∞—Å–µ–Ω –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç –∑–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
            return allocation
        
        # –°–æ—Ä—Ç–∏—Ä–∞–º–µ —Å–∫–ª–∞–¥–æ–≤–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∏ –ø–æ –æ–±–µ–º (–æ—Ç –º–∞–ª—ä–∫ –∫—ä–º –≥–æ–ª—è–º)
        warehouse_sorted = sorted(allocation.warehouse_customers, key=lambda c: c.volume)
        
        optimized_vehicle_customers = allocation.vehicle_customers.copy()
        optimized_warehouse_customers = []
        current_volume = allocation.total_vehicle_volume
        
        moved_count = 0
        for customer in warehouse_sorted:
            if current_volume + customer.volume <= max_safe_volume:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–µ—â—É –±–µ–∑–æ–ø–∞—Å–Ω–∞—Ç–∞ –≥—Ä–∞–Ω–∏—Ü–∞
                optimized_vehicle_customers.append(customer)
                current_volume += customer.volume
                moved_count += 1
                logger.info(f"–ü—Ä–µ–º–µ—Å—Ç–µ–Ω –∫–ª–∏–µ–Ω—Ç {customer.id} –æ—Ç —Å–∫–ª–∞–¥ –≤ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ ({customer.volume:.1f} —Å—Ç.)")
            else:
                optimized_warehouse_customers.append(customer)
        
        # –ü—Ä–µ–∏–∑—á–∏—Å–ª—è–≤–∞–º–µ –æ–±–µ–º–∏—Ç–µ
        optimized_vehicle_volume = sum(c.volume for c in optimized_vehicle_customers)
        optimized_warehouse_volume = sum(c.volume for c in optimized_warehouse_customers)
        optimized_utilization = optimized_vehicle_volume / allocation.total_vehicle_capacity
        
        if moved_count > 0:
            logger.info(f"‚úÖ –ü—Ä–µ–º–µ—Å—Ç–µ–Ω–∏ {moved_count} –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç —Å–∫–ª–∞–¥ –≤ –∞–≤—Ç–æ–±—É—Å–∏")
            logger.info(f"üéØ –§–∏–Ω–∞–ª–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç:")
            logger.info(f"   üöõ –ê–≤—Ç–æ–±—É—Å–∏: {len(optimized_vehicle_customers)} –∫–ª–∏–µ–Ω—Ç–∞ ({optimized_vehicle_volume:.1f} —Å—Ç.)")
            logger.info(f"   üè≠ –°–∫–ª–∞–¥: {len(optimized_warehouse_customers)} –∫–ª–∏–µ–Ω—Ç–∞ ({optimized_warehouse_volume:.1f} —Å—Ç.)")
            logger.info(f"   üìä –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ: {optimized_utilization:.1%}")
            logger.info(f"   ü§ñ OR-Tools —Å—Ç–∞–±–∏–ª–Ω–æ—Å—Ç: {'‚úÖ –û—Ç–ª–∏—á–Ω–∞' if optimized_utilization <= self.config.ortools_safe_utilization else '‚úÖ –î–æ–±—Ä–∞' if optimized_utilization <= 0.75 else '‚ö†Ô∏è –†–∏—Å–∫–æ–≤–∞–Ω–∞'}")
        else:
            logger.info(f"ÔøΩÔøΩ –ù—è–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏ –∑–∞ –ø—Ä–µ–º–µ—Å—Ç–≤–∞–Ω–µ")
        
        return WarehouseAllocation(
            vehicle_customers=optimized_vehicle_customers,
            warehouse_customers=optimized_warehouse_customers,
            total_vehicle_capacity=allocation.total_vehicle_capacity,
            total_vehicle_volume=optimized_vehicle_volume,
            warehouse_volume=optimized_warehouse_volume,
            capacity_utilization=optimized_utilization
        )
    
    def get_allocation_summary(self, allocation: WarehouseAllocation) -> Dict[str, Any]:
        """–í—Ä—ä—â–∞ —Ä–µ–∑—é–º–µ –Ω–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ"""
        return {
            'total_customers': len(allocation.vehicle_customers) + len(allocation.warehouse_customers),
            'vehicle_customers_count': len(allocation.vehicle_customers),
            'warehouse_customers_count': len(allocation.warehouse_customers),
            'total_vehicle_capacity': allocation.total_vehicle_capacity,
            'vehicle_volume_used': allocation.total_vehicle_volume,
            'warehouse_volume': allocation.warehouse_volume,
            'capacity_utilization_percent': allocation.capacity_utilization * 100,
            'available_capacity': allocation.total_vehicle_capacity - allocation.total_vehicle_volume,
            'warehouse_percentage': (len(allocation.warehouse_customers) / 
                                   (len(allocation.vehicle_customers) + len(allocation.warehouse_customers)) * 100
                                   if (len(allocation.vehicle_customers) + len(allocation.warehouse_customers)) > 0 else 0)
        }
    
    def validate_allocation(self, allocation: WarehouseAllocation) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –æ–±–µ–º—ä—Ç –Ω–µ –Ω–∞–¥–≤–∏—à–∞–≤–∞ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞
        if allocation.total_vehicle_volume > allocation.total_vehicle_capacity:
            logger.error("–û–±–µ–º—ä—Ç –∑–∞ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞–¥–≤–∏—à–∞–≤–∞ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥—É–±–ª–∏—Ä–∞–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏
        all_customer_ids = [c.id for c in allocation.vehicle_customers] + [c.id for c in allocation.warehouse_customers]
        if len(all_customer_ids) != len(set(all_customer_ids)):
            logger.error("–û—Ç–∫—Ä–∏—Ç–∏ –¥—É–±–ª–∏—Ä–∞–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏ –≤ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ")
            return False
        
        return True
    
    def can_fit_in_vehicles(self, customers: List[Customer]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ –º–æ–≥–∞—Ç –¥–∞ —Å–µ –ø–æ–±–µ—Ä–∞—Ç –≤ –ø—Ä–µ–≤–æ–∑–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞"""
        total_volume = sum(c.volume for c in customers)
        total_capacity = self._calculate_total_vehicle_capacity()
        
        return total_volume <= total_capacity


# –£–¥–æ–±–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ
def allocate_customers_to_vehicles_and_warehouse(input_data: InputData) -> WarehouseAllocation:
    """–£–¥–æ–±–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏"""
    manager = WarehouseManager()
    allocation = manager.allocate_customers(input_data)
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ
    optimized_allocation = manager.optimize_allocation(allocation)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not manager.validate_allocation(optimized_allocation):
        raise ValueError("–ù–µ–≤–∞–ª–∏–¥–Ω–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏")
    
    # –õ–æ–≥–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—é–º–µ—Ç–æ
    summary = manager.get_allocation_summary(optimized_allocation)
    logger.info(f"–†–µ–∑—é–º–µ –Ω–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ: {summary}")
    
    return optimized_allocation 