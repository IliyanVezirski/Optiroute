"""
–ú–æ–¥—É–ª –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–æ–≤–∞ –ª–æ–≥–∏–∫–∞ –≤ CVRP
–£–ø—Ä–∞–≤–ª—è–≤–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ –Ω–∞ –∑–∞—è–≤–∫–∏ –º–µ–∂–¥—É –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —Å–∫–ª–∞–¥
"""

from typing import List, Tuple, Dict, Optional, Any
from dataclasses import dataclass
import logging
import math
from config import get_config, WarehouseConfig, VehicleConfig, VehicleType
from input_handler import Customer, InputData

logger = logging.getLogger(__name__)


def calculate_distance_km(coord1: Optional[Tuple[float, float]], coord2: Tuple[float, float]) -> float:
    """–ò–∑—á–∏—Å–ª—è–≤–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –º–µ–∂–¥—É –¥–≤–µ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∏ (Haversine —Ñ–æ—Ä–º—É–ª–∞)"""
    if not coord1 or not coord2:
        return 0.0
    
    lat1, lon1 = math.radians(coord1[0]), math.radians(coord1[1])
    lat2, lon2 = math.radians(coord2[0]), math.radians(coord2[1])
    
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    
    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
    c = 2 * math.asin(math.sqrt(a))
    
    return 6371 * c  # 6371 km –µ —Ä–∞–¥–∏—É—Å—ä—Ç –Ω–∞ –ó–µ–º—è—Ç–∞


def is_in_center_zone(customer_coords: Optional[Tuple[float, float]], center_location: Tuple[float, float], radius_km: float) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—ä—Ç –µ –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞"""
    distance = calculate_distance_km(customer_coords, center_location)
    return distance <= radius_km


@dataclass
class WarehouseAllocation:
    """–†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —Å–∫–ª–∞–¥"""
    vehicle_customers: List[Customer]  # –∫–ª–∏–µ–Ω—Ç–∏ –∑–∞ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
    warehouse_customers: List[Customer]  # –∫–ª–∏–µ–Ω—Ç–∏ –∑–∞ —Å–∫–ª–∞–¥
    total_vehicle_capacity: int
    total_vehicle_volume: float
    warehouse_volume: float
    capacity_utilization: float
    center_zone_customers: Optional[List[Customer]] = None  # –∫–ª–∏–µ–Ω—Ç–∏ –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞


class WarehouseManager:
    """–ú–µ–Ω–∏–¥–∂—ä—Ä –∑–∞ —Å–∫–ª–∞–¥–æ–≤–∞ –ª–æ–≥–∏–∫–∞"""
    
    def __init__(self, config: Optional[WarehouseConfig] = None):
        self.config = config or get_config().warehouse
        self.vehicle_configs = get_config().vehicles
        self.location_config = get_config().locations
    
    def allocate_customers(self, input_data: InputData) -> WarehouseAllocation:
        """–†–∞–∑–ø—Ä–µ–¥–µ–ª—è –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ –º–µ–∂–¥—É –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —Å–∫–ª–∞–¥ –ø–æ –Ω–æ–≤–∞—Ç–∞ –ª–æ–≥–∏–∫–∞"""
        logger.info("–ó–∞–ø–æ—á–≤–∞–º —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏ –ø–æ –Ω–æ–≤–∞—Ç–∞ –ª–æ–≥–∏–∫–∞")
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –æ–±—â–∏—è –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç
        total_capacity = self._calculate_total_vehicle_capacity()
        
        # –°–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ –ø–æ –æ–±–µ–º (–æ—Ç –Ω–∞–π-–º–∞–ª—ä–∫ –∫—ä–º –Ω–∞–π-–≥–æ–ª—è–º)
        # –∏ –∑–∞ –∫–ª–∏–µ–Ω—Ç–∏ —Å –µ–¥–Ω–∞–∫—ä–≤ –æ–±–µ–º - –ø–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ (–æ—Ç –Ω–∞–π-–¥–∞–ª–µ—á–µ–Ω –∫—ä–º –Ω–∞–π-–±–ª–∏–∑—ä–∫)
        sorted_customers = self._sort_customers(input_data.customers)
        
        logger.info(f"–°–æ—Ä—Ç–∏—Ä–∞–Ω–∏ {len(sorted_customers)} –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –æ–±–µ–º (–Ω–∞–π-–º–∞–ª—ä–∫ ‚Üí –Ω–∞–π-–≥–æ–ª—è–º) "
                   f"–∏ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞–π-–¥–∞–ª–µ—á–µ–Ω ‚Üí –Ω–∞–π-–±–ª–∏–∑—ä–∫)")
        
        # –ü—Ä–∏–ª–∞–≥–∞–º–µ –Ω–æ–≤–∞—Ç–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        return self._allocate_with_warehouse(sorted_customers, total_capacity)
    
    def _calculate_total_vehicle_capacity(self) -> int:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ –æ–±—â–∏—è –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç –Ω–∞ –≤—Å–∏—á–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"""
        total_capacity = 0
        
        if self.vehicle_configs:
            for vehicle in self.vehicle_configs:
                if vehicle.enabled:
                    total_capacity += vehicle.capacity * vehicle.count
        
        return total_capacity
        
    def _get_max_single_bus_capacity(self) -> int:
        """–í—Ä—ä—â–∞ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞ –Ω–∞ –Ω–∞–π-–≥–æ–ª–µ–º–∏—è –µ–¥–∏–Ω–∏—á–µ–Ω –±—É—Å –æ—Ç –Ω–∞–ª–∏—á–Ω–∏—Ç–µ"""
        max_capacity = 0
        
        if self.vehicle_configs:
            for vehicle in self.vehicle_configs:
                if vehicle.enabled and vehicle.capacity > max_capacity:
                    max_capacity = vehicle.capacity
        
        return max_capacity
    
    def _sort_customers(self, customers: List[Customer]) -> List[Customer]:
        """
        –°–æ—Ä—Ç–∏—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ –ø–æ –æ–±–µ–º (–æ—Ç –Ω–∞–π-–º–∞–ª—ä–∫ –∫—ä–º –Ω–∞–π-–≥–æ–ª—è–º)
        –∏ —Å–ª–µ–¥ —Ç–æ–≤–∞ –ø–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ (–æ—Ç –Ω–∞–π-–¥–∞–ª–µ—á–µ–Ω –∫—ä–º –Ω–∞–π-–±–ª–∏–∑—ä–∫) –¥–æ –¥–µ–ø–æ—Ç–æ
        """
        # –í–∑–∏–º–∞–º–µ –¥–µ–ø–æ –ª–æ–∫–∞—Ü–∏—è—Ç–∞ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        depot_location = self.location_config.depot_location
        
        # –ü—ä—Ä–≤–æ —Å–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ –æ–±–µ–º (–æ—Ç –Ω–∞–π-–º–∞–ª—ä–∫ –∫—ä–º –Ω–∞–π-–≥–æ–ª—è–º)
        volume_sorted = sorted(customers, key=lambda c: c.volume)
        
        # –ì—Ä—É–ø–∏—Ä–∞–º–µ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ —Å—ä—Å —Å—ä—â–∏—è –æ–±–µ–º
        volume_groups = {}
        for customer in volume_sorted:
            volume_key = round(customer.volume, 2)  # –ó–∞–∫—Ä—ä–≥–ª—è–º–µ –∑–∞ –ø–æ-–¥–æ–±—Ä–æ –≥—Ä—É–ø–∏—Ä–∞–Ω–µ
            if volume_key not in volume_groups:
                volume_groups[volume_key] = []
            volume_groups[volume_key].append(customer)
        
        # –í —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ –≤—Å—è–∫–∞ –≥—Ä—É–ø–∞ —Å—ä—Å —Å—ä—â–∏—è –æ–±–µ–º, —Å–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ (–æ—Ç –Ω–∞–π-–¥–∞–ª–µ—á–µ–Ω –∫—ä–º –Ω–∞–π-–±–ª–∏–∑—ä–∫)
        result = []
        for volume_key in sorted(volume_groups.keys()):
            same_volume_customers = volume_groups[volume_key]
            # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¥–µ–ø–æ—Ç–æ (–æ—Ç –Ω–∞–π-–¥–∞–ª–µ—á–µ–Ω –∫—ä–º –Ω–∞–π-–±–ª–∏–∑—ä–∫)
            distance_sorted = sorted(
                same_volume_customers,
                key=lambda c: -calculate_distance_km(c.coordinates, depot_location) if c.coordinates else 0
            )
            result.extend(distance_sorted)
        
        return result
    
    def _allocate_with_warehouse(self, customers: List[Customer], 
                               total_capacity: int) -> WarehouseAllocation:
        """
        –ù–æ–≤–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:
        1. –°–æ—Ä—Ç–∏—Ä–∞–Ω–µ –ø–æ –æ–±–µ–º (–æ—Ç –Ω–∞–π-–º–∞–ª—ä–∫ –∫—ä–º –Ω–∞–π-–≥–æ–ª—è–º)
        2. –ó–∞ –∫–ª–∏–µ–Ω—Ç–∏ —Å—ä—Å —Å—ä—â–∏—è –æ–±–µ–º - —Å–æ—Ä—Ç–∏—Ä–∞–Ω–µ –ø–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ (–æ—Ç –Ω–∞–π-–¥–∞–ª–µ—á–µ–Ω –∫—ä–º –Ω–∞–π-–±–ª–∏–∑—ä–∫)
        3. –ü—ä–ª–Ω–µ–Ω–µ –Ω–∞ –±—É—Å–æ–≤–µ—Ç–µ –¥–æ –¥–æ—Å—Ç–∏–≥–∞–Ω–µ –Ω–∞ 100% –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç –∏–ª–∏ –∏–∑—á–µ—Ä–ø–≤–∞–Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ
        4. –û—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∏ —Å–µ –æ—Å—Ç–∞–≤—è—Ç –≤ —Å–∫–ª–∞–¥–∞
        5. –î–û–ü–™–õ–ù–ò–¢–ï–õ–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ –Ω–∞–¥–≤–∏—à–∞–≤–∞—Ç –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞ –Ω–∞ –Ω–∞–π-–≥–æ–ª–µ–º–∏—è –±—É—Å
        """
        logger.info("üîÑ –ü—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏")
        
        # –í–µ—á–µ –∏–º–∞–º–µ —Å–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏ (–æ—Ç _sort_customers)
        # –ü–æ –æ–±–µ–º - –æ—Ç –Ω–∞–π-–º–∞–ª—ä–∫ –∫—ä–º –Ω–∞–π-–≥–æ–ª—è–º
        # –ó–∞ –∫–ª–∏–µ–Ω—Ç–∏ —Å –µ–¥–Ω–∞–∫—ä–≤ –æ–±–µ–º - –ø–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–∞–π-–¥–∞–ª–µ—á–µ–Ω –∫—ä–º –Ω–∞–π-–±–ª–∏–∑—ä–∫
        
        # –ù–∞–º–∏—Ä–∞–º–µ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞ –Ω–∞ –Ω–∞–π-–≥–æ–ª–µ–º–∏—è –±—É—Å
        max_single_bus_capacity = self._get_max_single_bus_capacity()
        if max_single_bus_capacity <= 0:
            logger.warning("‚ö†Ô∏è –ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –±—É—Å–æ–≤–µ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª–µ–Ω –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç!")
            return WarehouseAllocation(
                vehicle_customers=[],
                warehouse_customers=customers,
                total_vehicle_capacity=0,
                total_vehicle_volume=0,
                warehouse_volume=sum(c.volume for c in customers),
                capacity_utilization=0
            )
        
        logger.info(f"‚ÑπÔ∏è –ö–∞–ø–∞—Ü–∏—Ç–µ—Ç –Ω–∞ –Ω–∞–π-–≥–æ–ª–µ–º–∏—è –±—É—Å: {max_single_bus_capacity} —Å—Ç.")
        
        vehicle_customers = []
        warehouse_customers = []
        current_volume = 0.0
        
        # –ü—ä–ª–Ω–µ–Ω–µ –Ω–∞ –±—É—Å–æ–≤–µ—Ç–µ –¥–æ –¥–æ—Å—Ç–∏–≥–∞–Ω–µ –Ω–∞ 100% –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Ä–∞–∑–º–µ—Ä –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ
        for customer in customers:
            # –ü–†–û–í–ï–†–ö–ê 1: –î–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—ä—Ç –µ —Ç–≤—ä—Ä–¥–µ –≥–æ–ª—è–º –∑–∞ –∫–æ–π—Ç–æ –∏ –¥–∞ –µ –±—É—Å
            if customer.volume > max_single_bus_capacity:
                logger.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç '{customer.name}' (–æ–±–µ–º: {customer.volume:.2f} —Å—Ç.) –µ —Ç–≤—ä—Ä–¥–µ –≥–æ–ª—è–º "
                              f"–∑–∞ –Ω–∞–π-–≥–æ–ª–µ–º–∏—è –±—É—Å (–∫–∞–ø–∞—Ü–∏—Ç–µ—Ç: {max_single_bus_capacity} —Å—Ç.) –∏ –æ—Ç–∏–≤–∞ –¥–∏—Ä–µ–∫—Ç–Ω–æ –≤ —Å–∫–ª–∞–¥–∞")
                warehouse_customers.append(customer)
                continue
                
            # –ü–†–û–í–ï–†–ö–ê 2: –î–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—ä—Ç –µ —Å –æ–±–µ–º –ø–æ-–≥–æ–ª—è–º –æ—Ç –º–∞–∫—Å–∏–º–∞–ª–Ω–∏—è –∑–∞ –æ–±—Å–ª—É–∂–≤–∞–Ω–µ –æ—Ç –±—É—Å–æ–≤–µ
            max_volume = self.config.max_bus_customer_volume
            if customer.volume > max_volume:
                logger.info(f"üîç –ö–ª–∏–µ–Ω—Ç '{customer.name}' (–æ–±–µ–º: {customer.volume:.2f} —Å—Ç.) –µ –Ω–∞–¥ –º–∞–∫—Å–∏–º–∞–ª–Ω–∏—è –æ–±–µ–º "
                           f"–∑–∞ –±—É—Å–æ–≤–µ ({max_volume:.2f} —Å—Ç.) –∏ –æ—Ç–∏–≤–∞ –¥–∏—Ä–µ–∫—Ç–Ω–æ –≤ —Å–∫–ª–∞–¥–∞")
                warehouse_customers.append(customer)
                continue
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –æ–±—â –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç
            if current_volume + customer.volume <= total_capacity * self.config.capacity_toleranse:
                vehicle_customers.append(customer)
                current_volume += customer.volume
            else:
                warehouse_customers.append(customer)
        
        # –ò–î–ï–ù–¢–ò–§–ò–¶–ò–†–ê–ù–ï –ù–ê –ö–õ–ò–ï–ù–¢–ò –í –¶–ï–ù–¢–™–† –ó–û–ù–ê–¢–ê
        center_zone_customers = []
        if self.location_config.enable_center_zone_priority:
            center_zone_customers = self._identify_center_zone_customers(vehicle_customers)
            logger.info(f"üéØ –ù–∞–º–µ—Ä–µ–Ω–∏ {len(center_zone_customers)} –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞ (—Ä–∞–¥–∏—É—Å {self.location_config.center_zone_radius_km} –∫–º)")
        
        warehouse_volume = sum(c.volume for c in warehouse_customers)
        
        logger.info(f"–ù–æ–≤–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {len(vehicle_customers)} –∑–∞ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞, "
                   f"{len(warehouse_customers)} –∑–∞ —Å–∫–ª–∞–¥")
        logger.info(f"–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞: {current_volume}/{total_capacity} ({current_volume/total_capacity:.1%})")
        
        return WarehouseAllocation(
            vehicle_customers=vehicle_customers,
            warehouse_customers=warehouse_customers,
            total_vehicle_capacity=total_capacity,
            total_vehicle_volume=current_volume,
            warehouse_volume=warehouse_volume,
            capacity_utilization=current_volume / total_capacity if total_capacity > 0 else 0,
            center_zone_customers=center_zone_customers
        )
    
    def _knapsack_allocation(self, customers: List[Customer], capacity: int) -> Optional[Tuple[List[Customer], List[Customer]]]:
        """–ò–∑–ø–æ–ª–∑–≤–∞ knapsack-–ø–æ–¥–æ–±–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç—ä–º –∑–∞ –æ–ø—Ç–∏–º–∞–ª–Ω–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"""
        try:
            n = len(customers)
            if n == 0:
                return [], []
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ –≤ —Ü–µ–ª–∏ —á–∏—Å–ª–∞ –∑–∞ knapsack –∞–ª–≥–æ—Ä–∏—Ç—ä–º–∞ 
            volumes = [int(c.volume * 10) for c in customers]  # —É–º–Ω–æ–∂–∞–≤–∞–º–µ –ø–æ 10 –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç
            capacity_int = int(capacity * 10)
            
            # –û–ø—Ä–æ—Å—Ç–µ–Ω greedy knapsack –∞–ª–≥–æ—Ä–∏—Ç—ä–º
            # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç (–æ–±–µ–º/1 - –º–∞–ª–∫–æ –ø–æ-–≥–æ–ª—è–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞ –ø–æ-–≥–æ–ª–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∏)
            indexed_customers = [(i, customers[i], volumes[i]) for i in range(n)]
            indexed_customers.sort(key=lambda x: x[2], reverse=True)  # –≥–æ–ª–µ–º–∏ –ø—ä—Ä–≤–æ –∑–∞ –ø–æ-–¥–æ–±—Ä–æ –∑–∞–ø—ä–ª–≤–∞–Ω–µ
            
            selected = []
            current_capacity = 0
            
            # Greedily –¥–æ–±–∞–≤—è–º–µ –∫–ª–∏–µ–Ω—Ç–∏
            for idx, customer, volume in indexed_customers:
                if current_capacity + volume <= capacity_int:  # –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Ç–æ–ª–µ—Ä–∞–Ω—Å –∑–∞ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞
                    selected.append(idx)
                    current_capacity += volume
            
            # –†–∞–∑–¥–µ–ª—è–º–µ –Ω–∞ vehicle –∏ warehouse –∫–ª–∏–µ–Ω—Ç–∏
            vehicle_customers = [customers[i] for i in selected]
            warehouse_customers = [customers[i] for i in range(n) if i not in selected]
            
            return vehicle_customers, warehouse_customers
            
        except Exception as e:
            logger.error(f"–ì—Ä–µ—à–∫–∞ –≤ knapsack –∞–ª–≥–æ—Ä–∏—Ç—ä–º: {e}")
            return None
    
    def _simple_allocation(self, customers: List[Customer], total_capacity: int) -> Tuple[List[Customer], List[Customer]]:
        """–ü—Ä–æ—Å—Ç–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (fallback)"""
        vehicle_customers = []
        warehouse_customers = []
        current_volume = 0.0
        
        for customer in customers:
            if current_volume + customer.volume <= total_capacity:
                vehicle_customers.append(customer)
                current_volume += customer.volume
            else:
                warehouse_customers.append(customer)
        
        return vehicle_customers, warehouse_customers
    
    def _allocate_largest_to_warehouse(self, customers: List[Customer], total_capacity: int) -> Tuple[List[Customer], List[Customer]]:
        """
        –°–¢–ê–†–ê –õ–û–ì–ò–ö–ê - –ù–ï –°–ï –ò–ó–ü–û–õ–ó–í–ê –í–ï–ß–ï
        –ü—Ä–µ–¥–∏—à–Ω–∞—Ç–∞ –ª–æ–≥–∏–∫–∞, –∫–æ—è—Ç–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª—è –∫–ª–∏–µ–Ω—Ç–∏, –∫–∞—Ç–æ –æ—Ç–¥–µ–ª—è –≥–æ–ª–µ–º–∏—Ç–µ –∑–∞ —Å–∫–ª–∞–¥–∞.
        –ó–∞–º–µ–Ω–µ–Ω–∞ —Å –Ω–æ–≤–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ —Å–æ—Ä—Ç–∏—Ä–∞–Ω–µ –ø–æ –æ–±–µ–º –∏ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ.
        """
        logger.info("‚ùå –¢–∞–∑–∏ –ª–æ–≥–∏–∫–∞ –≤–µ—á–µ –Ω–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞.")
        return [], []
        
        # –°—Ç–∞—Ä–∞—Ç–∞ –ª–æ–≥–∏–∫–∞ –µ –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–∞–Ω–∞, —Ç—ä–π –∫–∞—Ç–æ –≤–µ—á–µ –Ω–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞
        """
        logger.info("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–∞–Ω–æ –µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª–Ω–æ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –∑–∞—è–≤–∫–∏.")

        if not self.vehicle_configs:
            logger.warning("–ù—è–º–∞ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–∏ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞. –í—Å–∏—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∏ –æ—Ç–∏–≤–∞—Ç –∫—ä–º solver-–∞.")
            return customers, []

        # 1. –ù–∞–º–∏—Ä–∞–º–µ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞ –Ω–∞ –ù–ê–ô-–ì–û–õ–ï–ú–ò–Ø –µ–¥–∏–Ω–∏—á–µ–Ω –±—É—Å
        max_vehicle_capacity = 0
        for v_config in self.vehicle_configs:
            if v_config.enabled and v_config.capacity > max_vehicle_capacity:
                max_vehicle_capacity = v_config.capacity
        
        if max_vehicle_capacity == 0:
            logger.warning("–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç > 0.")
            return customers, []
            
        logger.info(f"–î–ï–ë–™–ì: –ú–∞–∫—Å–∏–º–∞–ª–µ–Ω –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç –Ω–∞ –µ–¥–∏–Ω–∏—á–µ–Ω –±—É—Å: {max_vehicle_capacity}")

        # 2. –û–ø—Ä–µ–¥–µ–ª—è–º–µ –ø—Ä–∞–≥–∞ –∑–∞ "–≥–æ–ª—è–º–∞" –∑–∞—è–≤–∫–∞
        large_request_threshold_volume = max_vehicle_capacity * self.config.large_request_threshold
        logger.info(f"–î–ï–ë–™–ì: –ü—Ä–∞–≥ –∑–∞ '–≥–æ–ª—è–º–∞' –∑–∞—è–≤–∫–∞ (–Ω–∞–¥ {self.config.large_request_threshold:.0%}): {large_request_threshold_volume:.2f} —Å—Ç.")

        vehicle_customers = []
        warehouse_customers = []

        for customer in customers:
            # 3. –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—ä—Ç –µ –ê–ë–°–û–õ–Æ–¢–ù–û –Ω–µ–≤—ä–∑–º–æ–∂–µ–Ω
            if customer.volume > max_vehicle_capacity:
                logger.warning(f"–î–ï–ë–™–ì: –ö–ª–∏–µ–Ω—Ç '{customer.name}' (–æ–±–µ–º: {customer.volume}) –µ —Ç–≤—ä—Ä–¥–µ –≥–æ–ª—è–º "
                               f"(–Ω–∞–¥–≤–∏—à–∞–≤–∞ {max_vehicle_capacity}) –∏ —Å–µ –∏–∑–ø—Ä–∞—â–∞ –¥–∏—Ä–µ–∫—Ç–Ω–æ –≤ —Å–∫–ª–∞–¥–∞.")
                warehouse_customers.append(customer)
                continue

            # 4. –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –¥–∞ –≥–æ –ø—Ä–µ–º–µ—Å—Ç–∏–º –≤ —Å–∫–ª–∞–¥–∞ —Å–ø–æ—Ä–µ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
            if self.config.move_largest_to_warehouse and customer.volume > large_request_threshold_volume:
                logger.info(f"–î–ï–ë–™–ì: –ö–ª–∏–µ–Ω—Ç '{customer.name}' (–æ–±–µ–º: {customer.volume}) —Å–µ —Å—á–∏—Ç–∞ –∑–∞ '–≥–æ–ª—è–º' –∏ —Å–µ –∏–∑–ø—Ä–∞—â–∞ –≤ —Å–∫–ª–∞–¥–∞.")
                warehouse_customers.append(customer)
            else:
                vehicle_customers.append(customer)

        # –§–∏–Ω–∞–ª–Ω–∏ –∏–∑—á–∏—Å–ª–µ–Ω–∏—è
        vehicle_volume = sum(c.volume for c in vehicle_customers)
        warehouse_volume = sum(c.volume for c in warehouse_customers)
        actual_utilization = vehicle_volume / total_capacity if total_capacity > 0 else 0
        
        # –õ–æ–≥–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
        logger.info(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª–Ω–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ:")
        logger.info(f"  üöõ –ö–ª–∏–µ–Ω—Ç–∏ –∑–∞ Solver: {len(vehicle_customers)} ({vehicle_volume:.1f} —Å—Ç.)")
        logger.info(f"  üè≠ –ö–ª–∏–µ–Ω—Ç–∏ –∑–∞ –°–∫–ª–∞–¥ (—Ç–≤—ä—Ä–¥–µ –≥–æ–ª–µ–º–∏): {len(warehouse_customers)} ({warehouse_volume:.1f} —Å—Ç.)")
        logger.info(f"  üìä –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª–Ω–æ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç: {actual_utilization:.1%}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç
        total_input_volume = sum(c.volume for c in customers)
        total_output_volume = vehicle_volume + warehouse_volume
        if abs(total_input_volume - total_output_volume) > 0.1:
            logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ: Input {total_input_volume:.1f} != Output {total_output_volume:.1f}")
        
        return vehicle_customers, warehouse_customers
        """
    
    def _identify_center_zone_customers(self, customers: List[Customer]) -> List[Customer]:
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ, –∫–æ–∏—Ç–æ —Å–∞ –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞"""
        center_zone_customers = []
        
        for customer in customers:
            if customer.coordinates and is_in_center_zone(
                customer.coordinates, 
                self.location_config.center_location, 
                self.location_config.center_zone_radius_km
            ):
                center_zone_customers.append(customer)
                logger.debug(f"üéØ –ö–ª–∏–µ–Ω—Ç '{customer.name}' –µ –≤ —Ü–µ–Ω—Ç—ä—Ä –∑–æ–Ω–∞—Ç–∞ (—Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ: "
                           f"{calculate_distance_km(customer.coordinates, self.location_config.center_location):.2f} –∫–º)")
        
        return center_zone_customers
    
    def optimize_allocation(self, allocation: WarehouseAllocation) -> WarehouseAllocation:
        """
        –¢–æ–∑–∏ –º–µ—Ç–æ–¥ –≤–µ—á–µ –Ω–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞.
        –¶—è–ª–∞—Ç–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏ –µ –ø—Ä–µ—Ö–≤—ä—Ä–ª–µ–Ω–∞ –∫—ä–º OR-Tools solver-–∞,
        –∫–æ–π—Ç–æ –≤–∑–∏–º–∞ –æ–ø—Ç–∏–º–∞–ª–Ω–æ —Ä–µ—à–µ–Ω–∏–µ –∫–æ–∏ –∫–ª–∏–µ–Ω—Ç–∏ –¥–∞ –ø—Ä–æ–ø—É—Å–Ω–µ.
        """
        logger.info("‚è© –ú–µ—Ç–æ–¥—ä—Ç optimize_allocation —Å–µ –ø—Ä–æ–ø—É—Å–∫–∞ (–ª–æ–≥–∏–∫–∞—Ç–∞ –µ –≤ solver-–∞).")
        return allocation
    
    def get_allocation_summary(self, allocation: WarehouseAllocation) -> Dict[str, Any]:
        """–í—Ä—ä—â–∞ —Ä–µ–∑—é–º–µ –Ω–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ"""
        total_customers = len(allocation.vehicle_customers) + len(allocation.warehouse_customers)
        return {
            'total_customers': total_customers,
            'vehicle_customers_count': len(allocation.vehicle_customers),
            'warehouse_customers_count': len(allocation.warehouse_customers),
            'total_vehicle_capacity': allocation.total_vehicle_capacity,
            'vehicle_volume_used': allocation.total_vehicle_volume,
            'warehouse_volume': allocation.warehouse_volume,
            'capacity_utilization_percent': allocation.capacity_utilization * 100,
            'available_capacity': allocation.total_vehicle_capacity - allocation.total_vehicle_volume,
            'warehouse_percentage': (len(allocation.warehouse_customers) / total_customers) * 100 if total_customers > 0 else 0
        }
    
    def validate_allocation(self, allocation: WarehouseAllocation) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –æ–±–µ–º—ä—Ç –Ω–µ –Ω–∞–¥–≤–∏—à–∞–≤–∞ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞
        if allocation.total_vehicle_volume > allocation.total_vehicle_capacity:
            logger.error("–û–±–µ–º—ä—Ç –∑–∞ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞–¥–≤–∏—à–∞–≤–∞ –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥—É–±–ª–∏—Ä–∞–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏
        all_customer_ids = [c.id for c in allocation.vehicle_customers] + [c.id for c in allocation.warehouse_customers]
        if len(all_customer_ids) != len(set(all_customer_ids)):
            logger.error("–û—Ç–∫—Ä–∏—Ç–∏ –¥—É–±–ª–∏—Ä–∞–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏ –≤ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ")
            return False
        
        return True
    
    def can_fit_in_vehicles(self, customers: List[Customer]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∏—Ç–µ –º–æ–≥–∞—Ç –¥–∞ —Å–µ –ø–æ–±–µ—Ä–∞—Ç –≤ –ø—Ä–µ–≤–æ–∑–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞"""
        total_volume = sum(c.volume for c in customers)
        total_capacity = self._calculate_total_vehicle_capacity()
        
        return total_volume <= total_capacity


# –£–¥–æ–±–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ
def allocate_customers_to_vehicles_and_warehouse(input_data: InputData) -> WarehouseAllocation:
    """–£–¥–æ–±–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏"""
    manager = WarehouseManager()
    allocation = manager.allocate_customers(input_data)
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ
    optimized_allocation = manager.optimize_allocation(allocation)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not manager.validate_allocation(optimized_allocation):
        raise ValueError("–ù–µ–≤–∞–ª–∏–¥–Ω–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∏")
    
    # –õ–æ–≥–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—é–º–µ—Ç–æ
    summary = manager.get_allocation_summary(optimized_allocation)
    logger.info(f"–†–µ–∑—é–º–µ –Ω–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ: {summary}")
    
    return optimized_allocation 