"""
–û–ø—Ä–æ—Å—Ç–µ–Ω —Å–∫—Ä–∏–ø—Ç –∑–∞ –∫–æ–º–ø–∏–ª–∏—Ä–∞–Ω–µ –Ω–∞ CVRP –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–∞ –≤ EXE —Ñ–∞–π–ª
"""

import subprocess
import sys
import os
from pathlib import Path

def main():
    """–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ CVRP Optimizer - –û–ø—Ä–æ—Å—Ç–µ–Ω EXE Builder")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ PyInstaller –µ –Ω–∞–ª–∏—á–µ–Ω
    try:
        import PyInstaller
        print("‚úÖ PyInstaller –µ –Ω–∞–ª–∏—á–µ–Ω")
    except ImportError:
        print("‚ùå PyInstaller –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω!")
        print("–ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–π—Ç–µ –≥–æ —Å: pip install pyinstaller")
        return
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ .spec —Ñ–∞–π–ª
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['main_exe.py'],
    pathex=[],
    binaries=[
        ('.venv/Lib/site-packages/ortools/constraint_solver/_pywrapcp.pyd', 'ortools/constraint_solver'),
        ('.venv/Lib/site-packages/ortools/linear_solver/_pywraplp.pyd', 'ortools/linear_solver'),
    ],
    datas=[
        ('config.py', '.'),
        ('input_handler.py', '.'),
        ('warehouse_manager.py', '.'),
        ('cvrp_solver.py', '.'),
        ('output_handler.py', '.'),
        ('osrm_client.py', '.'),
    ],
    hiddenimports=[
        'ortools',
        'ortools.constraint_solver',
        'ortools.constraint_solver.pywrapcp',
        'ortools.linear_solver',
        'ortools.linear_solver.pywraplp',
        'pandas',
        'openpyxl',
        'requests',
        'numpy',
        'multiprocessing',
        'logging',
        'pathlib',
        'typing',
        'dataclasses',
        'copy',
        'time',
        'os',
        'sys'
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='CVRP_Optimizer',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None
)
'''
    
    with open('CVRP_Optimizer.spec', 'w', encoding='utf-8') as f:
        f.write(spec_content)
    
    print("‚úÖ –°—ä–∑–¥–∞–¥–µ–Ω CVRP_Optimizer.spec —Ñ–∞–π–ª")
    
    # –ö–æ–º–ø–∏–ª–∏—Ä–∞–º–µ EXE
    print("\nüî® –°—Ç–∞—Ä—Ç–∏—Ä–∞–º –∫–æ–º–ø–∏–ª–∏—Ä–∞–Ω–µ –Ω–∞ EXE...")
    
    try:
        subprocess.check_call([
            sys.executable, '-m', 'PyInstaller',
            '--clean',
            'CVRP_Optimizer.spec'
        ])
        
        print("‚úÖ EXE —Ñ–∞–π–ª—ä—Ç –µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Ñ–∞–π–ª—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
        exe_path = Path('dist/CVRP_Optimizer.exe')
        if exe_path.exists():
            print(f"üìÅ EXE —Ñ–∞–π–ª: {exe_path.absolute()}")
            
            # –°—ä–∑–¥–∞–≤–∞–º–µ batch —Ñ–∞–π–ª
            batch_content = '''@echo off
echo CVRP Optimizer - –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ...
echo.

if exist "data\\input.xlsx" (
    echo –ù–∞–º–µ—Ä–µ–Ω –≤—Ö–æ–¥–µ–Ω —Ñ–∞–π–ª: data\\input.xlsx
    CVRP_Optimizer.exe data\\input.xlsx
) else (
    echo –í—Ö–æ–¥–µ–Ω —Ñ–∞–π–ª –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω. –°—Ç–∞—Ä—Ç–∏—Ä–∞–º —Å –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ...
    CVRP_Optimizer.exe
)

echo.
echo –ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –¥–∞ –∑–∞—Ç–≤–æ—Ä–∏—Ç–µ...
pause
'''
            
            with open('start_cvrp.bat', 'w', encoding='utf-8') as f:
                f.write(batch_content)
            
            print("‚úÖ –°—ä–∑–¥–∞–¥–µ–Ω start_cvrp.bat —Ñ–∞–π–ª")
            print("\nüéâ –°—ä–∑–¥–∞–≤–∞–Ω–µ—Ç–æ –Ω–∞ EXE —Ñ–∞–π–ª–∞ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!")
            
        else:
            print("‚ùå EXE —Ñ–∞–π–ª—ä—Ç –Ω–µ –µ —Å—ä–∑–¥–∞–¥–µ–Ω!")
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–∏–ª–∏—Ä–∞–Ω–µ: {e}")

if __name__ == "__main__":
    main() 