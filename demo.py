"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–µ–Ω —Å–∫—Ä–∏–ø—Ç –∑–∞ CVRP –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–∞
–ü–æ–∫–∞–∑–≤–∞ –∫–∞–∫ –¥–∞ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞—Ç —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç–∏
"""

import os
import sys
from create_sample_data import create_sample_excel
from main import CVRPApplication

def run_demo():
    """–°—Ç–∞—Ä—Ç–∏—Ä–∞ –ø—ä–ª–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ CVRP –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–∞"""
    
    print("=" * 70)
    print("üöõ CVRP OPTIMIZER - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    print("=" * 70)
    
    # –°—Ç—ä–ø–∫–∞ 1: –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω–∏ –¥–∞–Ω–Ω–∏
    print("\nüìä –°—Ç—ä–ø–∫–∞ 1: –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω–∏ –¥–∞–Ω–Ω–∏")
    print("-" * 50)
    
    sample_file = create_sample_excel()
    
    # –°—Ç—ä–ø–∫–∞ 2: –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–∞
    print("\nüîß –°—Ç—ä–ø–∫–∞ 2: –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ CVRP –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    print("-" * 50)
    
    app = CVRPApplication()
    success = app.run(sample_file)
    
    if success:
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìÅ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–µ
        output_files = [
            "output/interactive_map.html",
            "output/excel/warehouse_orders.xlsx",
            "output/excel/vehicle_routes.xlsx",
            "logs/cvrp.log"
        ]
        
        for file_path in output_files:
            if os.path.exists(file_path):
                size = os.path.getsize(file_path)
                print(f"  ‚úì {file_path} ({size} bytes)")
            else:
                print(f"  ‚úó {file_path} (–Ω–µ –µ —Å—ä–∑–¥–∞–¥–µ–Ω)")
        
        print("\nüó∫Ô∏è  –ó–∞ –¥–∞ –≤–∏–¥–∏—Ç–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ:")
        print("  1. –û—Ç–≤–æ—Ä–µ—Ç–µ output/interactive_map.html –≤ –±—Ä–∞—É–∑—ä—Ä")
        print("  2. –ü—Ä–µ–≥–ª–µ–¥–∞–π—Ç–µ Excel —Ñ–∞–π–ª–æ–≤–µ—Ç–µ –≤ output/excel/")
        print("  3. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –ª–æ–≥–∞ –≤ logs/cvrp.log")
        
    else:
        print("\n‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ –∑–∞–≤—ä—Ä—à–∏ —Å –≥—Ä–µ—à–∫–∏!")
        print("–ú–æ–ª—è –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –ª–æ–≥ —Ñ–∞–π–ª–∞ –∑–∞ –¥–µ—Ç–∞–π–ª–∏.")
    
    return success

def run_custom_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    
    print("\n" + "=" * 70)
    print("‚öôÔ∏è  CVRP OPTIMIZER - –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–ê–ù–ê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    print("=" * 70)
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ –ø—Ä–∏–º–µ—Ä–Ω–∏ –¥–∞–Ω–Ω–∏ –∞–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç
    sample_file = "data/sample_clients.xlsx"
    if not os.path.exists(sample_file):
        print("üìä –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω–∏ –¥–∞–Ω–Ω–∏...")
        sample_file = create_sample_excel()
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    custom_config = {
        "cvrp": {
            "time_limit_seconds": 60,  # 1 –º–∏–Ω—É—Ç–∞ –ª–∏–º–∏—Ç –∑–∞ –¥–µ–º–æ
            "log_search": True,        # –ø–æ–∫–∞–∑–≤–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞
            "first_solution_strategy": "PATH_CHEAPEST_ARC"
        },
        "osrm": {
            "chunk_size": 25,         # –ü–æ-–º–∞–ª–∫–∏ chunks
            "use_cache": True
        },
        "warehouse": {
            "sort_by_volume": True,
            "move_largest_to_warehouse": True
        },
        "output": {
            "enable_interactive_map": True,
            "show_route_colors": True,
            "include_detailed_info": True
        },
        "debug_mode": True
    }
    
    print("‚öôÔ∏è  –ò–∑–ø–æ–ª–∑–≤–∞–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    for section, settings in custom_config.items():
        print(f"  {section}:")
        for key, value in settings.items():
            print(f"    {key}: {value}")
    
    print(f"\nüöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    
    app = CVRPApplication()
    success = app.run_with_custom_config(custom_config, sample_file)
    
    return success

def demo_vehicle_configurations():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"""
    
    print("\n" + "=" * 70)
    print("üöö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–ê –†–ê–ó–õ–ò–ß–ù–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–†–ï–í–û–ó–ù–ò –°–†–ï–î–°–¢–í–ê")
    print("=" * 70)
    
    from config import VehicleType, config_manager
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 1: –°–∞–º–æ –≤—ä—Ç—Ä–µ—à–Ω–∏ –±—É—Å–æ–≤–µ
    print("\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 1: –°–∞–º–æ –≤—ä—Ç—Ä–µ—à–Ω–∏ –±—É—Å–æ–≤–µ")
    config1 = {
        "vehicles": [
            {"vehicle_type": "internal_bus", "enabled": True},
            {"vehicle_type": "center_bus", "enabled": False},
            {"vehicle_type": "external_bus", "enabled": False}
        ]
    }
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 2: –°–∞–º–æ –≤—ä–Ω—à–Ω–∏ –±—É—Å–æ–≤–µ
    print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 2: –°–∞–º–æ –≤—ä–Ω—à–Ω–∏ –±—É—Å–æ–≤–µ")
    config2 = {
        "vehicles": [
            {"vehicle_type": "internal_bus", "enabled": False},
            {"vehicle_type": "center_bus", "enabled": False},
            {"vehicle_type": "external_bus", "enabled": True}
        ]
    }
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 3: –í—Å–∏—á–∫–∏ —Ç–∏–ø–æ–≤–µ
    print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 3: –í—Å–∏—á–∫–∏ —Ç–∏–ø–æ–≤–µ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
    config3 = {
        "vehicles": [
            {"vehicle_type": "internal_bus", "enabled": True},
            {"vehicle_type": "center_bus", "enabled": True},
            {"vehicle_type": "external_bus", "enabled": True}
        ]
    }
    
    configurations = [
        ("–°–∞–º–æ –≤—ä—Ç—Ä–µ—à–Ω–∏ –±—É—Å–æ–≤–µ", config1),
        ("–°–∞–º–æ –≤—ä–Ω—à–Ω–∏ –±—É—Å–æ–≤–µ", config2),
        ("–í—Å–∏—á–∫–∏ —Ç–∏–ø–æ–≤–µ", config3)
    ]
    
    sample_file = "data/sample_clients.xlsx"
    if not os.path.exists(sample_file):
        sample_file = create_sample_excel()
    
    for name, config in configurations:
        print(f"\nüìä –¢–µ—Å—Ç–≤–∞–Ω–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {name}")
        print("-" * 50)
        
        app = CVRPApplication()
        success = app.run_with_custom_config(config, sample_file)
        
        if success:
            print(f"‚úÖ {name} - —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå {name} - –Ω–µ—É—Å–ø–µ—à–Ω–æ")

def main():
    """–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞"""
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directories = ["data", "output", "output/excel", "output/charts", "logs", "cache"]
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
    
    print("üéØ –ò–∑–±–µ—Ä–µ—Ç–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è:")
    print("1. –û—Å–Ω–æ–≤–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("2. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è") 
    print("3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
    print("4. –í—Å–∏—á–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
    
    choice = input("\n–í—ä–≤–µ–¥–µ—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
    
    if choice == "1":
        run_demo()
    elif choice == "2":
        run_custom_demo()
    elif choice == "3":
        demo_vehicle_configurations()
    elif choice == "4":
        print("üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        run_demo()
        run_custom_demo()
        demo_vehicle_configurations()
    else:
        print("‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–∑–±–æ—Ä. –°—Ç–∞—Ä—Ç–∏—Ä–∞–º –æ—Å–Ω–æ–≤–Ω–∞—Ç–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è...")
        run_demo()

if __name__ == "__main__":
    main() 