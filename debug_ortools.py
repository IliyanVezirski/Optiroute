#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ–Ω —Å–∫—Ä–∏–ø—Ç –∑–∞ OR-Tools –ø—Ä–æ–±–ª–µ–º–∏
–¢–µ—Å—Ç–≤–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞ –¥–∞ –Ω–∞–º–µ—Ä–∏ —Ä–∞–±–æ—Ç–µ—â–æ —Ä–µ—à–µ–Ω–∏–µ
"""

import logging
from typing import List, Optional
from config import get_config
from input_handler import load_customers
from warehouse_manager import WarehouseManager
from cvrp_solver import CVRPSolver, ORToolsSolver, CVRPConfig
from osrm_client import OSRMClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –ª–æ–≥–∏—Ä–∞–Ω–µ—Ç–æ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_ortools_minimal():
    """–¢–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª–Ω–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
    print("ÔøΩÔøΩ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ê OR-Tools –ü–†–û–ë–õ–ï–ú–ò")
    print("="*50)
    
    # –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏
    config = get_config()
    customers = load_customers(config.data.input_file)
    
    # –†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–∫–ª–∞–¥ –∏ –∞–≤—Ç–æ–±—É—Å–∏
    warehouse_manager = WarehouseManager(config.warehouse)
    allocation = warehouse_manager.allocate_customers(customers)
    
    print(f"üìä –î–∞–Ω–Ω–∏:")
    print(f"   –û–±—â–æ –∫–ª–∏–µ–Ω—Ç–∏: {len(customers)}")
    print(f"   –ó–∞ –∞–≤—Ç–æ–±—É—Å–∏: {len(allocation.vehicle_customers)}")
    print(f"   –ó–∞ —Å–∫–ª–∞–¥: {len(allocation.warehouse_customers)}")
    
    # –¢–ï–°–¢ 1: –°–∞–º–æ capacity –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    print(f"\nüß™ –¢–ï–°–¢ 1: –°–∞–º–æ capacity –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
    test_config = CVRPConfig(
        time_limit_seconds=60,  # 1 –º–∏–Ω—É—Ç–∞
        first_solution_strategy="PATH_CHEAPEST_ARC",
        local_search_metaheuristic="AUTOMATIC",
        log_search=False
    )
    
    result1 = test_simplified_ortools(allocation, config.depot.location, test_config, only_capacity=True)
    
    # –¢–ï–°–¢ 2: –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º–µ –∑–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    print(f"\nüß™ –¢–ï–°–¢ 2: –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º–µ (10 –º–∏–Ω—É—Ç–∏)")
    test_config.time_limit_seconds = 600  # 10 –º–∏–Ω—É—Ç–∏
    result2 = test_simplified_ortools(allocation, config.depot.location, test_config, only_capacity=True)
    
    # –¢–ï–°–¢ 3: –†–∞–∑–ª–∏—á–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    print(f"\nüß™ –¢–ï–°–¢ 3: SAVINGS —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
    test_config.first_solution_strategy = "SAVINGS"
    test_config.local_search_metaheuristic = "GUIDED_LOCAL_SEARCH"
    result3 = test_simplified_ortools(allocation, config.depot.location, test_config, only_capacity=True)
    
    # –¢–ï–°–¢ 4: –ü–æ-–º–∞–ª–∫–æ –∫–ª–∏–µ–Ω—Ç–∏
    print(f"\nüß™ –¢–ï–°–¢ 4: –¢–µ—Å—Ç —Å –ø—ä—Ä–≤–∏—Ç–µ 50 –∫–ª–∏–µ–Ω—Ç–∞")
    small_allocation = type(allocation)(
        vehicle_customers=allocation.vehicle_customers[:50],
        warehouse_customers=allocation.warehouse_customers,
        total_capacity_used=sum(c.volume for c in allocation.vehicle_customers[:50])
    )
    test_config.time_limit_seconds = 300  # 5 –º–∏–Ω—É—Ç–∏
    result4 = test_simplified_ortools(small_allocation, config.depot.location, test_config, only_capacity=True)
    
    # –†–µ–∑—É–ª—Ç–∞—Ç–∏
    print(f"\nüìã –†–ï–ó–£–õ–¢–ê–¢–ò:")
    print(f"   –¢–µ—Å—Ç 1 (capacity only): {'‚úÖ –£–°–ü–ï–•' if result1 else '‚ùå –ù–ï–£–°–ü–ï–•'}")
    print(f"   –¢–µ—Å—Ç 2 (10 –º–∏–Ω—É—Ç–∏): {'‚úÖ –£–°–ü–ï–•' if result2 else '‚ùå –ù–ï–£–°–ü–ï–•'}")
    print(f"   –¢–µ—Å—Ç 3 (SAVINGS): {'‚úÖ –£–°–ü–ï–•' if result3 else '‚ùå –ù–ï–£–°–ü–ï–•'}")
    print(f"   –¢–µ—Å—Ç 4 (50 –∫–ª–∏–µ–Ω—Ç–∞): {'‚úÖ –£–°–ü–ï–•' if result4 else '‚ùå –ù–ï–£–°–ü–ï–•'}")

def test_simplified_ortools(allocation, depot_location, test_config: CVRPConfig, only_capacity=False):
    """–¢–µ—Å—Ç–≤–∞ OR-Tools —Å –æ–ø—Ä–æ—Å—Ç–µ–Ω–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
    try:
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ solver —Å —Ç–µ—Å—Ç–æ–≤–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        solver = CVRPSolver(test_config)
        
        # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ custom ORToolsSolver –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ
        customers = allocation.vehicle_customers
        osrm_client = OSRMClient()
        
        try:
            # –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞
            locations = [depot_location] + [c.coordinates for c in customers]
            distance_matrix = osrm_client.get_distance_matrix(locations)
            
            # –ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏—Ç–µ –ø—Ä–µ–≤–æ–∑–Ω–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
            from config import config_manager
            enabled_vehicles = config_manager.get_enabled_vehicles()
            
            # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ custom ORToolsSolver
            custom_solver = SimplifiedORToolsSolver(
                test_config, enabled_vehicles, customers, distance_matrix, only_capacity
            )
            
            solution = custom_solver.solve()
            
            if solution and solution.is_feasible and len(solution.routes) > 0:
                print(f"   ‚úÖ –ù–∞–º–µ—Ä–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ: {len(solution.routes)} –º–∞—Ä—à—Ä—É—Ç–∞")
                print(f"   üìè –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ: {solution.total_distance_km:.1f} –∫–º")
                return True
            else:
                print(f"   ‚ùå –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ")
                return False
                
        finally:
            osrm_client.close()
            
    except Exception as e:
        print(f"   ‚ùå –ì—Ä–µ—à–∫–∞: {e}")
        return False

class SimplifiedORToolsSolver(ORToolsSolver):
    """–û–ø—Ä–æ—Å—Ç–µ–Ω OR-Tools solver –∑–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"""
    
    def __init__(self, config, vehicle_configs, customers, distance_matrix, only_capacity=False):
        super().__init__(config, vehicle_configs, customers, distance_matrix)
        self.only_capacity = only_capacity
    
    def solve(self):
        """–û–ø—Ä–æ—Å—Ç–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ —Å–∞–º–æ —Å capacity –∏–ª–∏ –±–µ–∑ time constraints"""
        try:
            from ortools.constraint_solver import routing_enums_pb2
            from ortools.constraint_solver import pywrapcp
            
            # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∞
            manager = pywrapcp.RoutingIndexManager(
                len(self.distance_matrix.locations),
                self._get_total_vehicles(),
                self.depot
            )
            routing = pywrapcp.RoutingModel(manager)
            
            # Distance callback
            distance_callback_index = routing.RegisterTransitCallback(
                self._distance_callback_wrapper(manager)
            )
            routing.SetArcCostEvaluatorOfAllVehicles(distance_callback_index)
            
            # –î–æ–±–∞–≤—è–Ω–µ –°–ê–ú–û –Ω–∞ capacity –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            self._add_capacity_constraints(routing, manager)
            
            # –ë–ï–ó time constraints –∞–∫–æ –µ —Ç–µ—Å—Ç
            if not self.only_capacity:
                self._add_time_constraints(routing, manager, distance_callback_index)
            
            # –ü–æ-–∞–≥—Ä–µ—Å–∏–≤–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ
            search_parameters = pywrapcp.DefaultRoutingSearchParameters()
            search_parameters.first_solution_strategy = getattr(
                routing_enums_pb2.FirstSolutionStrategy, 
                self.config.first_solution_strategy
            )
            search_parameters.local_search_metaheuristic = getattr(
                routing_enums_pb2.LocalSearchMetaheuristic,
                self.config.local_search_metaheuristic
            )
            search_parameters.time_limit.seconds = self.config.time_limit_seconds
            search_parameters.log_search = self.config.log_search
            
            # –†–µ—à–∞–≤–∞–Ω–µ
            solution = routing.SolveWithParameters(search_parameters)
            
            if solution:
                return self._extract_solution(manager, routing, solution)
            else:
                return None
                
        except Exception as e:
            print(f"   –ì—Ä–µ—à–∫–∞ –≤ SimplifiedORToolsSolver: {e}")
            return None

if __name__ == "__main__":
    test_ortools_minimal() 