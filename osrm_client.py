"""
OSRM –∫–ª–∏–µ–Ω—Ç –∑–∞ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ –∑–∞ –ø—ä—Ç—É–≤–∞–Ω–µ
–ü–æ–¥–¥—ä—Ä–∂–∞ chunking –ø–æ 90 –∑–∞—è–≤–∫–∏ –∏ –∫–µ—à–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
"""

import requests
import json
import time
import hashlib
import os
from typing import List, Dict, Tuple, Optional, Union
from dataclasses import dataclass
import logging

from datetime import datetime, timedelta
from config import get_config, OSRMConfig
from input_handler import Customer
from tqdm import tqdm

logger = logging.getLogger(__name__)


@dataclass
class DistanceMatrix:
    """–ö–ª–∞—Å –∑–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∞"""
    distances: List[List[float]]  # –≤ –º–µ—Ç—Ä–∏
    durations: List[List[float]]  # –≤ —Å–µ–∫—É–Ω–¥–∏
    locations: List[Tuple[float, float]]  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
    sources: List[int]  # –∏–Ω–¥–µ–∫—Å–∏ –Ω–∞ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏—Ç–µ
    destinations: List[int]  # –∏–Ω–¥–µ–∫—Å–∏ –Ω–∞ –¥–µ—Å—Ç–∏–Ω–∞—Ü–∏–∏—Ç–µ


@dataclass
class RouteInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É –¥–≤–µ —Ç–æ—á–∫–∏"""
    distance_km: float
    duration_minutes: float
    source_index: int
    destination_index: int


class OSRMCache:
    """–ö–µ—à –∑–∞ OSRM –∑–∞—è–≤–∫–∏"""
    
    def __init__(self, cache_file: str, expiry_hours: int = 24):
        self.cache_file = cache_file
        self.expiry_hours = expiry_hours
        self.cache_data = self._load_cache()
    
    def _load_cache(self) -> Dict:
        """–ó–∞—Ä–µ–∂–¥–∞ –∫–µ—à–∞ –æ—Ç —Ñ–∞–π–ª"""
        if not os.path.exists(self.cache_file):
            return {}
        
        try:
            with open(self.cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
                
            # –ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∏–∑—Ç–µ–∫–ª–∏ –∑–∞–ø–∏—Å–∏
            current_time = datetime.now()
            valid_cache = {}
            
            for key, value in cache_data.items():
                if 'timestamp' in value:
                    cached_time = datetime.fromisoformat(value['timestamp'])
                    if current_time - cached_time < timedelta(hours=self.expiry_hours):
                        valid_cache[key] = value
            
            return valid_cache
            
        except Exception as e:
            logger.warning(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–µ—à: {e}")
            return {}
    
    def _save_cache(self) -> None:
        """–ó–∞–ø–∏—Å–≤–∞ –∫–µ—à–∞ –≤—ä–≤ —Ñ–∞–π–ª"""
        try:
            os.makedirs(os.path.dirname(self.cache_file), exist_ok=True)
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(self.cache_data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ –∫–µ—à: {e}")
    
    def _generate_key(self, locations: List[Tuple[float, float]], 
                     sources: Optional[List[int]] = None, 
                     destinations: Optional[List[int]] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ —É–Ω–∏–∫–∞–ª–µ–Ω –∫–ª—é—á –∑–∞ –∫–µ—à–∞"""
        data_str = json.dumps({
            'locations': locations,
            'sources': sources,
            'destinations': destinations
        }, sort_keys=True)
        
        return hashlib.md5(data_str.encode()).hexdigest()
    
    def get(self, locations: List[Tuple[float, float]], 
            sources: Optional[List[int]] = None, 
            destinations: Optional[List[int]] = None) -> Optional[DistanceMatrix]:
        """–¢—ä—Ä—Å–∏ –≤ –∫–µ—à–∞"""
        key = self._generate_key(locations, sources, destinations)
        
        if key in self.cache_data:
            try:
                cached_item = self.cache_data[key]
                return DistanceMatrix(
                    distances=cached_item['distances'],
                    durations=cached_item['durations'],
                    locations=cached_item['locations'],
                    sources=cached_item['sources'],
                    destinations=cached_item['destinations']
                )
            except Exception as e:
                logger.warning(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –æ—Ç –∫–µ—à: {e}")
                del self.cache_data[key]
        
        return None
    
    def set(self, matrix: DistanceMatrix, 
            sources: Optional[List[int]] = None, 
            destinations: Optional[List[int]] = None) -> None:
        """–ó–∞–ø–∏—Å–≤–∞ –≤ –∫–µ—à–∞"""
        key = self._generate_key(matrix.locations, sources, destinations)
        
        self.cache_data[key] = {
            'distances': matrix.distances,
            'durations': matrix.durations,
            'locations': matrix.locations,
            'sources': matrix.sources,
            'destinations': matrix.destinations,
            'timestamp': datetime.now().isoformat()
        }
        
        self._save_cache()

    def get_complete_central_matrix(self) -> Optional[DistanceMatrix]:
        """–ó–∞—Ä–µ–∂–¥–∞ —Ü—è–ª–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ –æ—Ç –∫–µ—à–∞ (–∞–∫–æ –∏–º–∞)"""
        if not self.cache_data:
            return None
            
        # –ù–∞–º–∏—Ä–∞–º–µ –Ω–∞–π-–≥–æ–ª—è–º–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞ –≤ –∫–µ—à–∞ (–Ω–∞–π-–º–Ω–æ–≥–æ –ª–æ–∫–∞—Ü–∏–∏)
        largest_matrix = None
        max_locations = 0
        
        for key, cached_item in self.cache_data.items():
            try:
                locations_count = len(cached_item.get('locations', []))
                if locations_count > max_locations:
                    max_locations = locations_count
                    largest_matrix = DistanceMatrix(
                        distances=cached_item['distances'],
                        durations=cached_item['durations'],
                        locations=cached_item['locations'],
                        sources=cached_item['sources'],
                        destinations=cached_item['destinations']
                    )
            except Exception as e:
                logger.warning(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –Ω–∞ –∫–µ—à–∏—Ä–∞–Ω –∑–∞–ø–∏—Å: {e}")
                continue
        
        if largest_matrix:
            logger.info(f"üíæ –ó–∞—Ä–µ–¥–µ–Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å {max_locations} –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –∫–µ—à–∞")
        
        return largest_matrix
    
    def extract_submatrix(self, central_matrix: DistanceMatrix, 
                         required_locations: List[Tuple[float, float]]) -> Optional[DistanceMatrix]:
        """–ò–∑–≤–ª–∏—á–∞ –ø–æ–¥–º–∞—Ç—Ä–∏—Ü–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞ –¥–∞–¥–µ–Ω–∏—Ç–µ –ª–æ–∫–∞—Ü–∏–∏"""
        if not central_matrix or not required_locations:
            return None
            
        # –ù–∞–º–∏—Ä–∞–º–µ –∏–Ω–¥–µ–∫—Å–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω–∏—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞
        location_indices = []
        tolerance = 0.00001  # —Ç–æ–ª–µ—Ä–∞–Ω—Å –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
        
        for req_loc in required_locations:
            found_index = None
            for i, central_loc in enumerate(central_matrix.locations):
                if (abs(central_loc[0] - req_loc[0]) < tolerance and 
                    abs(central_loc[1] - req_loc[1]) < tolerance):
                    found_index = i
                    break
            
            if found_index is None:
                logger.warning(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ {req_loc} –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞")
                return None
            
            location_indices.append(found_index)
        
        # –°—ä–∑–¥–∞–≤–∞–º–µ –ø–æ–¥–º–∞—Ç—Ä–∏—Ü–∞—Ç–∞
        n = len(location_indices)
        sub_distances = [[0.0 for _ in range(n)] for _ in range(n)]
        sub_durations = [[0.0 for _ in range(n)] for _ in range(n)]
        
        for i in range(n):
            for j in range(n):
                central_i = location_indices[i]
                central_j = location_indices[j]
                sub_distances[i][j] = central_matrix.distances[central_i][central_j]
                sub_durations[i][j] = central_matrix.durations[central_i][central_j]
        
        logger.info(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–∞ –ø–æ–¥–º–∞—Ç—Ä–∏—Ü–∞ {n}x{n} –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞")
        
        return DistanceMatrix(
            distances=sub_distances,
            durations=sub_durations,
            locations=required_locations,
            sources=list(range(n)),
            destinations=list(range(n))
        )


class OSRMClient:
    """–ö–ª–∏–µ–Ω—Ç –∑–∞ OSRM API"""
    
    def __init__(self, config: Optional[OSRMConfig] = None):
        self.config = config or get_config().osrm
        self.cache = OSRMCache(
            cache_file=os.path.join(get_config().cache.cache_dir, get_config().cache.osrm_cache_file),
            expiry_hours=self.config.cache_expiry_hours
        ) if self.config.use_cache else None
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω HTTP session –∑–∞ –ø–æ-–±—ä—Ä–∑–∏ –∑–∞—è–≤–∫–∏
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'CVRP-Optimizer/1.0',
            'Connection': 'keep-alive'
        })
        
        # HTTP connection pooling –∑–∞ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
        from requests.adapters import HTTPAdapter
        from urllib3.util.retry import Retry
        
        # Retry —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        retry_strategy = Retry(
            total=1,  # –ú–∞–∫—Å–∏–º—É–º 1 retry –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç
            status_forcelist=[429, 500, 502, 503, 504],
            backoff_factor=0.01  # –ö—Ä–∞—Ç–∫–∞ –ø–∞—É–∑–∞
        )
        
        # HTTP adapter —Å connection pooling
        adapter = HTTPAdapter(
            pool_connections=20,  # –î–æ 20 connection pool-–∞
            pool_maxsize=20,      # –î–æ 20 connections per pool
            max_retries=retry_strategy
        )
        
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)
    
    def get_distance_matrix(self, locations: List[Tuple[float, float]]) -> DistanceMatrix:
        """–ü–æ–ª—É—á–∞–≤–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –∏–∑–ø–æ–ª–∑–≤–∞–π–∫–∏ –∏–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–µ–Ω batch –ø–æ–¥—Ö–æ–¥"""
        n_locations = len(locations)
        logger.info(f"üöó –°—Ç–∞—Ä—Ç–∏—Ä–∞–º matrix –∑–∞—è–≤–∫–∞ –∑–∞ {n_locations} –ª–æ–∫–∞—Ü–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∫–µ—à–∞ –ø—ä—Ä–≤–æ
        if self.cache:
            cached_matrix = self.cache.get(locations)
            if cached_matrix:
                logger.info(f"üíæ –ù–∞–º–µ—Ä–∏—Ö –∫–µ—à–∏—Ä–∞–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ {n_locations} –ª–æ–∫–∞—Ü–∏–∏")
                return cached_matrix
        
        # –ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–µ–Ω –ø–æ–¥—Ö–æ–¥:
        # 1. –ó–∞ –º–∞–ª–∫–∏ datasets (‚â§30) - –¥–∏—Ä–µ–∫—Ç–Ω–æ Table API
        # 2. –ó–∞ —Å—Ä–µ–¥–Ω–∏ datasets (31-500) - batch Table API chunks  
        # 3. –ó–∞ –≥–æ–ª–µ–º–∏ datasets (>500) - –ø–∞—Ä–∞–ª–µ–ª–Ω–∏ Route API –∑–∞—è–≤–∫–∏
        
        if n_locations <= 30:
            logger.info(f"üîÑ –ú–∞–ª—ä–∫ dataset: –∏–∑–ø–æ–ª–∑–≤–∞–º –¥–∏—Ä–µ–∫—Ç–Ω–æ Table API –∑–∞ {n_locations} –ª–æ–∫–∞—Ü–∏–∏")
            try:
                return self._try_table_api_direct(locations)
            except Exception as e:
                logger.warning(f"Table API –Ω–µ—É—Å–ø–µ—à–µ–Ω: {e}")
                logger.info(f"üõ£Ô∏è Fallback –∫—ä–º Route API –∑–∞ {n_locations} –ª–æ–∫–∞—Ü–∏–∏")
                return self._build_matrix_via_routes_only(locations)
        
        elif n_locations <= 500:
            logger.info(f"üß© –°—Ä–µ–¥–µ–Ω dataset: –∏–∑–ø–æ–ª–∑–≤–∞–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω batch Table API –∑–∞ {n_locations} –ª–æ–∫–∞—Ü–∏–∏")
            try:
                # –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–∏—è batch Table API —Å 80 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
                return self._build_optimized_table_batches(locations)
            except Exception as e:
                logger.warning(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω batch Table API –Ω–µ—É—Å–ø–µ—à–µ–Ω: {e}")
                logger.info(f"üõ£Ô∏è Fallback –∫—ä–º –ø–∞—Ä–∞–ª–µ–ª–Ω–∏ Route API –∑–∞—è–≤–∫–∏ –∑–∞ {n_locations} –ª–æ–∫–∞—Ü–∏–∏")
                return self._build_matrix_via_routes_only(locations)
        
        else:
            logger.info(f"üöÄ –ì–æ–ª—è–º dataset: –∏–∑–ø–æ–ª–∑–≤–∞–º –ø–∞—Ä–∞–ª–µ–ª–Ω–∏ Route API –∑–∞—è–≤–∫–∏ –∑–∞ {n_locations} –ª–æ–∫–∞—Ü–∏–∏")
            return self._build_matrix_via_routes_only(locations)
    
    def _try_table_api_with_fallback(self, locations: List[Tuple[float, float]]) -> DistanceMatrix:
        """–û–ø–∏—Ç–≤–∞ Table API –ø—ä—Ä–≤–æ —Å –ª–æ–∫–∞–ª–µ–Ω, –ø–æ—Å–ª–µ —Å –ø—É–±–ª–∏—á–µ–Ω —Å—ä—Ä–≤—ä—Ä"""
        try:
            # –ü—ä—Ä–≤–æ –æ–ø–∏—Ç–≤–∞–º–µ –ª–æ–∫–∞–ª–Ω–∏—è —Å—ä—Ä–≤—ä—Ä
            return self._try_table_api_to_server(locations, self.config.base_url)
        except Exception as e:
            logger.warning(f"–õ–æ–∫–∞–ª–µ–Ω OSRM –Ω–µ—É—Å–ø–µ—à–µ–Ω: {e}")
            
            # Fallback –∫—ä–º –ø—É–±–ª–∏—á–Ω–∏—è —Å—ä—Ä–≤—ä—Ä
            if self.config.fallback_to_public:
                logger.info(f"üåê Fallback –∫—ä–º –ø—É–±–ª–∏—á–µ–Ω OSRM –∑–∞ {len(locations)} –ª–æ–∫–∞—Ü–∏–∏")
                try:
                    return self._try_table_api_to_server(locations, self.config.public_osrm_url)
                except Exception as e2:
                    logger.warning(f"–ü—É–±–ª–∏—á–µ–Ω OSRM —Å—ä—â–æ –Ω–µ—É—Å–ø–µ—à–µ–Ω: {e2}")
                    raise e2
            else:
                raise e
    
    def _try_table_api_to_server(self, locations: List[Tuple[float, float]], server_url: str) -> DistanceMatrix:
        """–û–ø–∏—Ç–≤–∞ Table API –∫—ä–º –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω —Å—ä—Ä–≤—ä—Ä"""
        try:
            # –û–ø–∏—Ç–≤–∞–º–µ GET –ø—ä—Ä–≤–æ –∑–∞ –º–∞–ª–∫–∏ datasets - —É–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç –∑–∞ 80 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
            test_url = self._build_matrix_url(locations, server_url)
            if len(test_url) <= 4000:  # –ù–∞–º–∞–ª–µ–Ω –ª–∏–º–∏—Ç –∑–∞ batch-–æ–≤–µ –æ—Ç 30 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
                response = self.session.get(test_url, timeout=10)
            else:
                # POST –∑–∞ –ø–æ-–¥—ä–ª–≥–∏ URL-–∏
                response = self._make_post_request(locations, server_url)
            
            response.raise_for_status()
            data = response.json()
            
            if data['code'] != 'Ok':
                raise Exception(f"OSRM –≥—Ä–µ—à–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –≥—Ä–µ—à–∫–∞')}")
            
            server_type = "–ª–æ–∫–∞–ª–µ–Ω" if "localhost" in server_url else "–ø—É–±–ª–∏—á–µ–Ω"
            logger.info(f"‚úÖ –£—Å–ø–µ—à–µ–Ω Table API –∫—ä–º {server_type} —Å—ä—Ä–≤—ä—Ä –∑–∞ {len(locations)} –ª–æ–∫–∞—Ü–∏–∏")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
            distances = data.get('distances', [])
            durations = data.get('durations', [])
            
            if not distances and durations:
                # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –æ—Ç –≤—Ä–µ–º–µ—Ç–æ
                distances = []
                for i, row in enumerate(durations):
                    dist_row = []
                    for j, duration in enumerate(row):
                        approx_distance = (duration / 3600) * (self.config.average_speed_kmh * 1000)
                        dist_row.append(approx_distance)
                    distances.append(dist_row)
                logger.info("–ò–∑—á–∏—Å–ª–µ–Ω–∏ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –æ—Ç –≤—Ä–µ–º–µ—Ç–æ")
            
            matrix = DistanceMatrix(
                distances=distances,
                durations=durations,
                locations=locations,
                sources=list(range(len(locations))),
                destinations=list(range(len(locations)))
            )
            
            # –ó–∞–ø–∏—Å–≤–∞–º–µ –≤ –∫–µ—à–∞
            if self.cache:
                self.cache.set(matrix)
            
            return matrix
            
        except Exception as e:
            server_type = "–ª–æ–∫–∞–ª–µ–Ω" if "localhost" in server_url else "–ø—É–±–ª–∏—á–µ–Ω"
            logger.warning(f"Table API –∫—ä–º {server_type} —Å—ä—Ä–≤—ä—Ä –Ω–µ—É—Å–ø–µ—à–µ–Ω: {e}")
            raise e
    
    def _try_table_api_direct(self, locations: List[Tuple[float, float]]) -> DistanceMatrix:
        """–û–ø–∏—Ç–≤–∞ –¥–∏—Ä–µ–∫—Ç–Ω–æ Table API –∑–∞ –º–∞–ª–∫–∏ datasets (wrapper –∑–∞ —Å—ä–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç)"""
        return self._try_table_api_to_server(locations, self.config.base_url)
    
    def _build_matrix_via_table_batches(self, locations: List[Tuple[float, float]]) -> DistanceMatrix:
        """–ò–∑–≥—Ä–∞–∂–¥–∞ –º–∞—Ç—Ä–∏—Ü–∞ –∏–∑–ø–æ–ª–∑–≤–∞–π–∫–∏ Table API batches —Å –ø—Ä–∞–≤–∏–ª–Ω–∞ –ª–æ–≥–∏–∫–∞"""
        n = len(locations)
        
        # –ü—Ä–æ–º–µ–Ω—è–º–µ –ª–æ–≥–∏–∫–∞—Ç–∞ - –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –ø—Ä—è–∫–æ –º–∞–ª–∫–∏ batch-–æ–≤–µ, –Ω–µ –æ–ø–∏—Ç–≤–∞–º–µ –ø—ä–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞
        logger.info(f"üß© –ó–∞–ø–æ—á–≤–∞–º batch Table API: {n} –ª–æ–∫–∞—Ü–∏–∏ —Å –º–∞–ª–∫–∏ batch-–æ–≤–µ")
        
        # –î–∏—Ä–µ–∫—Ç–Ω–æ –∫—ä–º –º–∞–ª–∫–∏—Ç–µ batch-–æ–≤–µ –±–µ–∑ –¥–∞ –æ–ø–∏—Ç–≤–∞–º–µ –ø—ä–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞
        return self._build_matrix_via_small_batches(locations)
    
    def _build_matrix_via_small_batches(self, locations: List[Tuple[float, float]]) -> DistanceMatrix:
        """Fallback –º–µ—Ç–æ–¥ –∑–∞ –º–∞–ª–∫–∏ batch –∑–∞—è–≤–∫–∏ –∫–æ–≥–∞—Ç–æ –ø—ä–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞ –Ω–µ —Ä–∞–±–æ—Ç–∏"""
        n = len(locations)
        batch_size = 30  # –ù–∞–º–∞–ª–µ–Ω —Ä–∞–∑–º–µ—Ä –¥–æ 30 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–∞ —Å—Ç–∞–±–∏–ª–Ω–æ—Å—Ç
        
        logger.info(f"üîß –ó–∞–ø–æ—á–≤–∞–º –º–∞–ª–∫–∏ batch –∑–∞—è–≤–∫–∏: {n} –ª–æ–∫–∞—Ü–∏–∏ —Å batches –æ—Ç {batch_size}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–Ω–∏ –º–∞—Ç—Ä–∏—Ü–∏  
        full_distances = [[0.0 for _ in range(n)] for _ in range(n)]
        full_durations = [[0.0 for _ in range(n)] for _ in range(n)]
        
        successful_batches = 0
        failed_batches = 0
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –±—Ä–æ–π batches
        num_batches = (n + batch_size - 1) // batch_size
        total_batch_requests = num_batches * num_batches
        
        logger.info(f"üìä –©–µ –Ω–∞–ø—Ä–∞–≤—è {total_batch_requests} –º–∞–ª–∫–∏ Table API batch –∑–∞—è–≤–∫–∏")
        
        # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä –∑–∞ batch –∑–∞—è–≤–∫–∏—Ç–µ
        with tqdm(total=total_batch_requests, desc="üîß –ú–∞–ª–∫–∏ Table API batches", unit="batch") as pbar:
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ batches –∫–∞—Ç–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏ —Å—É–±–º–∞—Ç—Ä–∏—Ü–∏
            for i in range(0, n, batch_size):
                end_i = min(i + batch_size, n)
                sources_batch = locations[i:end_i]
                
                for j in range(0, n, batch_size):
                    end_j = min(j + batch_size, n)
                    destinations_batch = locations[j:end_j]
                    
                    try:
                        # –ù–û–íA –õ–û–ì–ò–ö–ê: –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ –ø–æ-–º–∞–ª–∫–∏ batch-–æ–≤–µ –±–µ–∑ –∫–æ–º–±–∏–Ω–∏—Ä–∞–Ω–µ
                        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ source –∏ destination batch-–æ–≤–µ—Ç–µ —Å–µ –∑–∞—Å—Ç—ä–ø–≤–∞—Ç
                        if i == j:
                            # –°—ä—â–∏—è –±–ª–æ–∫ - –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ –ª–æ–∫–∞—Ü–∏–∏—Ç–µ
                            batch_locations = sources_batch
                        else:
                            # –†–∞–∑–ª–∏—á–Ω–∏ –±–ª–æ–∫–æ–≤–µ - –∫–æ–º–±–∏–Ω–∏—Ä–∞–º–µ –≤–Ω–∏–º–∞—Ç–µ–ª–Ω–æ
                            all_batch_locations = []
                            location_map = {}
                            
                            # –î–æ–±–∞–≤—è–º–µ source –ª–æ–∫–∞—Ü–∏–∏
                            for loc in sources_batch:
                                if loc not in location_map:
                                    location_map[loc] = len(all_batch_locations)
                                    all_batch_locations.append(loc)
                            
                            # –î–æ–±–∞–≤—è–º–µ destination –ª–æ–∫–∞—Ü–∏–∏ —Å–∞–º–æ –∞–∫–æ –Ω–µ –Ω–∞–¥–≤–∏—à–∞–≤–∞—Ç –ª–∏–º–∏—Ç–∞
                            for loc in destinations_batch:
                                if loc not in location_map and len(all_batch_locations) < 30:  # –ù–∞–º–∞–ª–µ–Ω –ª–∏–º–∏—Ç –¥–æ 30
                                    location_map[loc] = len(all_batch_locations)
                                    all_batch_locations.append(loc)
                            
                            batch_locations = all_batch_locations
                        
                        # –§–∏–Ω–∞–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Ä–∞–∑–º–µ—Ä
                        if len(batch_locations) > 30:  # –ù–∞–º–∞–ª–µ–Ω –ª–∏–º–∏—Ç –¥–æ 30 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
                            logger.debug(f"–ü—Ä–µ—Å–∫–∞—á–∞–º batch {i}-{end_i}, {j}-{end_j}: {len(batch_locations)} –ª–æ–∫–∞—Ü–∏–∏")
                            # –ò–∑–ø–æ–ª–∑–≤–∞–º–µ Route API –¥–∏—Ä–µ–∫—Ç–Ω–æ –∑–∞ —Ç–æ–∑–∏ batch
                            self._fill_batch_with_routes(sources_batch, destinations_batch, 
                                                       full_distances, full_durations, i, j)
                            failed_batches += 1
                        else:
                            # Table API –∑–∞—è–≤–∫–∞ –∑–∞ —Ç–æ–∑–∏ batch
                            batch_matrix = self._try_table_api_with_fallback(batch_locations)
                            
                            # –ö–æ–ø–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –≤ –ø—ä–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞
                            if i == j:
                                # –°—ä—â–∏—è –±–ª–æ–∫ - –¥–∏—Ä–µ–∫—Ç–Ω–æ –∫–æ–ø–∏—Ä–∞–Ω–µ
                                for src_idx in range(len(sources_batch)):
                                    for dest_idx in range(len(sources_batch)):
                                        global_src = i + src_idx
                                        global_dest = j + dest_idx
                                        full_distances[global_src][global_dest] = batch_matrix.distances[src_idx][dest_idx]
                                        full_durations[global_src][global_dest] = batch_matrix.durations[src_idx][dest_idx]
                            else:
                                # –†–∞–∑–ª–∏—á–Ω–∏ –±–ª–æ–∫–æ–≤–µ - map–≤–∞–Ω–µ
                                for src_idx, src_loc in enumerate(sources_batch):
                                    for dest_idx, dest_loc in enumerate(destinations_batch):
                                        global_src = i + src_idx
                                        global_dest = j + dest_idx
                                        
                                        if src_loc in location_map and dest_loc in location_map:
                                            batch_src_idx = location_map[src_loc]
                                            batch_dest_idx = location_map[dest_loc]
                                            full_distances[global_src][global_dest] = batch_matrix.distances[batch_src_idx][batch_dest_idx]
                                            full_durations[global_src][global_dest] = batch_matrix.durations[batch_src_idx][batch_dest_idx]
                                        else:
                                            # Fallback –∫—ä–º Route API –∑–∞ —Ç–∞–∑–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –¥–≤–æ–π–∫–∞
                                            try:
                                                route_matrix = self._single_route_request(src_loc, dest_loc)
                                                full_distances[global_src][global_dest] = route_matrix['distance']
                                                full_durations[global_src][global_dest] = route_matrix['duration']
                                            except:
                                                approx_distance = self._haversine_distance(src_loc, dest_loc) * 1.3
                                                full_distances[global_src][global_dest] = approx_distance
                                                full_durations[global_src][global_dest] = (approx_distance / 1000) / self.config.average_speed_kmh * 3600
                            
                            successful_batches += 1
                        
                        # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä–∞
                        pbar.update(1)
                        pbar.set_postfix({
                            '—É—Å–ø–µ—à–Ω–∏': successful_batches,
                            '–Ω–µ—É—Å–ø–µ—à–Ω–∏': failed_batches,
                            '—Ä–∞–∑–º–µ—Ä': f'{len(batch_locations)} loc'
                        })
                        
                        # –ü–æ-–º–∞–ª–∫–∞ –ø–∞—É–∑–∞ –∑–∞ –ø–æ-–±—ä—Ä–∑–æ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ —Å –ø–æ-–≥–æ–ª–µ–º–∏ batch-–æ–≤–µ
                        time.sleep(0.01)
                        
                    except Exception as e:
                        logger.warning(f"Table batch {i}-{end_i}, {j}-{end_j} –Ω–µ—É—Å–ø–µ—à–µ–Ω: {e}")
                        failed_batches += 1
                        
                        # Fallback –∫—ä–º Route API –∑–∞ —Ç–æ–∑–∏ batch
                        logger.debug(f"üõ£Ô∏è Fallback –∫—ä–º Route API –∑–∞ batch {i}-{end_i}, {j}-{end_j}")
                        self._fill_batch_with_routes(sources_batch, destinations_batch, 
                                                   full_distances, full_durations, i, j)
                        
                        pbar.update(1)
                        pbar.set_postfix({
                            '—É—Å–ø–µ—à–Ω–∏': successful_batches,
                            '–Ω–µ—É—Å–ø–µ—à–Ω–∏': failed_batches,
                            '—Ä–µ–∂–∏–º': 'Route fallback'
                        })
        
        # –§–∏–Ω–∞–ª–µ–Ω –æ—Ç—á–µ—Ç
        success_rate = (successful_batches / total_batch_requests) * 100 if total_batch_requests > 0 else 0
        logger.info(f"‚úÖ –ú–∞–ª–∫–∏ batch Table API –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–∞:")
        logger.info(f"   üéØ –£—Å–ø–µ—à–Ω–∏ batches: {successful_batches}/{total_batch_requests} ({success_rate:.1f}%)")
        logger.info(f"   ‚ùå –ù–µ—É—Å–ø–µ—à–Ω–∏ batches: {failed_batches}")
        logger.info(f"   üìä –ü—Ä–µ–¥–∏–º–Ω–æ —Ä–µ–∞–ª–Ω–∏ OSRM –¥–∞–Ω–Ω–∏ –æ—Ç Table API")
        
        matrix = DistanceMatrix(
            distances=full_distances,
            durations=full_durations,
            locations=locations,
            sources=list(range(len(locations))),
            destinations=list(range(len(locations)))
        )
        
        # –ó–∞–ø–∏—Å–≤–∞–º–µ –≤ –∫–µ—à–∞
        if self.cache:
            self.cache.set(matrix)
            logger.info(f"üíæ –ó–∞–ø–∏—Å–∞—Ö –º–∞–ª–∫–∏ batch Table API –º–∞—Ç—Ä–∏—Ü–∞ –≤ –∫–µ—à–∞ –∑–∞ {len(locations)} –ª–æ–∫–∞—Ü–∏–∏")
        
        return matrix
    
    def _fill_batch_with_routes(self, sources_batch, destinations_batch, 
                               full_distances, full_durations, i, j):
        """–ü–æ–º–æ—â–µ–Ω –º–µ—Ç–æ–¥ –∑–∞ –ø–æ–ø—ä–ª–≤–∞–Ω–µ –Ω–∞ batch —Å Route API –∑–∞—è–≤–∫–∏"""
        for src_idx, src_loc in enumerate(sources_batch):
            for dest_idx, dest_loc in enumerate(destinations_batch):
                global_src = i + src_idx
                global_dest = j + dest_idx
                
                if global_src == global_dest:
                    full_distances[global_src][global_dest] = 0.0
                    full_durations[global_src][global_dest] = 0.0
                else:
                    try:
                        route_matrix = self._single_route_request(src_loc, dest_loc)
                        full_distances[global_src][global_dest] = route_matrix['distance']
                        full_durations[global_src][global_dest] = route_matrix['duration']
                    except:
                        approx_distance = self._haversine_distance(src_loc, dest_loc) * 1.3
                        full_distances[global_src][global_dest] = approx_distance
                        full_durations[global_src][global_dest] = (approx_distance / 1000) / self.config.average_speed_kmh * 3600
    
    def _get_matrix_via_routes(self, locations: List[Tuple[float, float]], base_url: str) -> DistanceMatrix:
        """–ò–∑–ø–æ–ª–∑–≤–∞ Route API –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ distance matrix (–∑–∞ –ª–æ–∫–∞–ª–Ω–∏ —Å—ä—Ä–≤—ä—Ä–∏)"""
        n = len(locations)
        
        # –ó–∞ –≥–æ–ª–µ–º–∏ –º–∞—Ç—Ä–∏—Ü–∏ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
        if n > 100:  # –ú–∞–∫—Å–∏–º—É–º 100 –ª–æ–∫–∞—Ü–∏–∏ –∑–∞ Route API
            logger.warning(f"üöÄ {n} –ª–æ–∫–∞—Ü–∏–∏ –µ —Ç–≤—ä—Ä–¥–µ –º–Ω–æ–≥–æ –∑–∞ Route API -> –∏–∑–ø–æ–ª–∑–≤–∞–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏")
            return self._create_approximate_matrix(locations)
        
        distances = [[0.0 for _ in range(n)] for _ in range(n)]
        durations = [[0.0 for _ in range(n)] for _ in range(n)]
        
        logger.info(f"–ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ matrix —á—Ä–µ–∑ Route API –∑–∞ {n} –ª–æ–∫–∞—Ü–∏–∏ ({n*n} –∑–∞—è–≤–∫–∏)")
        
        # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä –∑–∞ route –∑–∞—è–≤–∫–∏—Ç–µ
        total_requests = n * (n - 1)  # –±–µ–∑ –¥–∏–∞–≥–æ–Ω–∞–ª–∞
        with tqdm(total=total_requests, desc="üõ£Ô∏è Route –∑–∞—è–≤–∫–∏", unit="req") as pbar:
            
            # –ó–∞ –≤—Å—è–∫–∞ –¥–≤–æ–π–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø—Ä–∞–≤–∏–º route –∑–∞—è–≤–∫–∞
            for i in range(n):
                for j in range(n):
                    if i == j:
                        distances[i][j] = 0.0
                        durations[i][j] = 0.0
                        continue
                    
                    try:
                        # Route –∑–∞—è–≤–∫–∞
                        lat1, lon1 = locations[i]
                        lat2, lon2 = locations[j]
                        clean_base_url = base_url.rstrip('/')
                        route_url = f"{clean_base_url}/route/v1/driving/{lon1:.6f},{lat1:.6f};{lon2:.6f},{lat2:.6f}?overview=false&steps=false"
                        
                        response = self.session.get(route_url, timeout=10)  # –ø–æ-–∫—Ä–∞—Ç—ä–∫ timeout
                        response.raise_for_status()
                        
                        data = response.json()
                        if data['code'] == 'Ok' and data['routes']:
                            route = data['routes'][0]
                            distances[i][j] = route['distance']  # –≤ –º–µ—Ç—Ä–∏
                            durations[i][j] = route['duration']   # –≤ —Å–µ–∫—É–Ω–¥–∏
                        else:
                            # Fallback –∫—ä–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
                            approx_distance = self._haversine_distance(locations[i], locations[j]) * 1.3
                            distances[i][j] = approx_distance
                            durations[i][j] = (approx_distance / 1000) / self.config.average_speed_kmh * 3600
                            
                    except Exception as e:
                        logger.warning(f"Route –∑–∞—è–≤–∫–∞ {i}->{j} –Ω–µ—É—Å–ø–µ—à–Ω–∞: {e}")
                        # Fallback –∫—ä–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
                        approx_distance = self._haversine_distance(locations[i], locations[j]) * 1.3
                        distances[i][j] = approx_distance
                        durations[i][j] = (approx_distance / 1000) / self.config.average_speed_kmh * 3600
                    
                    # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä–∞
                    pbar.update(1)
                    
                    # –ú–Ω–æ–≥–æ –º–∞–ª–∫–∞ –ø–∞—É–∑–∞
                    time.sleep(0.005)
        
        logger.info(f"‚úÖ Matrix –∏–∑—á–∏—Å–ª–µ–Ω–∞ —á—Ä–µ–∑ Route API")
        
        matrix = DistanceMatrix(
            distances=distances,
            durations=durations,
            locations=locations,
            sources=list(range(len(locations))),
            destinations=list(range(len(locations)))
        )
        
        # –ó–∞–ø–∏—Å–≤–∞–º–µ –≤ –∫–µ—à–∞
        if self.cache:
            self.cache.set(matrix)
            logger.debug(f"üíæ –ó–∞–ø–∏—Å–∞—Ö Route API –¥–∞–Ω–Ω–∏ –≤ –∫–µ—à–∞ –∑–∞ {len(locations)} –ª–æ–∫–∞—Ü–∏–∏")
        
        return matrix

    def _single_route_request(self, src_loc: Tuple[float, float], dest_loc: Tuple[float, float]) -> dict:
        """–ü—Ä–∞–≤–∏ –µ–¥–Ω–∞ Route API –∑–∞—è–≤–∫–∞ –∑–∞ fallback"""
        lat1, lon1 = src_loc
        lat2, lon2 = dest_loc
        
        clean_base_url = self.config.base_url.rstrip('/')
        route_url = f"{clean_base_url}/route/v1/driving/{lon1:.6f},{lat1:.6f};{lon2:.6f},{lat2:.6f}?overview=false&steps=false"
        
        response = self.session.get(route_url, timeout=5)
        response.raise_for_status()
        
        data = response.json()
        if data['code'] == 'Ok' and data['routes']:
            route = data['routes'][0]
            return {
                'distance': route['distance'],
                'duration': route['duration']
            }
        else:
            raise Exception(f"Route API –≥—Ä–µ—à–∫–∞: {data.get('code', 'Unknown')}")
    
    def _build_matrix_via_routes_only(self, locations: List[Tuple[float, float]]) -> DistanceMatrix:
        """–ò–∑–≥—Ä–∞–∂–¥–∞ –ø—ä–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ –∏–∑–ø–æ–ª–∑–≤–∞–π–∫–∏ –°–ê–ú–û Route API –∑–∞—è–≤–∫–∏"""
        n = len(locations)
        distances = [[0.0 for _ in range(n)] for _ in range(n)]
        durations = [[0.0 for _ in range(n)] for _ in range(n)]
        
        total_requests = n * (n - 1)
        logger.info(f"üöÄ –ó–∞–ø–æ—á–≤–∞–º –∏–∑–≥—Ä–∞–∂–¥–∞–Ω–µ –Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞: {n}√ó{n} = {total_requests} Route API –∑–∞—è–≤–∫–∏")
        
        with tqdm(total=total_requests, desc="üõ£Ô∏è Route –∑–∞—è–≤–∫–∏", unit="req") as pbar:
            for i in range(n):
                for j in range(n):
                    if i == j:
                        distances[i][j] = 0.0
                        durations[i][j] = 0.0
                        continue
                    
                    try:
                        route_matrix = self._single_route_request(locations[i], locations[j])
                        distances[i][j] = route_matrix['distance']
                        durations[i][j] = route_matrix['duration']
                    except:
                        approx_distance = self._haversine_distance(locations[i], locations[j]) * 1.3
                        distances[i][j] = approx_distance
                        durations[i][j] = (approx_distance / 1000) / self.config.average_speed_kmh * 3600
                    
                    pbar.update(1)
        
        matrix = DistanceMatrix(
            distances=distances,
            durations=durations,
            locations=locations,
            sources=list(range(len(locations))),
            destinations=list(range(len(locations)))
        )
        
        if self.cache:
            self.cache.set(matrix)
        
        return matrix
    
    def _create_approximate_matrix(self, locations: List[Tuple[float, float]]) -> DistanceMatrix:
        """–°—ä–∑–¥–∞–≤–∞ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –∫–æ–≥–∞—Ç–æ OSRM –Ω–µ —Ä–∞–±–æ—Ç–∏"""
        n = len(locations)
        distances = [[0.0 for _ in range(n)] for _ in range(n)]
        durations = [[0.0 for _ in range(n)] for _ in range(n)]
        
        for i in range(n):
            for j in range(n):
                if i == j:
                    distances[i][j] = 0.0
                    durations[i][j] = 0.0
                else:
                    approx_distance = self._haversine_distance(locations[i], locations[j]) * 1.3
                    distances[i][j] = approx_distance
                    durations[i][j] = (approx_distance / 1000) / self.config.average_speed_kmh * 3600
        
        return DistanceMatrix(
            distances=distances,
            durations=durations,
            locations=locations,
            sources=list(range(len(locations))),
            destinations=list(range(len(locations)))
        )
    
    def _haversine_distance(self, coord1: Tuple[float, float], coord2: Tuple[float, float]) -> float:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–∞ –ª–∏–Ω–∏—è –≤ –º–µ—Ç—Ä–∏"""
        import math
        
        lat1, lon1 = math.radians(coord1[0]), math.radians(coord1[1])
        lat2, lon2 = math.radians(coord2[0]), math.radians(coord2[1])
        
        dlat = lat2 - lat1
        dlon = lon2 - lon1
        
        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
        c = 2 * math.asin(math.sqrt(a))
        
        return 6371000 * c
    
    def _build_matrix_url(self, locations: List[Tuple[float, float]], base_url: Optional[str] = None) -> str:
        """–ü–æ—Å—Ç—Ä–æ—è–≤–∞ URL –∑–∞ OSRM matrix –∑–∞—è–≤–∫–∞"""
        if base_url is None:
            base_url = self.config.base_url
        
        base_url = base_url.rstrip('/')
        coords_str = ';'.join([f"{lon:.6f},{lat:.6f}" for lat, lon in locations])
        return f"{base_url}/table/v1/{self.config.profile}/{coords_str}"
    
    def _make_post_request(self, locations: List[Tuple[float, float]], base_url: str) -> requests.Response:
        """–ü—Ä–∞–≤–∏ POST –∑–∞—è–≤–∫–∞ –∑–∞ –≥–æ–ª–µ–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∏ —Å–ø–∏—Å—ä—Ü–∏"""
        clean_base_url = base_url.rstrip('/')
        url = f"{clean_base_url}/table/v1/{self.config.profile}"
        
        coordinates = [[lon, lat] for lat, lon in locations]
        post_data = {"coordinates": coordinates}
        
        response = self.session.post(
            url, 
            json=post_data,
            timeout=self.config.timeout_seconds,
            headers={'Content-Type': 'application/json'}
        )
        
        return response
    
    def close(self) -> None:
        """–ó–∞—Ç–≤–∞—Ä—è —Å–µ—Å–∏—è—Ç–∞"""
        self.session.close()

    def get_matrix_via_match_api(self, locations: List[Tuple[float, float]]) -> DistanceMatrix:
        """–ò–∑–ø–æ–ª–∑–≤–∞ Match API –∑–∞ GPS —Ç–æ—á–∫–∏ —Å batch-–æ–≤–µ –æ—Ç 30 –ª–æ–∫–∞—Ü–∏–∏"""
        n = len(locations)
        logger.info(f"üó∫Ô∏è –ó–∞–ø–æ—á–≤–∞–º Match API –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ {n} GPS –ª–æ–∫–∞—Ü–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∫–µ—à–∞ –ø—ä—Ä–≤–æ
        if self.cache:
            cached_matrix = self.cache.get(locations)
            if cached_matrix:
                logger.info(f"üíæ –ù–∞–º–µ—Ä–µ–Ω–∞ –∫–µ—à–∏—Ä–∞–Ω–∞ Match API –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞ {n} –ª–æ–∫–∞—Ü–∏–∏")
                return cached_matrix
        
        # –ó–∞ –º–∞–ª–∫–∏ datasets –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ Match API
        if n <= 30:
            return self._match_api_direct(locations)
        else:
            # –ó–∞ –≥–æ–ª–µ–º–∏ datasets –∏–∑–ø–æ–ª–∑–≤–∞–º–µ Match API batch-–æ–≤–µ
            return self._build_matrix_via_match_batches(locations)
    
    def _match_api_direct(self, locations: List[Tuple[float, float]]) -> DistanceMatrix:
        """–î–∏—Ä–µ–∫—Ç–µ–Ω Match API –∑–∞ –¥–æ 30 –ª–æ–∫–∞—Ü–∏–∏"""
        try:
            logger.info(f"üó∫Ô∏è Match API –∑–∞—è–≤–∫–∞ –∑–∞ {len(locations)} GPS —Ç–æ—á–∫–∏")
            
            # –ü–æ–¥–≥–æ—Ç–≤—è–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏—Ç–µ –∑–∞ Match API
            coordinates_str = ';'.join([f"{lon:.6f},{lat:.6f}" for lat, lon in locations])
            
            # –û–ø–∏—Ç–≤–∞–º–µ GET –ø—ä—Ä–≤–æ
            clean_base_url = self.config.base_url.rstrip('/')
            match_url = f"{clean_base_url}/match/v1/driving/{coordinates_str}?overview=full&geometries=geojson&steps=false&annotations=distance,duration"
            
            if len(match_url) <= 8000:  # Match API –ø–æ–¥–¥—ä—Ä–∂–∞ –ø–æ-–¥—ä–ª–≥–∏ URL-–∏
                response = self.session.get(match_url, timeout=30)
            else:
                # POST –∑–∞ –º–Ω–æ–≥–æ –¥—ä–ª–≥–∏ URL-–∏
                response = self._make_match_post_request(locations)
            
            response.raise_for_status()
            data = response.json()
            
            if data['code'] != 'Ok':
                raise Exception(f"Match API –≥—Ä–µ—à–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –≥—Ä–µ—à–∫–∞')}")
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–µ–Ω Match API –∑–∞ {len(locations)} GPS —Ç–æ—á–∫–∏")
            
            # –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ Match API —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
            return self._process_match_api_response(data, locations)
            
        except Exception as e:
            logger.warning(f"Match API –Ω–µ—É—Å–ø–µ—à–µ–Ω: {e}")
            
            # Fallback –∫—ä–º Table API
            if self.config.fallback_to_public:
                logger.info(f"üåê Fallback –∫—ä–º Table API –∑–∞ {len(locations)} –ª–æ–∫–∞—Ü–∏–∏")
                return self._try_table_api_with_fallback(locations)
            else:
                raise e
    
    def _make_match_post_request(self, locations: List[Tuple[float, float]]):
        """POST –∑–∞—è–≤–∫–∞ –∑–∞ Match API —Å –º–Ω–æ–≥–æ –ª–æ–∫–∞—Ü–∏–∏"""
        clean_base_url = self.config.base_url.rstrip('/')
        match_url = f"{clean_base_url}/match/v1/driving"
        
        # –ü–æ–¥–≥–æ—Ç–≤—è–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏—Ç–µ –∑–∞ POST
        coordinates = [[lon, lat] for lat, lon in locations]
        
        payload = {
            "coordinates": coordinates,
            "overview": "full",
            "geometries": "geojson",
            "steps": False,
            "annotations": ["distance", "duration"]
        }
        
        response = self.session.post(match_url, json=payload, timeout=30)
        return response
    
    def _process_match_api_response(self, data, locations: List[Tuple[float, float]]) -> DistanceMatrix:
        """–û–±—Ä–∞–±–æ—Ç–≤–∞ Match API –æ—Ç–≥–æ–≤–æ—Ä–∞ –∏ —Å—ä–∑–¥–∞–≤–∞ distance matrix"""
        n = len(locations)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ –º–∞—Ç—Ä–∏—Ü–∏—Ç–µ
        distances = [[0.0 for _ in range(n)] for _ in range(n)]
        durations = [[0.0 for _ in range(n)] for _ in range(n)]
        
        # Match API –≤—Ä—ä—â–∞ matched points –∏ route geometry
        matchings = data.get('matchings', [])
        
        if matchings:
            # –í–∑–µ–º–∞–º–µ –ø—ä—Ä–≤–∏—è matching (–Ω–∞–π-–¥–æ–±—Ä–∏—è)
            matching = matchings[0]
            
            # –ü–æ–ª—É—á–∞–≤–∞–º–µ annotations
            legs = matching.get('legs', [])
            
            # –ò–∑–≥—Ä–∞–∂–¥–∞–º–µ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞ –æ—Ç leg-–æ–≤–µ—Ç–µ
            for i in range(len(legs)):
                leg = legs[i]
                leg_distance = leg.get('distance', 0)
                leg_duration = leg.get('duration', 0)
                
                # –ü–æ–ø—ä–ª–≤–∞–º–µ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞
                distances[i][i+1] = leg_distance
                distances[i+1][i] = leg_distance  # –°–∏–º–µ—Ç—Ä–∏—á–Ω–æ
                durations[i][i+1] = leg_duration
                durations[i+1][i] = leg_duration
            
            # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –∫—É–º—É–ª–∞—Ç–∏–≤–Ω–∏ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –∑–∞ –≤—Å–∏—á–∫–∏ –¥–≤–æ–π–∫–∏
            for i in range(n):
                for j in range(i+2, n):
                    # –°—É–º–∏—Ä–∞–º–µ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è—Ç–∞ –º–µ–∂–¥—É —Ç–æ—á–∫–∏—Ç–µ
                    total_distance = sum(distances[k][k+1] for k in range(i, j))
                    total_duration = sum(durations[k][k+1] for k in range(i, j))
                    
                    distances[i][j] = total_distance
                    distances[j][i] = total_distance  # –°–∏–º–µ—Ç—Ä–∏—á–Ω–æ
                    durations[i][j] = total_duration
                    durations[j][i] = total_duration
        else:
            # Fallback –∫—ä–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∞–∫–æ –Ω—è–º–∞ matching
            logger.warning("Match API –Ω–µ –≤—ä—Ä–Ω–∞ matchings, –∏–∑–ø–æ–ª–∑–≤–∞–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏")
            for i in range(n):
                for j in range(n):
                    if i != j:
                        approx_distance = self._haversine_distance(locations[i], locations[j]) * 1.3
                        distances[i][j] = approx_distance
                        durations[i][j] = (approx_distance / 1000) / self.config.average_speed_kmh * 3600
        
        matrix = DistanceMatrix(
            distances=distances,
            durations=durations,
            locations=locations,
            sources=list(range(len(locations))),
            destinations=list(range(len(locations)))
        )
        
        # –ó–∞–ø–∏—Å–≤–∞–º–µ –≤ –∫–µ—à–∞
        if self.cache:
            self.cache.set(matrix)
            logger.info(f"üíæ –ó–∞–ø–∏—Å–∞—Ö Match API –º–∞—Ç—Ä–∏—Ü–∞ –≤ –∫–µ—à–∞ –∑–∞ {n} –ª–æ–∫–∞—Ü–∏–∏")
        
        return matrix
    
    def _build_matrix_via_match_batches(self, locations: List[Tuple[float, float]]) -> DistanceMatrix:
        """–ò–∑–≥—Ä–∞–∂–¥–∞ –º–∞—Ç—Ä–∏—Ü–∞ –∏–∑–ø–æ–ª–∑–≤–∞–π–∫–∏ Match API batch-–æ–≤–µ –æ—Ç 30 –ª–æ–∫–∞—Ü–∏–∏"""
        n = len(locations)
        batch_size = 30  # –ù–∞–º–∞–ª–µ–Ω —Ä–∞–∑–º–µ—Ä –∑–∞ —Å—Ç–∞–±–∏–ª–Ω–æ—Å—Ç
        
        logger.info(f"üó∫Ô∏è –ó–∞–ø–æ—á–≤–∞–º Match API batch –æ–±—Ä–∞–±–æ—Ç–∫–∞: {n} –ª–æ–∫–∞—Ü–∏–∏ —Å batches –æ—Ç {batch_size}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–Ω–∏ –º–∞—Ç—Ä–∏—Ü–∏
        full_distances = [[0.0 for _ in range(n)] for _ in range(n)]
        full_durations = [[0.0 for _ in range(n)] for _ in range(n)]
        
        successful_batches = 0
        failed_batches = 0
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –±—Ä–æ–π batches
        num_batches = (n + batch_size - 1) // batch_size
        total_batch_requests = num_batches
        
        logger.info(f"üìä –©–µ –Ω–∞–ø—Ä–∞–≤—è {total_batch_requests} Match API batch –∑–∞—è–≤–∫–∏")
        
        # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä –∑–∞ batch –∑–∞—è–≤–∫–∏—Ç–µ
        with tqdm(total=total_batch_requests, desc="üó∫Ô∏è Match API batches", unit="batch") as pbar:
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ sequential batches (GPS —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏)
            for i in range(0, n, batch_size):
                end_i = min(i + batch_size, n)
                batch_locations = locations[i:end_i]
                
                try:
                    # Match API –∑–∞—è–≤–∫–∞ –∑–∞ —Ç–æ–∑–∏ batch
                    batch_matrix = self._match_api_direct(batch_locations)
                    
                    # –ö–æ–ø–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –≤ –ø—ä–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞
                    batch_size_actual = len(batch_locations)
                    for src_idx in range(batch_size_actual):
                        for dest_idx in range(batch_size_actual):
                            global_src = i + src_idx
                            global_dest = i + dest_idx
                            full_distances[global_src][global_dest] = batch_matrix.distances[src_idx][dest_idx]
                            full_durations[global_src][global_dest] = batch_matrix.durations[src_idx][dest_idx]
                    
                    successful_batches += 1
                    
                    # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä–∞
                    pbar.update(1)
                    pbar.set_postfix({
                        '—É—Å–ø–µ—à–Ω–∏': successful_batches,
                        '–Ω–µ—É—Å–ø–µ—à–Ω–∏': failed_batches,
                        '—Ä–∞–∑–º–µ—Ä': f'{len(batch_locations)} GPS —Ç–æ—á–∫–∏'
                    })
                    
                    # –ú–∞–ª–∫–∞ –ø–∞—É–∑–∞
                    time.sleep(0.1)
                    
                except Exception as e:
                    logger.warning(f"Match API batch {i}-{end_i} –Ω–µ—É—Å–ø–µ—à–µ–Ω: {e}")
                    failed_batches += 1
                    
                    # Fallback –∫—ä–º Table API –∑–∞ —Ç–æ–∑–∏ batch
                    logger.info(f"üõ£Ô∏è Fallback –∫—ä–º Table API –∑–∞ batch {i}-{end_i}")
                    try:
                        batch_matrix = self._try_table_api_with_fallback(batch_locations)
                        
                        # –ö–æ–ø–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
                        batch_size_actual = len(batch_locations)
                        for src_idx in range(batch_size_actual):
                            for dest_idx in range(batch_size_actual):
                                global_src = i + src_idx
                                global_dest = i + dest_idx
                                full_distances[global_src][global_dest] = batch_matrix.distances[src_idx][dest_idx]
                                full_durations[global_src][global_dest] = batch_matrix.durations[src_idx][dest_idx]
                    except:
                        # –ü–æ—Å–ª–µ–¥–µ–Ω fallback –∫—ä–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
                        self._fill_batch_with_approximations(batch_locations, full_distances, full_durations, i)
                    
                    pbar.update(1)
                    pbar.set_postfix({
                        '—É—Å–ø–µ—à–Ω–∏': successful_batches,
                        '–Ω–µ—É—Å–ø–µ—à–Ω–∏': failed_batches,
                        '—Ä–µ–∂–∏–º': 'Fallback'
                    })
            
            # –ü–æ–ø—ä–ª–≤–∞–º–µ –º–µ–∂–¥—É–±batch —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è—Ç–∞
            logger.info(f"üîó –ü–æ–ø—ä–ª–≤–∞–º –º–µ–∂–¥—É–±batch —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è...")
            self._fill_inter_batch_distances(locations, full_distances, full_durations, batch_size)
        
        # –§–∏–Ω–∞–ª–µ–Ω –æ—Ç—á–µ—Ç
        success_rate = (successful_batches / total_batch_requests) * 100 if total_batch_requests > 0 else 0
        logger.info(f"‚úÖ Match API batch –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–∞:")
        logger.info(f"   üéØ –£—Å–ø–µ—à–Ω–∏ batches: {successful_batches}/{total_batch_requests} ({success_rate:.1f}%)")
        logger.info(f"   ‚ùå –ù–µ—É—Å–ø–µ—à–Ω–∏ batches: {failed_batches}")
        logger.info(f"   üó∫Ô∏è –ò–∑–ø–æ–ª–∑–≤–∞–Ω–∏ GPS —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞ –Ω–∞–π-—Ç–æ—á–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏")
        
        matrix = DistanceMatrix(
            distances=full_distances,
            durations=full_durations,
            locations=locations,
            sources=list(range(len(locations))),
            destinations=list(range(len(locations)))
        )
        
        # –ó–∞–ø–∏—Å–≤–∞–º–µ –≤ –∫–µ—à–∞
        if self.cache:
            self.cache.set(matrix)
            logger.info(f"üíæ –ó–∞–ø–∏—Å–∞—Ö Match API batch –º–∞—Ç—Ä–∏—Ü–∞ –≤ –∫–µ—à–∞ –∑–∞ {len(locations)} –ª–æ–∫–∞—Ü–∏–∏")
        
        return matrix
    
    def _fill_batch_with_approximations(self, batch_locations, full_distances, full_durations, start_idx):
        """–ü–æ–ø—ä–ª–≤–∞ batch —Å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∫–∞—Ç–æ fallback"""
        for i, loc1 in enumerate(batch_locations):
            for j, loc2 in enumerate(batch_locations):
                global_i = start_idx + i
                global_j = start_idx + j
                
                if i == j:
                    full_distances[global_i][global_j] = 0.0
                    full_durations[global_i][global_j] = 0.0
                else:
                    approx_distance = self._haversine_distance(loc1, loc2) * 1.3
                    full_distances[global_i][global_j] = approx_distance
                    full_durations[global_i][global_j] = (approx_distance / 1000) / self.config.average_speed_kmh * 3600
    
    def _fill_inter_batch_distances(self, locations, full_distances, full_durations, batch_size):
        """–ü–æ–ø—ä–ª–≤–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è—Ç–∞ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω–∏ batch-–æ–≤–µ"""
        n = len(locations)
        
        for i in range(0, n, batch_size):
            end_i = min(i + batch_size, n)
            
            for j in range(i + batch_size, n, batch_size):
                end_j = min(j + batch_size, n)
                
                # –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –¥–≤–æ–π–∫–∏ –º–µ–∂–¥—É –¥–≤–∞ batch-–∞
                for src_idx in range(i, end_i):
                    for dest_idx in range(j, end_j):
                        src_loc = locations[src_idx]
                        dest_loc = locations[dest_idx]
                        
                        try:
                            # –û–ø–∏—Ç–≤–∞–º–µ Route API –∑–∞ –º–µ–∂–¥—É–±batch —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è
                            route_result = self._single_route_request(src_loc, dest_loc)
                            full_distances[src_idx][dest_idx] = route_result['distance']
                            full_distances[dest_idx][src_idx] = route_result['distance']  # –°–∏–º–µ—Ç—Ä–∏—á–Ω–æ
                            full_durations[src_idx][dest_idx] = route_result['duration']
                            full_durations[dest_idx][src_idx] = route_result['duration']
                        except:
                            # Fallback –∫—ä–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
                            approx_distance = self._haversine_distance(src_loc, dest_loc) * 1.3
                            full_distances[src_idx][dest_idx] = approx_distance
                            full_distances[dest_idx][src_idx] = approx_distance
                            full_durations[src_idx][dest_idx] = (approx_distance / 1000) / self.config.average_speed_kmh * 3600
                            full_durations[dest_idx][src_idx] = full_durations[src_idx][dest_idx]

    def _build_optimized_table_batches(self, locations: List[Tuple[float, float]]) -> DistanceMatrix:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω batch Table API –º–µ—Ç–æ–¥ —Å –¥–æ 30 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–∞ –∑–∞—è–≤–∫–∞"""
        n = len(locations)
        batch_size = 30  # –ù–∞–º–∞–ª–µ–Ω —Ä–∞–∑–º–µ—Ä –∑–∞ –ø–æ-—Å—Ç–∞–±–∏–ª–Ω–∏ –∑–∞—è–≤–∫–∏
        
        logger.info(f"üöÄ –ó–∞–ø–æ—á–≤–∞–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω batch Table API: {n} –ª–æ–∫–∞—Ü–∏–∏ —Å batch —Ä–∞–∑–º–µ—Ä {batch_size}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–Ω–∏ –º–∞—Ç—Ä–∏—Ü–∏
        full_distances = [[0.0 for _ in range(n)] for _ in range(n)]
        full_durations = [[0.0 for _ in range(n)] for _ in range(n)]
        
        successful_batches = 0
        failed_batches = 0
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –±—Ä–æ–π batches - –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –ø—Ä–æ–∑–æ—Ä—Ü–∏
        batch_requests = []
        for i in range(0, n, batch_size):
            end_i = min(i + batch_size, n)
            batch_requests.append((i, end_i))
        
        total_batch_requests = len(batch_requests)
        logger.info(f"üìä –©–µ –Ω–∞–ø—Ä–∞–≤—è {total_batch_requests} Table API –∑–∞—è–≤–∫–∏ —Å –¥–æ {batch_size} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏")
        
        # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä –∑–∞ batch –∑–∞—è–≤–∫–∏—Ç–µ
        with tqdm(total=total_batch_requests, desc="üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω Table API", unit="batch") as pbar:
            
            for batch_idx, (start_idx, end_idx) in enumerate(batch_requests):
                batch_locations = locations[start_idx:end_idx]
                batch_size_actual = len(batch_locations)
                
                try:
                    # Table API –∑–∞—è–≤–∫–∞ –∑–∞ —Ç–æ–∑–∏ batch
                    batch_matrix = self._try_table_api_with_fallback(batch_locations)
                    
                    # –ö–æ–ø–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –≤ –ø—ä–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞
                    for i in range(batch_size_actual):
                        for j in range(batch_size_actual):
                            global_i = start_idx + i
                            global_j = start_idx + j
                            full_distances[global_i][global_j] = batch_matrix.distances[i][j]
                            full_durations[global_i][global_j] = batch_matrix.durations[i][j]
                    
                    successful_batches += 1
                    
                    # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä–∞
                    pbar.update(1)
                    pbar.set_postfix({
                        '—É—Å–ø–µ—à–Ω–∏': successful_batches,
                        '–Ω–µ—É—Å–ø–µ—à–Ω–∏': failed_batches,
                        '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏': f'{batch_size_actual}'
                    })
                    
                    # –ú–∏–Ω–∏–º–∞–ª–Ω–∞ –ø–∞—É–∑–∞ –∑–∞ –¥–∞ –Ω–µ –ø—Ä–µ—Ç–æ–≤–∞—Ä–∏–º —Å—ä—Ä–≤—ä—Ä–∞
                    time.sleep(0.01)
                    
                except Exception as e:
                    logger.warning(f"Table API batch {start_idx}-{end_idx} –Ω–µ—É—Å–ø–µ—à–µ–Ω: {e}")
                    failed_batches += 1
                    
                    # Fallback –∫—ä–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∑–∞ —Ç–æ–∑–∏ batch
                    logger.debug(f"üìê –ò–∑–ø–æ–ª–∑–≤–∞–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∑–∞ batch {start_idx}-{end_idx}")
                    for i in range(batch_size_actual):
                        for j in range(batch_size_actual):
                            global_i = start_idx + i
                            global_j = start_idx + j
                            
                            if i == j:
                                full_distances[global_i][global_j] = 0.0
                                full_durations[global_i][global_j] = 0.0
                            else:
                                approx_distance = self._haversine_distance(batch_locations[i], batch_locations[j]) * 1.3
                                full_distances[global_i][global_j] = approx_distance
                                full_durations[global_i][global_j] = (approx_distance / 1000) / self.config.average_speed_kmh * 3600
                    
                    pbar.update(1)
                    pbar.set_postfix({
                        '—É—Å–ø–µ—à–Ω–∏': successful_batches,
                        '–Ω–µ—É—Å–ø–µ—à–Ω–∏': failed_batches,
                        '—Ä–µ–∂–∏–º': '–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏'
                    })
        
        # –ü–æ–ø—ä–ª–≤–∞–º–µ –º–µ–∂–¥—É–±batch —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è—Ç–∞ —Å Route API
        logger.info(f"üîó –ü–æ–ø—ä–ª–≤–∞–º –º–µ–∂–¥—É–±batch —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è...")
        self._fill_inter_batch_connections(locations, full_distances, full_durations, batch_requests)
        
        # –§–∏–Ω–∞–ª–µ–Ω –æ—Ç—á–µ—Ç
        success_rate = (successful_batches / total_batch_requests) * 100 if total_batch_requests > 0 else 0
        logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω batch Table API –∑–∞–≤—ä—Ä—à–µ–Ω:")
        logger.info(f"   üéØ –£—Å–ø–µ—à–Ω–∏ batches: {successful_batches}/{total_batch_requests} ({success_rate:.1f}%)")
        logger.info(f"   ‚ùå –ù–µ—É—Å–ø–µ—à–Ω–∏ batches: {failed_batches}")
        logger.info(f"   üöÄ –ò–∑–ø–æ–ª–∑–≤–∞–Ω–∏ 80-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∏ Table API –∑–∞—è–≤–∫–∏")
        
        matrix = DistanceMatrix(
            distances=full_distances,
            durations=full_durations,
            locations=locations,
            sources=list(range(len(locations))),
            destinations=list(range(len(locations)))
        )
        
        # –ó–∞–ø–∏—Å–≤–∞–º–µ –≤ –∫–µ—à–∞
        if self.cache:
            self.cache.set(matrix)
            logger.info(f"üíæ –ó–∞–ø–∏—Å–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–∞ batch –º–∞—Ç—Ä–∏—Ü–∞ –≤ –∫–µ—à–∞ –∑–∞ {n} –ª–æ–∫–∞—Ü–∏–∏")
        
        return matrix
    
    def _fill_inter_batch_connections(self, locations, full_distances, full_durations, batch_requests):
        """–ü–æ–ø—ä–ª–≤–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è—Ç–∞ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω–∏ batch-–æ–≤–µ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–∏ Table API –∑–∞—è–≤–∫–∏"""
        n = len(locations)
        logger.info(f"üîó –ü–æ–ø—ä–ª–≤–∞–º –º–µ–∂–¥—É–±batch –≤—Ä—ä–∑–∫–∏ —Å Table API batch –∑–∞—è–≤–∫–∏...")
        
        # –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –¥–≤–æ–π–∫–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω–∏ batch-–æ–≤–µ
        for i, (start_i, end_i) in enumerate(batch_requests):
            for j, (start_j, end_j) in enumerate(batch_requests):
                if i >= j:  # –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ —Å–∞–º–æ –≥–æ—Ä–Ω–∞—Ç–∞ —Ç—Ä–∏—ä–≥—ä–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞
                    continue
                
                # –°—ä–±–∏—Ä–∞–º–µ –ª–æ–∫–∞—Ü–∏–∏—Ç–µ –æ—Ç –¥–≤–∞—Ç–∞ batch-–∞
                batch_i_locations = locations[start_i:end_i]
                batch_j_locations = locations[start_j:end_j]
                
                # –ö–æ–º–±–∏–Ω–∏—Ä–∞–º–µ –ª–æ–∫–∞—Ü–∏–∏—Ç–µ –∑–∞ Table API –∑–∞—è–≤–∫–∞
                inter_batch_locations = batch_i_locations + batch_j_locations
                
                try:
                    # Table API –∑–∞—è–≤–∫–∞ –∑–∞ –º–µ–∂–¥—É–±batch –≤—Ä—ä–∑–∫–∏
                    logger.debug(f"üîó Table API –∑–∞ batch {i}-{j}: {len(inter_batch_locations)} –ª–æ–∫–∞—Ü–∏–∏")
                    inter_batch_matrix = self._try_table_api_with_fallback(inter_batch_locations)
                    
                    # –ü–æ–ø—ä–ª–≤–∞–º–µ –º–µ–∂–¥—É–±batch –≤—Ä—ä–∑–∫–∏—Ç–µ –≤ –ø—ä–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞
                    batch_i_size = len(batch_i_locations)
                    batch_j_size = len(batch_j_locations)
                    
                    for src_idx_local, global_src in enumerate(range(start_i, end_i)):
                        for dest_idx_local, global_dest in enumerate(range(start_j, end_j)):
                            # –ò–Ω–¥–µ–∫—Å–∏ –≤ –º–µ–∂–¥—É–±batch –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞
                            inter_src_idx = src_idx_local  # batch i –ª–æ–∫–∞—Ü–∏–∏ —Å–∞ –≤ –Ω–∞—á–∞–ª–æ—Ç–æ
                            inter_dest_idx = batch_i_size + dest_idx_local  # batch j –ª–æ–∫–∞—Ü–∏–∏ —Å–∞ —Å–ª–µ–¥ batch i
                            
                            distance = inter_batch_matrix.distances[inter_src_idx][inter_dest_idx]
                            duration = inter_batch_matrix.durations[inter_src_idx][inter_dest_idx]
                            
                            # –°–∏–º–µ—Ç—Ä–∏—á–Ω–æ –ø–æ–ø—ä–ª–≤–∞–Ω–µ
                            full_distances[global_src][global_dest] = distance
                            full_distances[global_dest][global_src] = distance
                            full_durations[global_src][global_dest] = duration
                            full_durations[global_dest][global_src] = duration
                    
                    logger.debug(f"‚úÖ Table API —É—Å–ø–µ—à–Ω–∞ –∑–∞ batch {i}-{j}")
                    
                except Exception as e:
                    # Fallback –∫—ä–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∑–∞ —Ü—è–ª–æ—Ç–æ –º–µ–∂–¥—É–±batch –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
                    logger.warning(f"üîó Table API –∑–∞ batch {i}-{j} –Ω–µ—É—Å–ø–µ—à–Ω–∞: {e}, –∏–∑–ø–æ–ª–∑–≤–∞–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏")
                    
                    for src_idx in range(start_i, end_i):
                        for dest_idx in range(start_j, end_j):
                            src_loc = locations[src_idx]
                            dest_loc = locations[dest_idx]
                            
                            approx_distance = self._haversine_distance(src_loc, dest_loc) * 1.3
                            approx_duration = (approx_distance / 1000) / self.config.average_speed_kmh * 3600
                            
                            # –°–∏–º–µ—Ç—Ä–∏—á–Ω–æ –ø–æ–ø—ä–ª–≤–∞–Ω–µ
                            full_distances[src_idx][dest_idx] = approx_distance
                            full_distances[dest_idx][src_idx] = approx_distance
                            full_durations[src_idx][dest_idx] = approx_duration
                            full_durations[dest_idx][src_idx] = approx_duration


def create_osrm_client() -> OSRMClient:
    """–£–¥–æ–±–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ OSRM –∫–ª–∏–µ–Ω—Ç"""
    return OSRMClient()


def get_customer_distance_matrix(customers, depot_location: Tuple[float, float]) -> DistanceMatrix:
    """–ü–æ–ª—É—á–∞–≤–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –∑–∞ —Å–ø–∏—Å—ä–∫ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∏"""
    client = create_osrm_client()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏—Ç–µ (–¥–µ–ø–æ + –∫–ª–∏–µ–Ω—Ç–∏)
    locations = [depot_location] + [customer.coordinates for customer in customers if customer.coordinates]
    
    try:
        return client.get_distance_matrix(locations)
    finally:
        client.close()


def get_distance_matrix_from_central_cache(locations: List[Tuple[float, float]]) -> Optional[DistanceMatrix]:
    """–ü–æ–ª—É—á–∞–≤–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å —Ä–∞–∑—Å—Ç–æ—è–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–Ω–æ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∏—è –∫–µ—à (–û–ü–¢–ò–ú–ò–ó–ò–†–ê–ù–û)"""
    try:
        # –°—ä–∑–¥–∞–≤–∞–º–µ –∫–µ—à –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è
        cache = OSRMCache(
            cache_file=os.path.join(get_config().cache.cache_dir, get_config().cache.osrm_cache_file),
            expiry_hours=24
        )
        
        # –ü–™–†–í–û –æ–ø–∏—Ç–≤–∞–º–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ —Ç—ä—Ä—Å–µ–Ω–µ (–Ω–∞–π-–±—ä—Ä–∑–æ)
        cached_matrix = cache.get(locations)
        if cached_matrix:
            logger.info(f"üíæ –ù–∞–º–µ—Ä–µ–Ω–∞ —Ç–æ—á–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ –≤ –∫–µ—à–∞ –∑–∞ {len(locations)} –ª–æ–∫–∞—Ü–∏–∏")
            return cached_matrix
        
        # –ê–∫–æ –Ω—è–º–∞ —Ç–æ—á–Ω–æ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ, —Å–∞–º–æ –ª–æ–≥–∏—Ä–∞–º–µ —á–µ –Ω—è–º–∞ –¥–∞–Ω–Ω–∏
        # –ù–ï –ø—Ä–∞–≤–∏–º –ø–æ–¥–º–∞—Ç—Ä–∏—Ü–∞ extraction –∑–∞—â–æ—Ç–æ –µ –º–Ω–æ–≥–æ –±–∞–≤–Ω–æ
        logger.info(f"‚ùå –ù—è–º–∞ —Ç–æ—á–Ω–∏ –¥–∞–Ω–Ω–∏ –≤ –∫–µ—à–∞ –∑–∞ {len(locations)} –ª–æ–∫–∞—Ü–∏–∏")
        return None
        
    except Exception as e:
        logger.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∏—è –∫–µ—à: {e}")
        return None


def build_and_save_central_matrix(input_file: str = None) -> bool:
    """–°—ä–∑–¥–∞–≤–∞ –∏ –∑–∞–ø–∏—Å–≤–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ –æ—Ç –≤—Å–∏—á–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ –≤ input —Ñ–∞–π–ª–∞"""
    try:
        from input_handler import InputHandler
        
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –≤—Å–∏—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∏
        handler = InputHandler()
        input_data = handler.load_data(input_file)
        
        if not input_data.customers:
            logger.error("–ù—è–º–∞ –≤–∞–ª–∏–¥–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏ –≤ input —Ñ–∞–π–ª–∞")
            return False
        
        # –°—ä–∑–¥–∞–≤–∞–º–µ –ø—ä–ª–µ–Ω —Å–ø–∏—Å—ä–∫ —Å –ª–æ–∫–∞—Ü–∏–∏ (–¥–µ–ø–æ + –≤—Å–∏—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∏)
        all_locations = [input_data.depot_location] + [c.coordinates for c in input_data.customers if c.coordinates]
        
        logger.info(f"üèóÔ∏è –°—ä–∑–¥–∞–≤–∞–º —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞ {len(all_locations)} –ª–æ–∫–∞—Ü–∏–∏...")
        logger.info(f"   üìç –î–µ–ø–æ: {input_data.depot_location}")
        logger.info(f"   üë• –ö–ª–∏–µ–Ω—Ç–∏: {len(input_data.customers)}")
        
        # –°—ä–∑–¥–∞–≤–∞–º–µ OSRM –∫–ª–∏–µ–Ω—Ç
        client = OSRMClient()
        try:
            # –ü–æ–ª—É—á–∞–≤–∞–º–µ –º–∞—Ç—Ä–∏—Ü–∞—Ç–∞ (—Ç–æ–≤–∞ —â–µ —è –∑–∞–ø–∏—à–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤ –∫–µ—à–∞)
            matrix = client.get_distance_matrix(all_locations)
            
            logger.info(f"‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"   üìä –†–∞–∑–º–µ—Ä: {len(matrix.locations)}x{len(matrix.locations)}")
            logger.info(f"   üíæ –ó–∞–ø–∏—Å–∞–Ω–∞ –≤: cache/osrm_matrix_cache.json")
            
            return True
            
        finally:
            client.close()
        
    except Exception as e:
        logger.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞: {e}")
        return False


def get_central_matrix_info() -> dict:
    """–í—Ä—ä—â–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞ –≤ –∫–µ—à–∞"""
    try:
        cache = OSRMCache(
            cache_file=os.path.join(get_config().cache.cache_dir, get_config().cache.osrm_cache_file),
            expiry_hours=24
        )
        
        central_matrix = cache.get_complete_central_matrix()
        
        if central_matrix:
            return {
                'exists': True,
                'locations_count': len(central_matrix.locations),
                'depot_location': central_matrix.locations[0] if central_matrix.locations else None,
                'cache_entries': len(cache.cache_data),
                'cache_file_size': os.path.getsize(cache.cache_file) if os.path.exists(cache.cache_file) else 0
            }
        else:
            return {
                'exists': False,
                'locations_count': 0,
                'depot_location': None,
                'cache_entries': len(cache.cache_data),
                'cache_file_size': os.path.getsize(cache.cache_file) if os.path.exists(cache.cache_file) else 0
            }
    
    except Exception as e:
        logger.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–Ω–∞—Ç–∞ –º–∞—Ç—Ä–∏—Ü–∞: {e}")
        return {'exists': False, 'error': str(e)}