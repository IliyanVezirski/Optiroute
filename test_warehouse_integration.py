#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞ warehouse –ª–æ–≥–∏–∫–∞—Ç–∞ –≤ OR-Tools
"""

from config import get_config, config_manager
from input_handler import InputHandler
from cvrp_solver import CVRPSolver

def test_warehouse_integration():
    """–¢–µ—Å—Ç–≤–∞ –Ω–æ–≤–∏—è –ø–æ–¥—Ö–æ–¥ - OR-Tools —Å–∞–º —Ä–µ—à–∞–≤–∞ –∑–∞ —Å–∫–ª–∞–¥–∞"""
    print("üöÄ –¢–ï–°–¢ –ó–ê WAREHOUSE –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í OR-TOOLS")
    print("=" * 60)
    
    try:
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        config = get_config()
        
        print(f"üìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        print(f"   Warehouse enabled: {config.warehouse.enable_warehouse}")
        print(f"   OR-Tools time limit: {config.cvrp.time_limit_seconds} —Å–µ–∫")
        
        # –ü–æ–∫–∞–∑–≤–∞–º–µ –∞–≤—Ç–æ–±—É—Å–∏—Ç–µ
        print(f"\nüöõ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ê –ê–í–¢–û–ë–£–°–ò:")
        for i, vehicle in enumerate(config.vehicles):
            if vehicle.enabled:
                print(f"   {i+1}. {vehicle.vehicle_type.value}: {vehicle.count} –±—Ä, {vehicle.capacity} —Å—Ç, {vehicle.max_distance_km} –∫–º")
        
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
        print(f"\nüìä –ó–ê–†–ï–ñ–î–ê–ù–ï –ù–ê –î–ê–ù–ù–ò:")
        input_handler = InputHandler()
        input_data = input_handler.load_data()
        
        print(f"   –û–±—â–æ –∫–ª–∏–µ–Ω—Ç–∏: {len(input_data.customers)}")
        print(f"   –û–±—â –æ–±–µ–º: {input_data.total_volume:.2f} —Å—Ç.")
        
        # –°—ä–∑–¥–∞–≤–∞–º–µ CVRP solver
        cvrp_solver = CVRPSolver()
        
        print(f"\nüîß –°–¢–ê–†–¢–ò–†–ê–ù–ï –ù–ê OR-TOOLS –° –í–°–ò–ß–ö–ò –ö–õ–ò–ï–ù–¢–ò:")
        print("   OR-Tools —â–µ —Ä–µ—à–∏ —Å–∞–º –∫–æ–∏ –∫–ª–∏–µ–Ω—Ç–∏ –¥–∞ –æ—Ç–∏–¥–∞—Ç –≤ —Å–∫–ª–∞–¥–∞!")
        
        # –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –Ω–æ–≤–∏—è –º–µ—Ç–æ–¥ - –≤—Å–∏—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∏
        solution = cvrp_solver.solve_with_all_customers(
            all_customers=input_data.customers,
            depot_location=input_data.depot_location
        )
        
        print(f"\n‚úÖ –†–ï–ó–£–õ–¢–ê–¢:")
        print(f"   –ò–∑–ø–æ–ª–∑–≤–∞–Ω–∏ –∞–≤—Ç–æ–±—É—Å–∏: {solution.total_vehicles_used}")
        print(f"   –û–±—â–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ: {solution.total_distance_km:.2f} –∫–º")
        print(f"   –û–±—â–æ –≤—Ä–µ–º–µ: {solution.total_time_minutes:.1f} –º–∏–Ω")
        print(f"   –î–æ–ø—É—Å—Ç–∏–º–æ —Ä–µ—à–µ–Ω–∏–µ: {'–î–∞' if solution.is_feasible else '–ù–µ'}")
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ
        print(f"\nüìà –ê–ù–ê–õ–ò–ó –ù–ê –ú–ê–†–®–†–£–¢–ò–¢–ï:")
        warehouse_customers = []
        vehicle_customers = []
        
        for route in solution.routes:
            if route.vehicle_type.value == 'warehouse':
                warehouse_customers.extend(route.customers)
                print(f"   üè≠ WAREHOUSE –º–∞—Ä—à—Ä—É—Ç: {len(route.customers)} –∫–ª–∏–µ–Ω—Ç–∞, {route.total_volume:.2f} —Å—Ç.")
            else:
                vehicle_customers.extend(route.customers)
                print(f"   üöõ {route.vehicle_type.value.upper()}: {len(route.customers)} –∫–ª–∏–µ–Ω—Ç–∞, {route.total_volume:.2f} —Å—Ç., {route.total_distance_km:.1f} –∫–º")
        
        print(f"\nüìä –§–ò–ù–ê–õ–ù–û –†–ê–ó–ü–†–ï–î–ï–õ–ï–ù–ò–ï:")
        print(f"   –ö–ª–∏–µ–Ω—Ç–∏ –≤ –∞–≤—Ç–æ–±—É—Å–∏: {len(vehicle_customers)}")
        print(f"   –ö–ª–∏–µ–Ω—Ç–∏ –≤ —Å–∫–ª–∞–¥–∞: {len(warehouse_customers)}")
        print(f"   –û–±—â –æ–±–µ–º –∞–≤—Ç–æ–±—É—Å–∏: {sum(c.volume for c in vehicle_customers):.2f} —Å—Ç.")
        print(f"   –û–±—â –æ–±–µ–º —Å–∫–ª–∞–¥: {sum(c.volume for c in warehouse_customers):.2f} —Å—Ç.")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç
        total_input = len(input_data.customers)
        total_output = len(vehicle_customers) + len(warehouse_customers)
        
        if total_input == total_output:
            print(f"‚úÖ –í–∞–ª–∏–¥–Ω–æ—Å—Ç: –í—Å–∏—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∏ —Å–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏ ({total_input} = {total_output})")
        else:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞: –õ–∏–ø—Å–≤–∞—Ç –∫–ª–∏–µ–Ω—Ç–∏ ({total_input} != {total_output})")
        
        cvrp_solver.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_warehouse_integration()
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç—ä—Ç –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç—ä—Ç –∑–∞–≤—ä—Ä—à–∏ —Å –≥—Ä–µ—à–∫–∏!") 