"""
EXE –≤—Ö–æ–¥–Ω–∞ —Ç–æ—á–∫–∞ –∑–∞ CVRP –ø—Ä–æ–≥—Ä–∞–º–∞
–¢–æ–∑–∏ —Ñ–∞–π–ª —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ –∑–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ EXE —Ñ–∞–π–ª —Å PyInstaller
"""

import sys
import os
import logging
import shutil
from pathlib import Path
import importlib.util

def setup_exe_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–≤–∞ —Å—Ä–µ–¥–∞—Ç–∞ –∑–∞ EXE –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ"""
    # –ü—Ä–æ–º–µ–Ω—è–º–µ —Ä–∞–±–æ—Ç–Ω–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ä–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ EXE —Ñ–∞–π–ª–∞
    if getattr(sys, 'frozen', False):
        # –ê–∫–æ –µ EXE —Ñ–∞–π–ª, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ EXE —Ñ–∞–π–ª–∞
        exe_dir = Path(sys.executable).parent
        os.chdir(exe_dir)
        print(f"üìÅ –†–∞–±–æ—Ç–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {exe_dir}")
    else:
        # –ê–∫–æ –µ Python —Å–∫—Ä–∏–ø—Ç, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞
        script_dir = Path(__file__).parent
        os.chdir(script_dir)
        print(f"üìÅ –†–∞–±–æ—Ç–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {script_dir}")
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∞–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç
    directories = ['logs', 'output', 'cache', 'data']
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–≤–∞–º–µ logging –∑–∞ EXE
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('logs/cvrp_exe.log', encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )

def copy_output_files():
    """–ö–æ–ø–∏—Ä–∞ –∏–∑—Ö–æ–¥–Ω–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–µ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–∞—Ç–∞ –ø–∞–ø–∫–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ EXE"""
    try:
        # –ù–∞–º–∏—Ä–∞–º–µ –≤—Ä–µ–º–µ–Ω–Ω–∞—Ç–∞ –ø–∞–ø–∫–∞ –Ω–∞ PyInstaller
        if getattr(sys, 'frozen', False):
            # –ó–∞ EXE —Ñ–∞–π–ª, –≤—Ä–µ–º–µ–Ω–Ω–∞—Ç–∞ –ø–∞–ø–∫–∞ –µ _MEI* –≤ temp
            import tempfile
            temp_dir = Path(tempfile.gettempdir())
            me_dirs = list(temp_dir.glob('_MEI*'))
            
            if me_dirs:
                # –í–∑–µ–º–∞–º–µ –Ω–∞–π-–Ω–æ–≤–∏—è _MEI* –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                temp_me_dir = max(me_dirs, key=lambda x: x.stat().st_mtime)
                temp_output_dir = temp_me_dir / 'output'
                
                if temp_output_dir.exists():
                    print(f"üìÅ –ö–æ–ø–∏—Ä–∞–º —Ñ–∞–π–ª–æ–≤–µ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–∞—Ç–∞ –ø–∞–ø–∫–∞: {temp_output_dir}")
                    
                    # –ö–æ–ø–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–∞—Ç–∞ output –ø–∞–ø–∫–∞
                    local_output_dir = Path('output')
                    local_output_dir.mkdir(exist_ok=True)
                    
                    for item in temp_output_dir.rglob('*'):
                        if item.is_file():
                            # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∏—è –ø—ä—Ç
                            relative_path = item.relative_to(temp_output_dir)
                            target_path = local_output_dir / relative_path
                            
                            # –°—ä–∑–¥–∞–≤–∞–º–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏—Ç–µ –∞–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç
                            target_path.parent.mkdir(parents=True, exist_ok=True)
                            
                            # –ö–æ–ø–∏—Ä–∞–º–µ —Ñ–∞–π–ª–∞
                            shutil.copy2(item, target_path)
                            print(f"  ‚úÖ –ö–æ–ø–∏—Ä–∞–Ω: {relative_path}")
                    
                    print(f"üìÅ –í—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ —Å–∞ –∫–æ–ø–∏—Ä–∞–Ω–∏ –≤: {local_output_dir.absolute()}")
                else:
                    print("‚ö†Ô∏è –ù–µ —Å–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –∏–∑—Ö–æ–¥–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ –≤ –≤—Ä–µ–º–µ–Ω–Ω–∞—Ç–∞ –ø–∞–ø–∫–∞")
            else:
                print("‚ö†Ô∏è –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞ –ø–∞–ø–∫–∞ –Ω–∞ PyInstaller")
        else:
            print("‚ÑπÔ∏è –ù–µ –µ EXE —Ñ–∞–π–ª - –ø—Ä–æ–ø—É—Å–∫–∞–º –∫–æ–ø–∏—Ä–∞–Ω–µ—Ç–æ")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ: {e}")

# –î–∏–Ω–∞–º–∏—á–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ config.py –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ EXE —Ñ–∞–π–ª–∞
def load_config():
    if getattr(sys, 'frozen', False):
        # –ó–∞ EXE —Ñ–∞–π–ª, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ EXE —Ñ–∞–π–ª–∞
        exe_dir = Path(sys.executable).parent
        config_path = exe_dir / 'config.py'
    else:
        # –ó–∞ Python —Å–∫—Ä–∏–ø—Ç, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞
        script_dir = Path(__file__).parent
        config_path = script_dir / 'config.py'
    
    if config_path.exists():
        spec = importlib.util.spec_from_file_location('config', str(config_path))
        if spec and spec.loader:
            config = importlib.util.module_from_spec(spec)
            sys.modules['config'] = config
            spec.loader.exec_module(config)
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞—Ä–µ–¥–µ–Ω–∞ –æ—Ç: {config_path}")
        else:
            print(f"‚ö†Ô∏è –ù–µ –º–æ–≥–∞ –¥–∞ –∑–∞—Ä–µ–¥—è config.py –æ—Ç: {config_path}")
    else:
        print(f"‚ö†Ô∏è config.py –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –≤: {config_path}")

# –î–æ–±–∞–≤—è–º–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ EXE —Ñ–∞–π–ª–∞ –∫—ä–º Python path
if getattr(sys, 'frozen', False):
    exe_dir = Path(sys.executable).parent
    sys.path.insert(0, str(exe_dir))
else:
    current_dir = Path(__file__).parent
    sys.path.insert(0, str(current_dir))

# –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–º–µ –≥–ª–∞–≤–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
from main import main

def main_exe():
    """–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ EXE"""
    try:
        setup_exe_environment()
        load_config()
        
        print("üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ CVRP –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è...")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ –≤—Ö–æ–¥–µ–Ω —Ñ–∞–π–ª –∫–∞—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç
        input_file = None
        if len(sys.argv) > 1:
            input_file = sys.argv[1]
            print(f"üìÅ –ò–∑–ø–æ–ª–∑–≤–∞–º –≤—Ö–æ–¥–µ–Ω —Ñ–∞–π–ª: {input_file}")
        else:
            # –¢—ä—Ä—Å–∏–º –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞—â —Å–µ —Ñ–∞–π–ª
            default_files = ['data/input.xlsx', 'input.xlsx']
            for file_path in default_files:
                if os.path.exists(file_path):
                    input_file = file_path
                    print(f"üìÅ –ù–∞–º–µ—Ä–µ–Ω –≤—Ö–æ–¥–µ–Ω —Ñ–∞–π–ª: {input_file}")
                    break
            
            if not input_file:
                print("‚ö†Ô∏è –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –≤—Ö–æ–¥–µ–Ω —Ñ–∞–π–ª. –°—ä–∑–¥–∞–π—Ç–µ data/input.xlsx –∏–ª–∏ –ø–æ—Å–æ—á–µ—Ç–µ —Ñ–∞–π–ª –∫–∞—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç.")
                print("üí° –ü—Ä–∏–º–µ—Ä: CVRP_Optimizer.exe data/my_data.xlsx")
                input("\n–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –¥–∞ –∑–∞—Ç–≤–æ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–∞...")
                sys.exit(1)
        
        # –ó–∞–º–µ–Ω—è–º–µ sys.argv —Å –ø—Ä–∞–≤–∏–ª–Ω–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        original_argv = sys.argv.copy()
        sys.argv = [sys.argv[0]]  # –ó–∞–ø–∞–∑–≤–∞–º–µ —Å–∞–º–æ –∏–º–µ—Ç–æ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–∞
        if input_file:
            sys.argv.append(input_file)
        
        # –ò–∑–ø—ä–ª–Ω—è–≤–∞–º–µ –≥–ª–∞–≤–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
        main()
        
        # –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        sys.argv = original_argv
        
        # –ö–æ–ø–∏—Ä–∞–º–µ –∏–∑—Ö–æ–¥–Ω–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–µ
        print("\nüìÅ –ö–æ–ø–∏—Ä–∞–Ω–µ –Ω–∞ –∏–∑—Ö–æ–¥–Ω–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–µ...")
        copy_output_files()
        
        print("\n‚úÖ –ü—Ä–æ–≥—Ä–∞–º–∞—Ç–∞ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ —Å–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞: {os.getcwd()}")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–∞—Ç–∞ –µ –ø—Ä–µ–∫—ä—Å–Ω–∞—Ç–∞ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è.")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ: {e}")
        logging.error(f"EXE –≥—Ä–µ—à–∫–∞: {e}", exc_info=True)
        input("\n–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –¥–∞ –∑–∞—Ç–≤–æ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–∞...")
        sys.exit(1)

if __name__ == "__main__":
    import multiprocessing
    multiprocessing.freeze_support()
    main_exe() 