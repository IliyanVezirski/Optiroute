"""
–¢–µ—Å—Ç –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –Ω–æ–≤–∏—è OSRM –∫–ª–∏–µ–Ω—Ç —Å –≥–æ–ª–µ–º–∏ datasets
"""

from osrm_client import OSRMClient
from config import get_config
import time
import random

def generate_test_locations(count: int, center_lat: float = 42.7, center_lon: float = 23.3, radius: float = 0.1):
    """–ì–µ–Ω–µ—Ä–∏—Ä–∞ —Ç–µ—Å—Ç–æ–≤–∏ –ª–æ–∫–∞—Ü–∏–∏ –æ–∫–æ–ª–æ —Ü–µ–Ω—Ç—ä—Ä"""
    locations = []
    for _ in range(count):
        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Å–ª—É—á–∞–π–Ω–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ —Ä–∞–¥–∏—É—Å
        lat = center_lat + random.uniform(-radius, radius)
        lon = center_lon + random.uniform(-radius, radius)
        locations.append((lat, lon))
    return locations

def test_efficiency():
    """–¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—Ç–∞ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ —Ä–∞–∑–º–µ—Ä–∏"""
    
    print("üöÄ –¢–µ—Å—Ç –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç –Ω–∞ OSRM —Å–∏—Å—Ç–µ–º–∞—Ç–∞")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤–∏ —Ä–∞–∑–º–µ—Ä–∏
    test_sizes = [10, 20, 50, 100, 200, 300]
    
    config = get_config()
    client = OSRMClient(config.osrm)
    
    print(f"‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   Chunk size: {config.osrm.chunk_size}")
    print(f"   Max locations for OSRM: {getattr(config.osrm, 'max_locations_for_osrm', 50)}")
    print(f"   Smart chunking: {getattr(config.osrm, 'enable_smart_chunking', True)}")
    print()
    
    results = []
    
    for size in test_sizes:
        print(f"üìä –¢–µ—Å—Ç–≤–∞–Ω–µ —Å {size} –ª–æ–∫–∞—Ü–∏–∏...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–∏ –ª–æ–∫–∞—Ü–∏–∏
        locations = generate_test_locations(size)
        
        # –ò–∑–º–µ—Ä–≤–∞–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ
        start_time = time.time()
        
        try:
            matrix = client.get_distance_matrix(locations)
            end_time = time.time()
            duration = end_time - start_time
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫—ä–≤ –º–µ—Ç–æ–¥ –µ –∏–∑–ø–æ–ª–∑–≤–∞–Ω
            if size > getattr(config.osrm, 'max_locations_for_osrm', 50):
                method = "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏"
            elif size <= 20:
                method = "OSRM (single)"
            else:
                method = "OSRM (chunked)"
            
            results.append({
                'size': size,
                'duration': duration,
                'method': method,
                'success': True
            })
            
            print(f"   ‚úÖ {duration:.2f}s - {method}")
            print(f"      Matrix —Ä–∞–∑–º–µ—Ä: {len(matrix.distances)}x{len(matrix.distances[0])}")
            
        except Exception as e:
            print(f"   ‚ùå –ì—Ä–µ—à–∫–∞: {e}")
            results.append({
                'size': size,
                'duration': 0,
                'method': "–ì—Ä–µ—à–∫–∞",
                'success': False
            })
        
        print()
    
    # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
    print("üìà –†–µ–∑—É–ª—Ç–∞—Ç–∏:")
    print("-" * 60)
    print(f"{'–õ–æ–∫–∞—Ü–∏–∏':<10} {'–í—Ä–µ–º–µ':<10} {'–ú–µ—Ç–æ–¥':<25} {'–°—Ç–∞—Ç—É—Å'}")
    print("-" * 60)
    
    for result in results:
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"{result['size']:<10} {result['duration']:<10.2f} {result['method']:<25} {status}")
    
    print()
    print("üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏—è:")
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—Ç–∞
    fast_results = [r for r in results if r['success'] and r['duration'] < 5.0]
    slow_results = [r for r in results if r['success'] and r['duration'] >= 5.0]
    
    if fast_results:
        max_fast = max(r['size'] for r in fast_results)
        print(f"   ‚Ä¢ –î–æ {max_fast} –ª–æ–∫–∞—Ü–∏–∏: –ë—ä—Ä–∑–æ ({[r['duration'] for r in fast_results if r['size'] == max_fast][0]:.2f}s)")
    
    if slow_results:
        min_slow = min(r['size'] for r in slow_results)
        print(f"   ‚Ä¢ –û—Ç {min_slow} –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞–≥–æ—Ä–µ: –ü–æ-–±–∞–≤–Ω–æ (OSRM chunking)")
    
    approx_results = [r for r in results if r['method'] == "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏"]
    if approx_results:
        avg_approx_time = sum(r['duration'] for r in approx_results) / len(approx_results)
        print(f"   ‚Ä¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏: –°—Ä–µ–¥–Ω–æ {avg_approx_time:.2f}s –∑–∞ –≥–æ–ª–µ–º–∏ datasets")
    
    print()
    print("üí° –ü—Ä–µ–ø–æ—Ä—ä–∫–∏:")
    print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∏–∑–±–∏—Ä–∞ –Ω–∞–π-–µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏—è—Ç –º–µ—Ç–æ–¥")
    print("   ‚Ä¢ –ó–∞ > 50 –ª–æ–∫–∞—Ü–∏–∏ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏")
    print("   ‚Ä¢ –¢–æ–≤–∞ –µ –æ–ø—Ç–∏–º–∞–ª–Ω–æ—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –∑–∞ 150-300+ –∫–ª–∏–µ–Ω—Ç–∞")
    
    client.close()

if __name__ == "__main__":
    test_efficiency() 